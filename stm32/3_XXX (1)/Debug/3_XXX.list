
3_XXX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08007da0  08007da0  00017da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080c0  080080c0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080080c0  080080c0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080080c0  080080c0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080c0  080080c0  000180c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080c4  080080c4  000180c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080080c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000068  08008130  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08008130  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012698  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029d8  00000000  00000000  0003276c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001238  00000000  00000000  00035148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e61  00000000  00000000  00036380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019bad  00000000  00000000  000371e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b2e  00000000  00000000  00050d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000947cf  00000000  00000000  000668bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b68  00000000  00000000  000fb08c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  00100bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08007d88 	.word	0x08007d88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08007d88 	.word	0x08007d88

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <lcd_send_cmd>:
#include "i2c-lcd.h"
#define SLAVE_ADDRESS_LCD 0x27 << 1

extern I2C_HandleTypeDef hi2c1; // Thêm vào đầu tệp i2c-lcd.c

void lcd_send_cmd(char cmd) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af02      	add	r7, sp, #8
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
    char data[4];
    data[0] = (cmd & 0xF0) | 0x0C;  // EN = 1, RS = 0
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	f023 030f 	bic.w	r3, r3, #15
 8000182:	b25b      	sxtb	r3, r3
 8000184:	f043 030c 	orr.w	r3, r3, #12
 8000188:	b25b      	sxtb	r3, r3
 800018a:	b2db      	uxtb	r3, r3
 800018c:	733b      	strb	r3, [r7, #12]
    data[1] = (cmd & 0xF0) | 0x08;  // EN = 0, RS = 0
 800018e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000192:	f023 030f 	bic.w	r3, r3, #15
 8000196:	b25b      	sxtb	r3, r3
 8000198:	f043 0308 	orr.w	r3, r3, #8
 800019c:	b25b      	sxtb	r3, r3
 800019e:	b2db      	uxtb	r3, r3
 80001a0:	737b      	strb	r3, [r7, #13]
    data[2] = ((cmd << 4) & 0xF0) | 0x0C;
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	011b      	lsls	r3, r3, #4
 80001a6:	b25b      	sxtb	r3, r3
 80001a8:	f043 030c 	orr.w	r3, r3, #12
 80001ac:	b25b      	sxtb	r3, r3
 80001ae:	b2db      	uxtb	r3, r3
 80001b0:	73bb      	strb	r3, [r7, #14]
    data[3] = ((cmd << 4) & 0xF0) | 0x08;
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	011b      	lsls	r3, r3, #4
 80001b6:	b25b      	sxtb	r3, r3
 80001b8:	f043 0308 	orr.w	r3, r3, #8
 80001bc:	b25b      	sxtb	r3, r3
 80001be:	b2db      	uxtb	r3, r3
 80001c0:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data, 4, HAL_MAX_DELAY);
 80001c2:	f107 020c 	add.w	r2, r7, #12
 80001c6:	f04f 33ff 	mov.w	r3, #4294967295
 80001ca:	9300      	str	r3, [sp, #0]
 80001cc:	2304      	movs	r3, #4
 80001ce:	214e      	movs	r1, #78	; 0x4e
 80001d0:	4803      	ldr	r0, [pc, #12]	; (80001e0 <lcd_send_cmd+0x70>)
 80001d2:	f003 f833 	bl	800323c <HAL_I2C_Master_Transmit>
}
 80001d6:	bf00      	nop
 80001d8:	3710      	adds	r7, #16
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	200000b4 	.word	0x200000b4

080001e4 <lcd_send_data>:

void lcd_send_data(char data) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b086      	sub	sp, #24
 80001e8:	af02      	add	r7, sp, #8
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
    char data_arr[4];
    data_arr[0] = (data & 0xF0) | 0x0D;  // EN = 1, RS = 1
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	f023 030f 	bic.w	r3, r3, #15
 80001f6:	b25b      	sxtb	r3, r3
 80001f8:	f043 030d 	orr.w	r3, r3, #13
 80001fc:	b25b      	sxtb	r3, r3
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	733b      	strb	r3, [r7, #12]
    data_arr[1] = (data & 0xF0) | 0x09;  // EN = 0, RS = 1
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	f023 030f 	bic.w	r3, r3, #15
 800020a:	b25b      	sxtb	r3, r3
 800020c:	f043 0309 	orr.w	r3, r3, #9
 8000210:	b25b      	sxtb	r3, r3
 8000212:	b2db      	uxtb	r3, r3
 8000214:	737b      	strb	r3, [r7, #13]
    data_arr[2] = ((data << 4) & 0xF0) | 0x0D;
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	011b      	lsls	r3, r3, #4
 800021a:	b25b      	sxtb	r3, r3
 800021c:	f043 030d 	orr.w	r3, r3, #13
 8000220:	b25b      	sxtb	r3, r3
 8000222:	b2db      	uxtb	r3, r3
 8000224:	73bb      	strb	r3, [r7, #14]
    data_arr[3] = ((data << 4) & 0xF0) | 0x09;
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	011b      	lsls	r3, r3, #4
 800022a:	b25b      	sxtb	r3, r3
 800022c:	f043 0309 	orr.w	r3, r3, #9
 8000230:	b25b      	sxtb	r3, r3
 8000232:	b2db      	uxtb	r3, r3
 8000234:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_arr, 4, HAL_MAX_DELAY);
 8000236:	f107 020c 	add.w	r2, r7, #12
 800023a:	f04f 33ff 	mov.w	r3, #4294967295
 800023e:	9300      	str	r3, [sp, #0]
 8000240:	2304      	movs	r3, #4
 8000242:	214e      	movs	r1, #78	; 0x4e
 8000244:	4803      	ldr	r0, [pc, #12]	; (8000254 <lcd_send_data+0x70>)
 8000246:	f002 fff9 	bl	800323c <HAL_I2C_Master_Transmit>
}
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	200000b4 	.word	0x200000b4

08000258 <lcd_init>:

void lcd_init(void) {
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
    HAL_Delay(50);  // Wait for >40ms after power-on
 800025c:	2032      	movs	r0, #50	; 0x32
 800025e:	f001 fc7d 	bl	8001b5c <HAL_Delay>
    lcd_send_cmd(0x30);
 8000262:	2030      	movs	r0, #48	; 0x30
 8000264:	f7ff ff84 	bl	8000170 <lcd_send_cmd>
    HAL_Delay(5);   // Wait for >4.1ms
 8000268:	2005      	movs	r0, #5
 800026a:	f001 fc77 	bl	8001b5c <HAL_Delay>
    lcd_send_cmd(0x30);
 800026e:	2030      	movs	r0, #48	; 0x30
 8000270:	f7ff ff7e 	bl	8000170 <lcd_send_cmd>
    HAL_Delay(1);   // Wait for >100us
 8000274:	2001      	movs	r0, #1
 8000276:	f001 fc71 	bl	8001b5c <HAL_Delay>
    lcd_send_cmd(0x30);
 800027a:	2030      	movs	r0, #48	; 0x30
 800027c:	f7ff ff78 	bl	8000170 <lcd_send_cmd>
    HAL_Delay(10);
 8000280:	200a      	movs	r0, #10
 8000282:	f001 fc6b 	bl	8001b5c <HAL_Delay>
    lcd_send_cmd(0x20);  // 4-bit mode
 8000286:	2020      	movs	r0, #32
 8000288:	f7ff ff72 	bl	8000170 <lcd_send_cmd>
    HAL_Delay(10);
 800028c:	200a      	movs	r0, #10
 800028e:	f001 fc65 	bl	8001b5c <HAL_Delay>

    lcd_send_cmd(0x28);  // Function set: 4-bit mode, 2 lines, 5x8 dots
 8000292:	2028      	movs	r0, #40	; 0x28
 8000294:	f7ff ff6c 	bl	8000170 <lcd_send_cmd>
    lcd_send_cmd(0x08);  // Display off
 8000298:	2008      	movs	r0, #8
 800029a:	f7ff ff69 	bl	8000170 <lcd_send_cmd>
    lcd_send_cmd(0x01);  // Clear display
 800029e:	2001      	movs	r0, #1
 80002a0:	f7ff ff66 	bl	8000170 <lcd_send_cmd>
    HAL_Delay(2);
 80002a4:	2002      	movs	r0, #2
 80002a6:	f001 fc59 	bl	8001b5c <HAL_Delay>
    lcd_send_cmd(0x06);  // Entry mode set
 80002aa:	2006      	movs	r0, #6
 80002ac:	f7ff ff60 	bl	8000170 <lcd_send_cmd>
    lcd_send_cmd(0x0C);  // Display on, cursor off
 80002b0:	200c      	movs	r0, #12
 80002b2:	f7ff ff5d 	bl	8000170 <lcd_send_cmd>
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}

080002ba <lcd_send_string>:

void lcd_send_string(char *str) {
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b082      	sub	sp, #8
 80002be:	af00      	add	r7, sp, #0
 80002c0:	6078      	str	r0, [r7, #4]
    while (*str) {
 80002c2:	e006      	b.n	80002d2 <lcd_send_string+0x18>
        lcd_send_data(*str++);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	1c5a      	adds	r2, r3, #1
 80002c8:	607a      	str	r2, [r7, #4]
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f7ff ff89 	bl	80001e4 <lcd_send_data>
    while (*str) {
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d1f4      	bne.n	80002c4 <lcd_send_string+0xa>
    }
}
 80002da:	bf00      	nop
 80002dc:	bf00      	nop
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <lcd_clear>:

void lcd_clear(void) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);  // Clear display
 80002e8:	2001      	movs	r0, #1
 80002ea:	f7ff ff41 	bl	8000170 <lcd_send_cmd>
    HAL_Delay(2);
 80002ee:	2002      	movs	r0, #2
 80002f0:	f001 fc34 	bl	8001b5c <HAL_Delay>
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <lcd_put_cur>:

void lcd_put_cur(int row, int col) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	6039      	str	r1, [r7, #0]
    uint8_t pos;
    switch (row) {
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2b03      	cmp	r3, #3
 8000306:	d827      	bhi.n	8000358 <lcd_put_cur+0x60>
 8000308:	a201      	add	r2, pc, #4	; (adr r2, 8000310 <lcd_put_cur+0x18>)
 800030a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800030e:	bf00      	nop
 8000310:	08000321 	.word	0x08000321
 8000314:	0800032f 	.word	0x0800032f
 8000318:	0800033d 	.word	0x0800033d
 800031c:	0800034b 	.word	0x0800034b
        case 0:
            pos = col | 0x80;
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	b25b      	sxtb	r3, r3
 8000324:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000328:	b25b      	sxtb	r3, r3
 800032a:	73fb      	strb	r3, [r7, #15]
            break;
 800032c:	e01a      	b.n	8000364 <lcd_put_cur+0x6c>
        case 1:
            pos = col | 0xC0;
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	b25b      	sxtb	r3, r3
 8000332:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000336:	b25b      	sxtb	r3, r3
 8000338:	73fb      	strb	r3, [r7, #15]
            break;
 800033a:	e013      	b.n	8000364 <lcd_put_cur+0x6c>
        case 2:
            pos = col | 0x94;
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	b25b      	sxtb	r3, r3
 8000340:	f063 036b 	orn	r3, r3, #107	; 0x6b
 8000344:	b25b      	sxtb	r3, r3
 8000346:	73fb      	strb	r3, [r7, #15]
            break;
 8000348:	e00c      	b.n	8000364 <lcd_put_cur+0x6c>
        case 3:
            pos = col | 0xD4;
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	b25b      	sxtb	r3, r3
 800034e:	f063 032b 	orn	r3, r3, #43	; 0x2b
 8000352:	b25b      	sxtb	r3, r3
 8000354:	73fb      	strb	r3, [r7, #15]
            break;
 8000356:	e005      	b.n	8000364 <lcd_put_cur+0x6c>
        default:
            pos = col | 0x80;
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	b25b      	sxtb	r3, r3
 800035c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000360:	b25b      	sxtb	r3, r3
 8000362:	73fb      	strb	r3, [r7, #15]
    }
    lcd_send_cmd(pos);
 8000364:	7bfb      	ldrb	r3, [r7, #15]
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ff02 	bl	8000170 <lcd_send_cmd>
}
 800036c:	bf00      	nop
 800036e:	3710      	adds	r7, #16
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <HAL_TIM_PWM_PulseFinishedCallback>:
//    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, r); //  ? ?
//    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, g); // Xanh lá
//    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, b); // Xanh dương
//}
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 800037c:	2100      	movs	r1, #0
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000380:	f004 f9de 	bl	8004740 <HAL_TIM_PWM_Stop_DMA>
    htim3.Instance->CCR1 = 0;
 8000384:	4b03      	ldr	r3, [pc, #12]	; (8000394 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2200      	movs	r2, #0
 800038a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800038c:	bf00      	nop
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000150 	.word	0x20000150

08000398 <mapValue>:
{
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)pwmData, 24 * noOfLEDs);
}

uint32_t mapValue(uint32_t input)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	return (input * 1023)/3200;
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	4613      	mov	r3, r2
 80003a4:	029b      	lsls	r3, r3, #10
 80003a6:	1a9b      	subs	r3, r3, r2
 80003a8:	4a04      	ldr	r2, [pc, #16]	; (80003bc <mapValue+0x24>)
 80003aa:	fba2 2303 	umull	r2, r3, r2, r3
 80003ae:	0a9b      	lsrs	r3, r3, #10
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	51eb851f 	.word	0x51eb851f

080003c0 <mapValue2>:
uint32_t mapValue2(uint32_t input2)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	return (input2 * 1023)/3200;
 80003c8:	687a      	ldr	r2, [r7, #4]
 80003ca:	4613      	mov	r3, r2
 80003cc:	029b      	lsls	r3, r3, #10
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	4a04      	ldr	r2, [pc, #16]	; (80003e4 <mapValue2+0x24>)
 80003d2:	fba2 2303 	umull	r2, r3, r2, r3
 80003d6:	0a9b      	lsrs	r3, r3, #10
}
 80003d8:	4618      	mov	r0, r3
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc80      	pop	{r7}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	51eb851f 	.word	0x51eb851f

080003e8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	80fb      	strh	r3, [r7, #6]
    uint32_t currentTime = HAL_GetTick();
 80003f2:	f001 fba9 	bl	8001b48 <HAL_GetTick>
 80003f6:	60f8      	str	r0, [r7, #12]

    if (GPIO_Pin == GPIO_PIN_0 && (currentTime - lastPressTime1 > debounceDelay))
 80003f8:	88fb      	ldrh	r3, [r7, #6]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d13c      	bne.n	8000478 <HAL_GPIO_EXTI_Callback+0x90>
 80003fe:	4b40      	ldr	r3, [pc, #256]	; (8000500 <HAL_GPIO_EXTI_Callback+0x118>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	68fa      	ldr	r2, [r7, #12]
 8000404:	1ad3      	subs	r3, r2, r3
 8000406:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800040a:	4293      	cmp	r3, r2
 800040c:	d934      	bls.n	8000478 <HAL_GPIO_EXTI_Callback+0x90>
    {
        button1State = !button1State;
 800040e:	4b3d      	ldr	r3, [pc, #244]	; (8000504 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	2b00      	cmp	r3, #0
 8000414:	bf0c      	ite	eq
 8000416:	2301      	moveq	r3, #1
 8000418:	2300      	movne	r3, #0
 800041a:	b2db      	uxtb	r3, r3
 800041c:	461a      	mov	r2, r3
 800041e:	4b39      	ldr	r3, [pc, #228]	; (8000504 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000420:	701a      	strb	r2, [r3, #0]
        led1State = button1State;  // �?ồng bộ trạng thái LED với nút nhấn
 8000422:	4b38      	ldr	r3, [pc, #224]	; (8000504 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b00      	cmp	r3, #0
 8000428:	bf14      	ite	ne
 800042a:	2301      	movne	r3, #1
 800042c:	2300      	moveq	r3, #0
 800042e:	b2da      	uxtb	r2, r3
 8000430:	4b35      	ldr	r3, [pc, #212]	; (8000508 <HAL_GPIO_EXTI_Callback+0x120>)
 8000432:	701a      	strb	r2, [r3, #0]
        if (button1State) {
 8000434:	4b33      	ldr	r3, [pc, #204]	; (8000504 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d00c      	beq.n	8000456 <HAL_GPIO_EXTI_Callback+0x6e>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2102      	movs	r1, #2
 8000440:	4832      	ldr	r0, [pc, #200]	; (800050c <HAL_GPIO_EXTI_Callback+0x124>)
 8000442:	f002 fd87 	bl	8002f54 <HAL_GPIO_WritePin>
            button1Flag = 1;
 8000446:	4b32      	ldr	r3, [pc, #200]	; (8000510 <HAL_GPIO_EXTI_Callback+0x128>)
 8000448:	2201      	movs	r2, #1
 800044a:	701a      	strb	r2, [r3, #0]
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800044c:	2100      	movs	r1, #0
 800044e:	4831      	ldr	r0, [pc, #196]	; (8000514 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000450:	f004 f870 	bl	8004534 <HAL_TIM_PWM_Start>
 8000454:	e00b      	b.n	800046e <HAL_GPIO_EXTI_Callback+0x86>
        } else {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000456:	2200      	movs	r2, #0
 8000458:	2102      	movs	r1, #2
 800045a:	482c      	ldr	r0, [pc, #176]	; (800050c <HAL_GPIO_EXTI_Callback+0x124>)
 800045c:	f002 fd7a 	bl	8002f54 <HAL_GPIO_WritePin>
            button1Flag = 0;
 8000460:	4b2b      	ldr	r3, [pc, #172]	; (8000510 <HAL_GPIO_EXTI_Callback+0x128>)
 8000462:	2200      	movs	r2, #0
 8000464:	701a      	strb	r2, [r3, #0]
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000466:	2100      	movs	r1, #0
 8000468:	482a      	ldr	r0, [pc, #168]	; (8000514 <HAL_GPIO_EXTI_Callback+0x12c>)
 800046a:	f004 f905 	bl	8004678 <HAL_TIM_PWM_Stop>
        }
        lastPressTime1 = currentTime;
 800046e:	4a24      	ldr	r2, [pc, #144]	; (8000500 <HAL_GPIO_EXTI_Callback+0x118>)
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	6013      	str	r3, [r2, #0]
        updateLedStatusOnLCD();
 8000474:	f000 fc3a 	bl	8000cec <updateLedStatusOnLCD>
    }

    if (GPIO_Pin == GPIO_PIN_5 && (currentTime - lastPressTime2 > debounceDelay))
 8000478:	88fb      	ldrh	r3, [r7, #6]
 800047a:	2b20      	cmp	r3, #32
 800047c:	d13c      	bne.n	80004f8 <HAL_GPIO_EXTI_Callback+0x110>
 800047e:	4b26      	ldr	r3, [pc, #152]	; (8000518 <HAL_GPIO_EXTI_Callback+0x130>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	68fa      	ldr	r2, [r7, #12]
 8000484:	1ad3      	subs	r3, r2, r3
 8000486:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800048a:	4293      	cmp	r3, r2
 800048c:	d934      	bls.n	80004f8 <HAL_GPIO_EXTI_Callback+0x110>
    {
        button2State = !button2State;
 800048e:	4b23      	ldr	r3, [pc, #140]	; (800051c <HAL_GPIO_EXTI_Callback+0x134>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	bf0c      	ite	eq
 8000496:	2301      	moveq	r3, #1
 8000498:	2300      	movne	r3, #0
 800049a:	b2db      	uxtb	r3, r3
 800049c:	461a      	mov	r2, r3
 800049e:	4b1f      	ldr	r3, [pc, #124]	; (800051c <HAL_GPIO_EXTI_Callback+0x134>)
 80004a0:	701a      	strb	r2, [r3, #0]
        led2State = button2State;  // �?ồng bộ trạng thái LED với nút nhấn
 80004a2:	4b1e      	ldr	r3, [pc, #120]	; (800051c <HAL_GPIO_EXTI_Callback+0x134>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	bf14      	ite	ne
 80004aa:	2301      	movne	r3, #1
 80004ac:	2300      	moveq	r3, #0
 80004ae:	b2da      	uxtb	r2, r3
 80004b0:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <HAL_GPIO_EXTI_Callback+0x138>)
 80004b2:	701a      	strb	r2, [r3, #0]
        if (button2State) {
 80004b4:	4b19      	ldr	r3, [pc, #100]	; (800051c <HAL_GPIO_EXTI_Callback+0x134>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d00c      	beq.n	80004d6 <HAL_GPIO_EXTI_Callback+0xee>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80004bc:	2201      	movs	r2, #1
 80004be:	2110      	movs	r1, #16
 80004c0:	4812      	ldr	r0, [pc, #72]	; (800050c <HAL_GPIO_EXTI_Callback+0x124>)
 80004c2:	f002 fd47 	bl	8002f54 <HAL_GPIO_WritePin>
            button2Flag = 1;
 80004c6:	4b17      	ldr	r3, [pc, #92]	; (8000524 <HAL_GPIO_EXTI_Callback+0x13c>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	701a      	strb	r2, [r3, #0]
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80004cc:	2104      	movs	r1, #4
 80004ce:	4811      	ldr	r0, [pc, #68]	; (8000514 <HAL_GPIO_EXTI_Callback+0x12c>)
 80004d0:	f004 f830 	bl	8004534 <HAL_TIM_PWM_Start>
 80004d4:	e00b      	b.n	80004ee <HAL_GPIO_EXTI_Callback+0x106>
        } else {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2110      	movs	r1, #16
 80004da:	480c      	ldr	r0, [pc, #48]	; (800050c <HAL_GPIO_EXTI_Callback+0x124>)
 80004dc:	f002 fd3a 	bl	8002f54 <HAL_GPIO_WritePin>
            button2Flag = 0;
 80004e0:	4b10      	ldr	r3, [pc, #64]	; (8000524 <HAL_GPIO_EXTI_Callback+0x13c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80004e6:	2104      	movs	r1, #4
 80004e8:	480a      	ldr	r0, [pc, #40]	; (8000514 <HAL_GPIO_EXTI_Callback+0x12c>)
 80004ea:	f004 f8c5 	bl	8004678 <HAL_TIM_PWM_Stop>
        }
        lastPressTime2 = currentTime;
 80004ee:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <HAL_GPIO_EXTI_Callback+0x130>)
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	6013      	str	r3, [r2, #0]
        updateLedStatusOnLCD();
 80004f4:	f000 fbfa 	bl	8000cec <updateLedStatusOnLCD>
    }
}
 80004f8:	bf00      	nop
 80004fa:	3710      	adds	r7, #16
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	200002b0 	.word	0x200002b0
 8000504:	20000224 	.word	0x20000224
 8000508:	20000310 	.word	0x20000310
 800050c:	40010800 	.word	0x40010800
 8000510:	200002ac 	.word	0x200002ac
 8000514:	20000108 	.word	0x20000108
 8000518:	200002b4 	.word	0x200002b4
 800051c:	20000225 	.word	0x20000225
 8000520:	20000311 	.word	0x20000311
 8000524:	200002ad 	.word	0x200002ad

08000528 <handleCommand>:

void handleCommand(char receivedChar) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]

    switch (receivedChar) {
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	3b61      	subs	r3, #97	; 0x61
 8000536:	2b05      	cmp	r3, #5
 8000538:	d862      	bhi.n	8000600 <handleCommand+0xd8>
 800053a:	a201      	add	r2, pc, #4	; (adr r2, 8000540 <handleCommand+0x18>)
 800053c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000540:	08000559 	.word	0x08000559
 8000544:	0800057f 	.word	0x0800057f
 8000548:	080005a5 	.word	0x080005a5
 800054c:	080005cb 	.word	0x080005cb
 8000550:	080005f1 	.word	0x080005f1
 8000554:	080005f9 	.word	0x080005f9
        case 'a':
            led1State = true;
 8000558:	4b2d      	ldr	r3, [pc, #180]	; (8000610 <handleCommand+0xe8>)
 800055a:	2201      	movs	r2, #1
 800055c:	701a      	strb	r2, [r3, #0]
            button1State = true;
 800055e:	4b2d      	ldr	r3, [pc, #180]	; (8000614 <handleCommand+0xec>)
 8000560:	2201      	movs	r2, #1
 8000562:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2102      	movs	r1, #2
 8000568:	482b      	ldr	r0, [pc, #172]	; (8000618 <handleCommand+0xf0>)
 800056a:	f002 fcf3 	bl	8002f54 <HAL_GPIO_WritePin>
            button1Flag = 1;
 800056e:	4b2b      	ldr	r3, [pc, #172]	; (800061c <handleCommand+0xf4>)
 8000570:	2201      	movs	r2, #1
 8000572:	701a      	strb	r2, [r3, #0]
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000574:	2100      	movs	r1, #0
 8000576:	482a      	ldr	r0, [pc, #168]	; (8000620 <handleCommand+0xf8>)
 8000578:	f003 ffdc 	bl	8004534 <HAL_TIM_PWM_Start>
            break;
 800057c:	e041      	b.n	8000602 <handleCommand+0xda>
        case 'b':
            led1State = false;
 800057e:	4b24      	ldr	r3, [pc, #144]	; (8000610 <handleCommand+0xe8>)
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
            button1State = false;
 8000584:	4b23      	ldr	r3, [pc, #140]	; (8000614 <handleCommand+0xec>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2102      	movs	r1, #2
 800058e:	4822      	ldr	r0, [pc, #136]	; (8000618 <handleCommand+0xf0>)
 8000590:	f002 fce0 	bl	8002f54 <HAL_GPIO_WritePin>
            button1Flag = 0;
 8000594:	4b21      	ldr	r3, [pc, #132]	; (800061c <handleCommand+0xf4>)
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800059a:	2100      	movs	r1, #0
 800059c:	4820      	ldr	r0, [pc, #128]	; (8000620 <handleCommand+0xf8>)
 800059e:	f004 f86b 	bl	8004678 <HAL_TIM_PWM_Stop>
            break;
 80005a2:	e02e      	b.n	8000602 <handleCommand+0xda>
        case 'c':
            led2State = true;
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <handleCommand+0xfc>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	701a      	strb	r2, [r3, #0]
            button2State = true;
 80005aa:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <handleCommand+0x100>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2110      	movs	r1, #16
 80005b4:	4818      	ldr	r0, [pc, #96]	; (8000618 <handleCommand+0xf0>)
 80005b6:	f002 fccd 	bl	8002f54 <HAL_GPIO_WritePin>
            button2Flag = 1;
 80005ba:	4b1c      	ldr	r3, [pc, #112]	; (800062c <handleCommand+0x104>)
 80005bc:	2201      	movs	r2, #1
 80005be:	701a      	strb	r2, [r3, #0]
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005c0:	2104      	movs	r1, #4
 80005c2:	4817      	ldr	r0, [pc, #92]	; (8000620 <handleCommand+0xf8>)
 80005c4:	f003 ffb6 	bl	8004534 <HAL_TIM_PWM_Start>
            break;
 80005c8:	e01b      	b.n	8000602 <handleCommand+0xda>
        case 'd':
            led2State = false;
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <handleCommand+0xfc>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
            button2State = false;
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <handleCommand+0x100>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2110      	movs	r1, #16
 80005da:	480f      	ldr	r0, [pc, #60]	; (8000618 <handleCommand+0xf0>)
 80005dc:	f002 fcba 	bl	8002f54 <HAL_GPIO_WritePin>
            button2Flag = 0;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <handleCommand+0x104>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80005e6:	2104      	movs	r1, #4
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <handleCommand+0xf8>)
 80005ea:	f004 f845 	bl	8004678 <HAL_TIM_PWM_Stop>
            break;
 80005ee:	e008      	b.n	8000602 <handleCommand+0xda>
        case 'e':
            adcActive = 1;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <handleCommand+0x108>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	601a      	str	r2, [r3, #0]
            break;
 80005f6:	e004      	b.n	8000602 <handleCommand+0xda>
        case 'f':
            adcActive = 0;
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <handleCommand+0x108>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
            break;
 80005fe:	e000      	b.n	8000602 <handleCommand+0xda>
        default:
            break;
 8000600:	bf00      	nop
    }
    updateLedStatusOnLCD();
 8000602:	f000 fb73 	bl	8000cec <updateLedStatusOnLCD>
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000310 	.word	0x20000310
 8000614:	20000224 	.word	0x20000224
 8000618:	40010800 	.word	0x40010800
 800061c:	200002ac 	.word	0x200002ac
 8000620:	20000108 	.word	0x20000108
 8000624:	20000311 	.word	0x20000311
 8000628:	20000225 	.word	0x20000225
 800062c:	200002ad 	.word	0x200002ad
 8000630:	200002b8 	.word	0x200002b8

08000634 <ProcessReceivedCommaSeparatedString>:
enum UARTState currentState = STATE_COMMAND;


// Function to process the received RGB values

void ProcessReceivedCommaSeparatedString(char *data) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    // B�? qua ký tự 'B' ở đầu nếu có
    if(data[0] == 'B') {
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b42      	cmp	r3, #66	; 0x42
 8000642:	d102      	bne.n	800064a <ProcessReceivedCommaSeparatedString+0x16>
        data++; // Di chuyển con tr�? qua ký tự đầu tiên
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3301      	adds	r3, #1
 8000648:	607b      	str	r3, [r7, #4]
    }

    char *token;
    char *rest = data;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	61fb      	str	r3, [r7, #28]

    // Tách giá trị đầu tiên
    token = strtok(rest, ",");
 800064e:	492b      	ldr	r1, [pc, #172]	; (80006fc <ProcessReceivedCommaSeparatedString+0xc8>)
 8000650:	69f8      	ldr	r0, [r7, #28]
 8000652:	f005 fedf 	bl	8006414 <strtok>
 8000656:	61b8      	str	r0, [r7, #24]
    if (token != NULL) {
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d01f      	beq.n	800069e <ProcessReceivedCommaSeparatedString+0x6a>
        int newBrightness1 = atoi(token);
 800065e:	69b8      	ldr	r0, [r7, #24]
 8000660:	f005 fcca 	bl	8005ff8 <atoi>
 8000664:	6178      	str	r0, [r7, #20]
        if(newBrightness1 >= 0 && newBrightness1 <= 100) {
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	2b00      	cmp	r3, #0
 800066a:	db18      	blt.n	800069e <ProcessReceivedCommaSeparatedString+0x6a>
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	2b64      	cmp	r3, #100	; 0x64
 8000670:	dc15      	bgt.n	800069e <ProcessReceivedCommaSeparatedString+0x6a>
            brightness1 = newBrightness1;
 8000672:	4a23      	ldr	r2, [pc, #140]	; (8000700 <ProcessReceivedCommaSeparatedString+0xcc>)
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	6013      	str	r3, [r2, #0]
            uint32_t pwm_value1 = (brightness1 * htim1.Init.Period) / 100;
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <ProcessReceivedCommaSeparatedString+0xd0>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	4a20      	ldr	r2, [pc, #128]	; (8000700 <ProcessReceivedCommaSeparatedString+0xcc>)
 800067e:	6812      	ldr	r2, [r2, #0]
 8000680:	fb02 f303 	mul.w	r3, r2, r3
 8000684:	4a20      	ldr	r2, [pc, #128]	; (8000708 <ProcessReceivedCommaSeparatedString+0xd4>)
 8000686:	fba2 2303 	umull	r2, r3, r2, r3
 800068a:	095b      	lsrs	r3, r3, #5
 800068c:	613b      	str	r3, [r7, #16]
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800068e:	2100      	movs	r1, #0
 8000690:	481c      	ldr	r0, [pc, #112]	; (8000704 <ProcessReceivedCommaSeparatedString+0xd0>)
 8000692:	f003 ff4f 	bl	8004534 <HAL_TIM_PWM_Start>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_value1);
 8000696:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <ProcessReceivedCommaSeparatedString+0xd0>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	693a      	ldr	r2, [r7, #16]
 800069c:	635a      	str	r2, [r3, #52]	; 0x34
        }
    }

    // Tách giá trị thứ hai
    token = strtok(NULL, ",");
 800069e:	4917      	ldr	r1, [pc, #92]	; (80006fc <ProcessReceivedCommaSeparatedString+0xc8>)
 80006a0:	2000      	movs	r0, #0
 80006a2:	f005 feb7 	bl	8006414 <strtok>
 80006a6:	61b8      	str	r0, [r7, #24]
    if (token != NULL) {
 80006a8:	69bb      	ldr	r3, [r7, #24]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d01f      	beq.n	80006ee <ProcessReceivedCommaSeparatedString+0xba>
        int newBrightness2 = atoi(token);
 80006ae:	69b8      	ldr	r0, [r7, #24]
 80006b0:	f005 fca2 	bl	8005ff8 <atoi>
 80006b4:	60f8      	str	r0, [r7, #12]
        if(newBrightness2 >= 0 && newBrightness2 <= 100) {
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db18      	blt.n	80006ee <ProcessReceivedCommaSeparatedString+0xba>
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2b64      	cmp	r3, #100	; 0x64
 80006c0:	dc15      	bgt.n	80006ee <ProcessReceivedCommaSeparatedString+0xba>
            brightness2 = newBrightness2;
 80006c2:	4a12      	ldr	r2, [pc, #72]	; (800070c <ProcessReceivedCommaSeparatedString+0xd8>)
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	6013      	str	r3, [r2, #0]
            uint32_t pwm_value2 = (brightness2 * htim1.Init.Period) / 100;
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <ProcessReceivedCommaSeparatedString+0xd0>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	4a0f      	ldr	r2, [pc, #60]	; (800070c <ProcessReceivedCommaSeparatedString+0xd8>)
 80006ce:	6812      	ldr	r2, [r2, #0]
 80006d0:	fb02 f303 	mul.w	r3, r2, r3
 80006d4:	4a0c      	ldr	r2, [pc, #48]	; (8000708 <ProcessReceivedCommaSeparatedString+0xd4>)
 80006d6:	fba2 2303 	umull	r2, r3, r2, r3
 80006da:	095b      	lsrs	r3, r3, #5
 80006dc:	60bb      	str	r3, [r7, #8]
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80006de:	2104      	movs	r1, #4
 80006e0:	4808      	ldr	r0, [pc, #32]	; (8000704 <ProcessReceivedCommaSeparatedString+0xd0>)
 80006e2:	f003 ff27 	bl	8004534 <HAL_TIM_PWM_Start>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_value2);
 80006e6:	4b07      	ldr	r3, [pc, #28]	; (8000704 <ProcessReceivedCommaSeparatedString+0xd0>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	68ba      	ldr	r2, [r7, #8]
 80006ec:	639a      	str	r2, [r3, #56]	; 0x38
        }
    }

    // Cập nhật LCD
    updateBrightnessOnLCD();
 80006ee:	f000 f80f 	bl	8000710 <updateBrightnessOnLCD>
}
 80006f2:	bf00      	nop
 80006f4:	3720      	adds	r7, #32
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	08007dac 	.word	0x08007dac
 8000700:	20000308 	.word	0x20000308
 8000704:	20000108 	.word	0x20000108
 8000708:	51eb851f 	.word	0x51eb851f
 800070c:	2000030c 	.word	0x2000030c

08000710 <updateBrightnessOnLCD>:

void updateBrightnessOnLCD(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
    char buffer[20];

    // Xóa dòng cũ trước khi hiển thị giá trị mới
    lcd_put_cur(2, 0);
 8000716:	2100      	movs	r1, #0
 8000718:	2002      	movs	r0, #2
 800071a:	f7ff fded 	bl	80002f8 <lcd_put_cur>
    lcd_send_string("          ");
 800071e:	4817      	ldr	r0, [pc, #92]	; (800077c <updateBrightnessOnLCD+0x6c>)
 8000720:	f7ff fdcb 	bl	80002ba <lcd_send_string>
    lcd_put_cur(3, 0);
 8000724:	2100      	movs	r1, #0
 8000726:	2003      	movs	r0, #3
 8000728:	f7ff fde6 	bl	80002f8 <lcd_put_cur>
    lcd_send_string("          ");
 800072c:	4813      	ldr	r0, [pc, #76]	; (800077c <updateBrightnessOnLCD+0x6c>)
 800072e:	f7ff fdc4 	bl	80002ba <lcd_send_string>

    // Hiển thị giá trị mới
    lcd_put_cur(2, 0);
 8000732:	2100      	movs	r1, #0
 8000734:	2002      	movs	r0, #2
 8000736:	f7ff fddf 	bl	80002f8 <lcd_put_cur>
    snprintf(buffer, sizeof(buffer), "LB1: %3d%%", brightness1);
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <updateBrightnessOnLCD+0x70>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	1d38      	adds	r0, r7, #4
 8000740:	4a10      	ldr	r2, [pc, #64]	; (8000784 <updateBrightnessOnLCD+0x74>)
 8000742:	2114      	movs	r1, #20
 8000744:	f005 fda8 	bl	8006298 <sniprintf>
    lcd_send_string(buffer);
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff fdb5 	bl	80002ba <lcd_send_string>

    lcd_put_cur(3, 0);
 8000750:	2100      	movs	r1, #0
 8000752:	2003      	movs	r0, #3
 8000754:	f7ff fdd0 	bl	80002f8 <lcd_put_cur>
    snprintf(buffer, sizeof(buffer), "LB2: %3d%%", brightness2);
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <updateBrightnessOnLCD+0x78>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	1d38      	adds	r0, r7, #4
 800075e:	4a0b      	ldr	r2, [pc, #44]	; (800078c <updateBrightnessOnLCD+0x7c>)
 8000760:	2114      	movs	r1, #20
 8000762:	f005 fd99 	bl	8006298 <sniprintf>
    lcd_send_string(buffer);
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff fda6 	bl	80002ba <lcd_send_string>

    HAL_Delay(10); // Đảm bảo LCD có đủ thời gian cập nhật
 800076e:	200a      	movs	r0, #10
 8000770:	f001 f9f4 	bl	8001b5c <HAL_Delay>
}
 8000774:	bf00      	nop
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	08007db0 	.word	0x08007db0
 8000780:	20000308 	.word	0x20000308
 8000784:	08007dbc 	.word	0x08007dbc
 8000788:	2000030c 	.word	0x2000030c
 800078c:	08007dc8 	.word	0x08007dc8

08000790 <initializeLCD>:

void initializeLCD(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8000794:	2064      	movs	r0, #100	; 0x64
 8000796:	f001 f9e1 	bl	8001b5c <HAL_Delay>
  lcd_init();
 800079a:	f7ff fd5d 	bl	8000258 <lcd_init>
  HAL_Delay(100);
 800079e:	2064      	movs	r0, #100	; 0x64
 80007a0:	f001 f9dc 	bl	8001b5c <HAL_Delay>

  lcd_clear();
 80007a4:	f7ff fd9e 	bl	80002e4 <lcd_clear>
  HAL_Delay(50);
 80007a8:	2032      	movs	r0, #50	; 0x32
 80007aa:	f001 f9d7 	bl	8001b5c <HAL_Delay>

  // Hiển thị nhãn ban đầu
  lcd_put_cur(0, 0);
 80007ae:	2100      	movs	r1, #0
 80007b0:	2000      	movs	r0, #0
 80007b2:	f7ff fda1 	bl	80002f8 <lcd_put_cur>
  lcd_send_string("Time: "); // 6 ký tự cho "Time: "
 80007b6:	4815      	ldr	r0, [pc, #84]	; (800080c <initializeLCD+0x7c>)
 80007b8:	f7ff fd7f 	bl	80002ba <lcd_send_string>
  lcd_put_cur(1, 0);
 80007bc:	2100      	movs	r1, #0
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff fd9a 	bl	80002f8 <lcd_put_cur>
  lcd_send_string("Date: "); // 6 ký tự cho "Date: "
 80007c4:	4812      	ldr	r0, [pc, #72]	; (8000810 <initializeLCD+0x80>)
 80007c6:	f7ff fd78 	bl	80002ba <lcd_send_string>

  // Hiển thị trạng thái LED ban đầu
  lcd_put_cur(0, 11); // Bắt đầu từ cột thứ 11 (sau "Time: ")
 80007ca:	210b      	movs	r1, #11
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff fd93 	bl	80002f8 <lcd_put_cur>
  lcd_send_string("LED1: OFF");
 80007d2:	4810      	ldr	r0, [pc, #64]	; (8000814 <initializeLCD+0x84>)
 80007d4:	f7ff fd71 	bl	80002ba <lcd_send_string>
  lcd_put_cur(1, 11);
 80007d8:	210b      	movs	r1, #11
 80007da:	2001      	movs	r0, #1
 80007dc:	f7ff fd8c 	bl	80002f8 <lcd_put_cur>
  lcd_send_string("LED2: OFF");
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <initializeLCD+0x88>)
 80007e2:	f7ff fd6a 	bl	80002ba <lcd_send_string>

  // Thêm dòng cho độ sáng
  lcd_put_cur(2, 0);
 80007e6:	2100      	movs	r1, #0
 80007e8:	2002      	movs	r0, #2
 80007ea:	f7ff fd85 	bl	80002f8 <lcd_put_cur>
  lcd_send_string("LB1: 0%  ");
 80007ee:	480b      	ldr	r0, [pc, #44]	; (800081c <initializeLCD+0x8c>)
 80007f0:	f7ff fd63 	bl	80002ba <lcd_send_string>
  lcd_put_cur(3, 0);
 80007f4:	2100      	movs	r1, #0
 80007f6:	2003      	movs	r0, #3
 80007f8:	f7ff fd7e 	bl	80002f8 <lcd_put_cur>
  lcd_send_string("LB2: 0%  ");
 80007fc:	4808      	ldr	r0, [pc, #32]	; (8000820 <initializeLCD+0x90>)
 80007fe:	f7ff fd5c 	bl	80002ba <lcd_send_string>

  lcdInitialized = 1;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <initializeLCD+0x94>)
 8000804:	2201      	movs	r2, #1
 8000806:	701a      	strb	r2, [r3, #0]
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	08007dd4 	.word	0x08007dd4
 8000810:	08007ddc 	.word	0x08007ddc
 8000814:	08007de4 	.word	0x08007de4
 8000818:	08007df0 	.word	0x08007df0
 800081c:	08007dfc 	.word	0x08007dfc
 8000820:	08007e08 	.word	0x08007e08
 8000824:	20000307 	.word	0x20000307

08000828 <updateLCD>:

// Function to update LCD without clearing
void updateLCD(void) {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
    if (!lcdInitialized) {
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <updateLCD+0x30>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d102      	bne.n	800083a <updateLCD+0x12>
        initializeLCD();
 8000834:	f7ff ffac 	bl	8000790 <initializeLCD>
        return;
 8000838:	e00d      	b.n	8000856 <updateLCD+0x2e>
    }

    // Update only time portion
    lcd_put_cur(0, 0);
 800083a:	2100      	movs	r1, #0
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff fd5b 	bl	80002f8 <lcd_put_cur>
    lcd_send_string(timeStr);
 8000842:	4806      	ldr	r0, [pc, #24]	; (800085c <updateLCD+0x34>)
 8000844:	f7ff fd39 	bl	80002ba <lcd_send_string>

    // Update only date portion
    lcd_put_cur(1, 0);
 8000848:	2100      	movs	r1, #0
 800084a:	2001      	movs	r0, #1
 800084c:	f7ff fd54 	bl	80002f8 <lcd_put_cur>
    lcd_send_string(dateStr);
 8000850:	4803      	ldr	r0, [pc, #12]	; (8000860 <updateLCD+0x38>)
 8000852:	f7ff fd32 	bl	80002ba <lcd_send_string>
}
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000307 	.word	0x20000307
 800085c:	200002f0 	.word	0x200002f0
 8000860:	200002fc 	.word	0x200002fc

08000864 <parseTimeAndDate>:

void parseTimeAndDate(char* buffer) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
    // Check if received string has minimum required length
    if(strlen(buffer) >= 19) {
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff fc77 	bl	8000160 <strlen>
 8000872:	4603      	mov	r3, r0
 8000874:	2b12      	cmp	r3, #18
 8000876:	d913      	bls.n	80008a0 <parseTimeAndDate+0x3c>
        // Extract time (HH:MM:SS)
        strncpy(timeStr, buffer, 8);
 8000878:	2208      	movs	r2, #8
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	480a      	ldr	r0, [pc, #40]	; (80008a8 <parseTimeAndDate+0x44>)
 800087e:	f005 fdb6 	bl	80063ee <strncpy>
        timeStr[8] = '\0';
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <parseTimeAndDate+0x44>)
 8000884:	2200      	movs	r2, #0
 8000886:	721a      	strb	r2, [r3, #8]

        // Extract date (DD/MM/YYYY)
        strncpy(dateStr, buffer + 9, 10);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3309      	adds	r3, #9
 800088c:	220a      	movs	r2, #10
 800088e:	4619      	mov	r1, r3
 8000890:	4806      	ldr	r0, [pc, #24]	; (80008ac <parseTimeAndDate+0x48>)
 8000892:	f005 fdac 	bl	80063ee <strncpy>
        dateStr[10] = '\0';
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <parseTimeAndDate+0x48>)
 8000898:	2200      	movs	r2, #0
 800089a:	729a      	strb	r2, [r3, #10]

        // Update LCD without clearing
        updateLCD();
 800089c:	f7ff ffc4 	bl	8000828 <updateLCD>
    }
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200002f0 	.word	0x200002f0
 80008ac:	200002fc 	.word	0x200002fc

080008b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2) {
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a5e      	ldr	r2, [pc, #376]	; (8000a38 <HAL_UART_RxCpltCallback+0x188>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	f040 80b6 	bne.w	8000a30 <HAL_UART_RxCpltCallback+0x180>
        char receivedChar = rx_data;
 80008c4:	4b5d      	ldr	r3, [pc, #372]	; (8000a3c <HAL_UART_RxCpltCallback+0x18c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	73fb      	strb	r3, [r7, #15]

        // Process time/date data
        if((receivedChar >= '0' && receivedChar <= '9') ||
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	2b2f      	cmp	r3, #47	; 0x2f
 80008ce:	d902      	bls.n	80008d6 <HAL_UART_RxCpltCallback+0x26>
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	2b39      	cmp	r3, #57	; 0x39
 80008d4:	d90b      	bls.n	80008ee <HAL_UART_RxCpltCallback+0x3e>
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
 80008d8:	2b3a      	cmp	r3, #58	; 0x3a
 80008da:	d008      	beq.n	80008ee <HAL_UART_RxCpltCallback+0x3e>
           receivedChar == ':' || receivedChar == '/' ||
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	2b2f      	cmp	r3, #47	; 0x2f
 80008e0:	d005      	beq.n	80008ee <HAL_UART_RxCpltCallback+0x3e>
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	2b20      	cmp	r3, #32
 80008e6:	d002      	beq.n	80008ee <HAL_UART_RxCpltCallback+0x3e>
           receivedChar == ' ' || receivedChar == '\n') {
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	2b0a      	cmp	r3, #10
 80008ec:	d122      	bne.n	8000934 <HAL_UART_RxCpltCallback+0x84>

            if(RxIndex < sizeof(RxBuffer) - 1) {
 80008ee:	4b54      	ldr	r3, [pc, #336]	; (8000a40 <HAL_UART_RxCpltCallback+0x190>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b30      	cmp	r3, #48	; 0x30
 80008f4:	d809      	bhi.n	800090a <HAL_UART_RxCpltCallback+0x5a>
                RxBuffer[RxIndex++] = receivedChar;
 80008f6:	4b52      	ldr	r3, [pc, #328]	; (8000a40 <HAL_UART_RxCpltCallback+0x190>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	b2d1      	uxtb	r1, r2
 80008fe:	4a50      	ldr	r2, [pc, #320]	; (8000a40 <HAL_UART_RxCpltCallback+0x190>)
 8000900:	7011      	strb	r1, [r2, #0]
 8000902:	4619      	mov	r1, r3
 8000904:	4a4f      	ldr	r2, [pc, #316]	; (8000a44 <HAL_UART_RxCpltCallback+0x194>)
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	5453      	strb	r3, [r2, r1]
            }

            if(receivedChar == '\n' || RxIndex >= sizeof(RxBuffer) - 1) {
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	2b0a      	cmp	r3, #10
 800090e:	d004      	beq.n	800091a <HAL_UART_RxCpltCallback+0x6a>
 8000910:	4b4b      	ldr	r3, [pc, #300]	; (8000a40 <HAL_UART_RxCpltCallback+0x190>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b30      	cmp	r3, #48	; 0x30
 8000916:	f240 8083 	bls.w	8000a20 <HAL_UART_RxCpltCallback+0x170>
                RxBuffer[RxIndex] = '\0';
 800091a:	4b49      	ldr	r3, [pc, #292]	; (8000a40 <HAL_UART_RxCpltCallback+0x190>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	4b48      	ldr	r3, [pc, #288]	; (8000a44 <HAL_UART_RxCpltCallback+0x194>)
 8000922:	2100      	movs	r1, #0
 8000924:	5499      	strb	r1, [r3, r2]
                parseTimeAndDate(RxBuffer);
 8000926:	4847      	ldr	r0, [pc, #284]	; (8000a44 <HAL_UART_RxCpltCallback+0x194>)
 8000928:	f7ff ff9c 	bl	8000864 <parseTimeAndDate>
                RxIndex = 0;
 800092c:	4b44      	ldr	r3, [pc, #272]	; (8000a40 <HAL_UART_RxCpltCallback+0x190>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
            if(receivedChar == '\n' || RxIndex >= sizeof(RxBuffer) - 1) {
 8000932:	e075      	b.n	8000a20 <HAL_UART_RxCpltCallback+0x170>
            }
        }
        // Process commands
        else if(receivedChar == 'L' || receivedChar == 'a' || receivedChar == 'b' ||
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	2b4c      	cmp	r3, #76	; 0x4c
 8000938:	d014      	beq.n	8000964 <HAL_UART_RxCpltCallback+0xb4>
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	2b61      	cmp	r3, #97	; 0x61
 800093e:	d011      	beq.n	8000964 <HAL_UART_RxCpltCallback+0xb4>
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	2b62      	cmp	r3, #98	; 0x62
 8000944:	d00e      	beq.n	8000964 <HAL_UART_RxCpltCallback+0xb4>
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	2b63      	cmp	r3, #99	; 0x63
 800094a:	d00b      	beq.n	8000964 <HAL_UART_RxCpltCallback+0xb4>
                receivedChar == 'c' || receivedChar == 'd' || receivedChar == 'e' ||
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	2b64      	cmp	r3, #100	; 0x64
 8000950:	d008      	beq.n	8000964 <HAL_UART_RxCpltCallback+0xb4>
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	2b65      	cmp	r3, #101	; 0x65
 8000956:	d005      	beq.n	8000964 <HAL_UART_RxCpltCallback+0xb4>
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	2b66      	cmp	r3, #102	; 0x66
 800095c:	d002      	beq.n	8000964 <HAL_UART_RxCpltCallback+0xb4>
                receivedChar == 'f' || receivedChar == 'S') {
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	2b53      	cmp	r3, #83	; 0x53
 8000962:	d129      	bne.n	80009b8 <HAL_UART_RxCpltCallback+0x108>

            if(RxIndex < sizeof(RxBuffer) - 1) {
 8000964:	4b36      	ldr	r3, [pc, #216]	; (8000a40 <HAL_UART_RxCpltCallback+0x190>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b30      	cmp	r3, #48	; 0x30
 800096a:	d809      	bhi.n	8000980 <HAL_UART_RxCpltCallback+0xd0>
                RxBuffer[RxIndex++] = receivedChar;
 800096c:	4b34      	ldr	r3, [pc, #208]	; (8000a40 <HAL_UART_RxCpltCallback+0x190>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	1c5a      	adds	r2, r3, #1
 8000972:	b2d1      	uxtb	r1, r2
 8000974:	4a32      	ldr	r2, [pc, #200]	; (8000a40 <HAL_UART_RxCpltCallback+0x190>)
 8000976:	7011      	strb	r1, [r2, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	4a32      	ldr	r2, [pc, #200]	; (8000a44 <HAL_UART_RxCpltCallback+0x194>)
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	5453      	strb	r3, [r2, r1]
            }

            if(receivedChar == '\n' || RxIndex >= sizeof(RxBuffer) - 1) {
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	2b0a      	cmp	r3, #10
 8000984:	d003      	beq.n	800098e <HAL_UART_RxCpltCallback+0xde>
 8000986:	4b2e      	ldr	r3, [pc, #184]	; (8000a40 <HAL_UART_RxCpltCallback+0x190>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b30      	cmp	r3, #48	; 0x30
 800098c:	d94a      	bls.n	8000a24 <HAL_UART_RxCpltCallback+0x174>
                RxBuffer[RxIndex] = '\0';
 800098e:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <HAL_UART_RxCpltCallback+0x190>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	4b2b      	ldr	r3, [pc, #172]	; (8000a44 <HAL_UART_RxCpltCallback+0x194>)
 8000996:	2100      	movs	r1, #0
 8000998:	5499      	strb	r1, [r3, r2]
                if(RxBuffer[0] == 'S') {
 800099a:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <HAL_UART_RxCpltCallback+0x194>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b53      	cmp	r3, #83	; 0x53
 80009a0:	d103      	bne.n	80009aa <HAL_UART_RxCpltCallback+0xfa>
                    processAlarm(RxBuffer);
 80009a2:	4828      	ldr	r0, [pc, #160]	; (8000a44 <HAL_UART_RxCpltCallback+0x194>)
 80009a4:	f000 f8ac 	bl	8000b00 <processAlarm>
 80009a8:	e002      	b.n	80009b0 <HAL_UART_RxCpltCallback+0x100>
                } else {
                    processCommand(RxBuffer);
 80009aa:	4826      	ldr	r0, [pc, #152]	; (8000a44 <HAL_UART_RxCpltCallback+0x194>)
 80009ac:	f000 f850 	bl	8000a50 <processCommand>
                }
                RxIndex = 0;
 80009b0:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <HAL_UART_RxCpltCallback+0x190>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
            if(receivedChar == '\n' || RxIndex >= sizeof(RxBuffer) - 1) {
 80009b6:	e035      	b.n	8000a24 <HAL_UART_RxCpltCallback+0x174>
            }
        }
        // Process brightness data
        else if(isdigit(receivedChar) || receivedChar == ',' || receivedChar == 'B'|| receivedChar == '\n') {
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	3301      	adds	r3, #1
 80009bc:	4a22      	ldr	r2, [pc, #136]	; (8000a48 <HAL_UART_RxCpltCallback+0x198>)
 80009be:	4413      	add	r3, r2
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d108      	bne.n	80009dc <HAL_UART_RxCpltCallback+0x12c>
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	2b2c      	cmp	r3, #44	; 0x2c
 80009ce:	d005      	beq.n	80009dc <HAL_UART_RxCpltCallback+0x12c>
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	2b42      	cmp	r3, #66	; 0x42
 80009d4:	d002      	beq.n	80009dc <HAL_UART_RxCpltCallback+0x12c>
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	2b0a      	cmp	r3, #10
 80009da:	d124      	bne.n	8000a26 <HAL_UART_RxCpltCallback+0x176>
            if(RxIndex < sizeof(RxBuffer) - 1) {
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <HAL_UART_RxCpltCallback+0x190>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b30      	cmp	r3, #48	; 0x30
 80009e2:	d809      	bhi.n	80009f8 <HAL_UART_RxCpltCallback+0x148>
                RxBuffer[RxIndex++] = receivedChar;
 80009e4:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <HAL_UART_RxCpltCallback+0x190>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	1c5a      	adds	r2, r3, #1
 80009ea:	b2d1      	uxtb	r1, r2
 80009ec:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <HAL_UART_RxCpltCallback+0x190>)
 80009ee:	7011      	strb	r1, [r2, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <HAL_UART_RxCpltCallback+0x194>)
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	5453      	strb	r3, [r2, r1]
            }

            if(receivedChar == '\n' || RxIndex >= sizeof(RxBuffer) - 1) {
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	2b0a      	cmp	r3, #10
 80009fc:	d003      	beq.n	8000a06 <HAL_UART_RxCpltCallback+0x156>
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <HAL_UART_RxCpltCallback+0x190>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b30      	cmp	r3, #48	; 0x30
 8000a04:	d90f      	bls.n	8000a26 <HAL_UART_RxCpltCallback+0x176>
                RxBuffer[RxIndex] = '\0';
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <HAL_UART_RxCpltCallback+0x190>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <HAL_UART_RxCpltCallback+0x194>)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	5499      	strb	r1, [r3, r2]
                ProcessReceivedCommaSeparatedString(RxBuffer);
 8000a12:	480c      	ldr	r0, [pc, #48]	; (8000a44 <HAL_UART_RxCpltCallback+0x194>)
 8000a14:	f7ff fe0e 	bl	8000634 <ProcessReceivedCommaSeparatedString>
                RxIndex = 0;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_UART_RxCpltCallback+0x190>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
 8000a1e:	e002      	b.n	8000a26 <HAL_UART_RxCpltCallback+0x176>
            if(receivedChar == '\n' || RxIndex >= sizeof(RxBuffer) - 1) {
 8000a20:	bf00      	nop
 8000a22:	e000      	b.n	8000a26 <HAL_UART_RxCpltCallback+0x176>
            if(receivedChar == '\n' || RxIndex >= sizeof(RxBuffer) - 1) {
 8000a24:	bf00      	nop
            }
        }

        HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_data, 1);
 8000a26:	2201      	movs	r2, #1
 8000a28:	4904      	ldr	r1, [pc, #16]	; (8000a3c <HAL_UART_RxCpltCallback+0x18c>)
 8000a2a:	4808      	ldr	r0, [pc, #32]	; (8000a4c <HAL_UART_RxCpltCallback+0x19c>)
 8000a2c:	f004 fdad 	bl	800558a <HAL_UART_Receive_IT>
    }
}
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40004400 	.word	0x40004400
 8000a3c:	20000226 	.word	0x20000226
 8000a40:	200002ee 	.word	0x200002ee
 8000a44:	200002bc 	.word	0x200002bc
 8000a48:	08007ec2 	.word	0x08007ec2
 8000a4c:	200001dc 	.word	0x200001dc

08000a50 <processCommand>:

void processCommand(char* command) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
    if (command [0] == 'L') {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b4c      	cmp	r3, #76	; 0x4c
 8000a5e:	d13c      	bne.n	8000ada <processCommand+0x8a>
        int ledIndex;
        char ledStateStr[4]; // To store "ON" or "OFF"
        sscanf(command + 2, "%d %s", &ledIndex, ledStateStr);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	1c98      	adds	r0, r3, #2
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	f107 0210 	add.w	r2, r7, #16
 8000a6c:	491f      	ldr	r1, [pc, #124]	; (8000aec <processCommand+0x9c>)
 8000a6e:	f005 fc47 	bl	8006300 <siscanf>

        bool ledState = (strcmp(ledStateStr, "ON") == 0);
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	491e      	ldr	r1, [pc, #120]	; (8000af0 <processCommand+0xa0>)
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fb67 	bl	800014c <strcmp>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	bf0c      	ite	eq
 8000a84:	2301      	moveq	r3, #1
 8000a86:	2300      	movne	r3, #0
 8000a88:	75fb      	strb	r3, [r7, #23]

        if (ledIndex == 1) {
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d10f      	bne.n	8000ab0 <processCommand+0x60>
            led1State = ledState;
 8000a90:	4a18      	ldr	r2, [pc, #96]	; (8000af4 <processCommand+0xa4>)
 8000a92:	7dfb      	ldrb	r3, [r7, #23]
 8000a94:	7013      	strb	r3, [r2, #0]
            if (ledState) {
 8000a96:	7dfb      	ldrb	r3, [r7, #23]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d004      	beq.n	8000aa6 <processCommand+0x56>
                HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4816      	ldr	r0, [pc, #88]	; (8000af8 <processCommand+0xa8>)
 8000aa0:	f003 fd48 	bl	8004534 <HAL_TIM_PWM_Start>
 8000aa4:	e016      	b.n	8000ad4 <processCommand+0x84>
            } else {
                HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4813      	ldr	r0, [pc, #76]	; (8000af8 <processCommand+0xa8>)
 8000aaa:	f003 fde5 	bl	8004678 <HAL_TIM_PWM_Stop>
 8000aae:	e011      	b.n	8000ad4 <processCommand+0x84>
            }
        } else if (ledIndex == 2) {
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d10e      	bne.n	8000ad4 <processCommand+0x84>
            led2State = ledState;
 8000ab6:	4a11      	ldr	r2, [pc, #68]	; (8000afc <processCommand+0xac>)
 8000ab8:	7dfb      	ldrb	r3, [r7, #23]
 8000aba:	7013      	strb	r3, [r2, #0]
            if (ledState) {
 8000abc:	7dfb      	ldrb	r3, [r7, #23]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d004      	beq.n	8000acc <processCommand+0x7c>
                HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <processCommand+0xa8>)
 8000ac6:	f003 fd35 	bl	8004534 <HAL_TIM_PWM_Start>
 8000aca:	e003      	b.n	8000ad4 <processCommand+0x84>
            } else {
                HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000acc:	2104      	movs	r1, #4
 8000ace:	480a      	ldr	r0, [pc, #40]	; (8000af8 <processCommand+0xa8>)
 8000ad0:	f003 fdd2 	bl	8004678 <HAL_TIM_PWM_Stop>
            }
        }

        updateLedStatusOnLCD();
 8000ad4:	f000 f90a 	bl	8000cec <updateLedStatusOnLCD>
    } else {
        // Handle other commands ('a', 'b', 'c', 'd', 'e', 'f')
        handleCommand(command[0]);
    }
}
 8000ad8:	e004      	b.n	8000ae4 <processCommand+0x94>
        handleCommand(command[0]);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fd22 	bl	8000528 <handleCommand>
}
 8000ae4:	bf00      	nop
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	08007e14 	.word	0x08007e14
 8000af0:	08007e1c 	.word	0x08007e1c
 8000af4:	20000310 	.word	0x20000310
 8000af8:	20000108 	.word	0x20000108
 8000afc:	20000311 	.word	0x20000311

08000b00 <processAlarm>:

void processAlarm(char* alarmStr) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	6078      	str	r0, [r7, #4]
    if(alarmCount < MAX_ALARMS) {
 8000b08:	4b34      	ldr	r3, [pc, #208]	; (8000bdc <processAlarm+0xdc>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b13      	cmp	r3, #19
 8000b0e:	d861      	bhi.n	8000bd4 <processAlarm+0xd4>
        int hour, minute, second;
        char note[MAX_NOTE_LENGTH];
        if(sscanf(alarmStr, "S%d:%d:%d:%s", &hour, &minute, &second, note) == 4) {
 8000b10:	f107 0118 	add.w	r1, r7, #24
 8000b14:	f107 021c 	add.w	r2, r7, #28
 8000b18:	f107 0308 	add.w	r3, r7, #8
 8000b1c:	9301      	str	r3, [sp, #4]
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	460b      	mov	r3, r1
 8000b26:	492e      	ldr	r1, [pc, #184]	; (8000be0 <processAlarm+0xe0>)
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f005 fbe9 	bl	8006300 <siscanf>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b04      	cmp	r3, #4
 8000b32:	d14f      	bne.n	8000bd4 <processAlarm+0xd4>
            alarms[alarmCount].hour = hour;
 8000b34:	69f9      	ldr	r1, [r7, #28]
 8000b36:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <processAlarm+0xdc>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	b2c8      	uxtb	r0, r1
 8000b3e:	4929      	ldr	r1, [pc, #164]	; (8000be4 <processAlarm+0xe4>)
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	4413      	add	r3, r2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	701a      	strb	r2, [r3, #0]
            alarms[alarmCount].minute = minute;
 8000b50:	69b9      	ldr	r1, [r7, #24]
 8000b52:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <processAlarm+0xdc>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	b2c8      	uxtb	r0, r1
 8000b5a:	4922      	ldr	r1, [pc, #136]	; (8000be4 <processAlarm+0xe4>)
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	4413      	add	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4413      	add	r3, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	3301      	adds	r3, #1
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	701a      	strb	r2, [r3, #0]
            alarms[alarmCount].second = second;
 8000b6e:	6979      	ldr	r1, [r7, #20]
 8000b70:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <processAlarm+0xdc>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	b2c8      	uxtb	r0, r1
 8000b78:	491a      	ldr	r1, [pc, #104]	; (8000be4 <processAlarm+0xe4>)
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4413      	add	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	440b      	add	r3, r1
 8000b86:	3302      	adds	r3, #2
 8000b88:	4602      	mov	r2, r0
 8000b8a:	701a      	strb	r2, [r3, #0]
            strncpy(alarms[alarmCount].note, note, MAX_NOTE_LENGTH - 1);
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <processAlarm+0xdc>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4613      	mov	r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	4413      	add	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a11      	ldr	r2, [pc, #68]	; (8000be4 <processAlarm+0xe4>)
 8000b9e:	4413      	add	r3, r2
 8000ba0:	3303      	adds	r3, #3
 8000ba2:	f107 0108 	add.w	r1, r7, #8
 8000ba6:	2209      	movs	r2, #9
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f005 fc20 	bl	80063ee <strncpy>
            alarms[alarmCount].note[MAX_NOTE_LENGTH - 1] = '\0';
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <processAlarm+0xdc>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	490b      	ldr	r1, [pc, #44]	; (8000be4 <processAlarm+0xe4>)
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	4413      	add	r3, r2
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	4413      	add	r3, r2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	330c      	adds	r3, #12
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
            alarmCount++;
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <processAlarm+0xdc>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	4b02      	ldr	r3, [pc, #8]	; (8000bdc <processAlarm+0xdc>)
 8000bd2:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8000bd4:	bf00      	nop
 8000bd6:	3720      	adds	r7, #32
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000418 	.word	0x20000418
 8000be0:	08007e20 	.word	0x08007e20
 8000be4:	20000314 	.word	0x20000314

08000be8 <checkAlarms>:

void checkAlarms(void) {
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
    for(int i = 0; i < alarmCount; i++) {
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	e066      	b.n	8000cc2 <checkAlarms+0xda>
        if(alarms[i].hour == currentHour &&
 8000bf4:	4938      	ldr	r1, [pc, #224]	; (8000cd8 <checkAlarms+0xf0>)
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	4413      	add	r3, r2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	4413      	add	r3, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	781a      	ldrb	r2, [r3, #0]
 8000c06:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <checkAlarms+0xf4>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d156      	bne.n	8000cbc <checkAlarms+0xd4>
           alarms[i].minute == currentMinute &&
 8000c0e:	4932      	ldr	r1, [pc, #200]	; (8000cd8 <checkAlarms+0xf0>)
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	4613      	mov	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4413      	add	r3, r2
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	4413      	add	r3, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	3301      	adds	r3, #1
 8000c20:	781a      	ldrb	r2, [r3, #0]
 8000c22:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <checkAlarms+0xf8>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
        if(alarms[i].hour == currentHour &&
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d148      	bne.n	8000cbc <checkAlarms+0xd4>
           alarms[i].second == currentSecond) {
 8000c2a:	492b      	ldr	r1, [pc, #172]	; (8000cd8 <checkAlarms+0xf0>)
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	4413      	add	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	4413      	add	r3, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	781a      	ldrb	r2, [r3, #0]
 8000c3e:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <checkAlarms+0xfc>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
           alarms[i].minute == currentMinute &&
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d13a      	bne.n	8000cbc <checkAlarms+0xd4>
            processCommand(alarms[i].note);
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4413      	add	r3, r2
 8000c52:	4a21      	ldr	r2, [pc, #132]	; (8000cd8 <checkAlarms+0xf0>)
 8000c54:	4413      	add	r3, r2
 8000c56:	3303      	adds	r3, #3
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fef9 	bl	8000a50 <processCommand>

            // Xóa báo thức đã thực hiện
            for(int j = i; j < alarmCount - 1; j++) {
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	e01c      	b.n	8000c9e <checkAlarms+0xb6>
                alarms[j] = alarms[j + 1];
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	481b      	ldr	r0, [pc, #108]	; (8000cd8 <checkAlarms+0xf0>)
 8000c6a:	6839      	ldr	r1, [r7, #0]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	440b      	add	r3, r1
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	440b      	add	r3, r1
 8000c76:	4418      	add	r0, r3
 8000c78:	4917      	ldr	r1, [pc, #92]	; (8000cd8 <checkAlarms+0xf0>)
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4413      	add	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	18ca      	adds	r2, r1, r3
 8000c86:	4603      	mov	r3, r0
 8000c88:	6814      	ldr	r4, [r2, #0]
 8000c8a:	6850      	ldr	r0, [r2, #4]
 8000c8c:	6891      	ldr	r1, [r2, #8]
 8000c8e:	601c      	str	r4, [r3, #0]
 8000c90:	6058      	str	r0, [r3, #4]
 8000c92:	6099      	str	r1, [r3, #8]
 8000c94:	7b12      	ldrb	r2, [r2, #12]
 8000c96:	731a      	strb	r2, [r3, #12]
            for(int j = i; j < alarmCount - 1; j++) {
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <checkAlarms+0x100>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	dbdc      	blt.n	8000c64 <checkAlarms+0x7c>
            }
            alarmCount--;
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <checkAlarms+0x100>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <checkAlarms+0x100>)
 8000cb4:	701a      	strb	r2, [r3, #0]
            i--; // Kiểm tra lại vị trí hiện tại
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	607b      	str	r3, [r7, #4]
    for(int i = 0; i < alarmCount; i++) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <checkAlarms+0x100>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	db92      	blt.n	8000bf4 <checkAlarms+0xc>
        }
    }
}
 8000cce:	bf00      	nop
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd90      	pop	{r4, r7, pc}
 8000cd8:	20000314 	.word	0x20000314
 8000cdc:	20000419 	.word	0x20000419
 8000ce0:	2000041a 	.word	0x2000041a
 8000ce4:	2000041b 	.word	0x2000041b
 8000ce8:	20000418 	.word	0x20000418

08000cec <updateLedStatusOnLCD>:

void updateLedStatusOnLCD() {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
    // Cập nhật trạng thái LED
    lcd_put_cur(0, 11);
 8000cf0:	210b      	movs	r1, #11
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff fb00 	bl	80002f8 <lcd_put_cur>
    lcd_send_string(led1State ? "LED1: ON " : "LED1: OFF");
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <updateLedStatusOnLCD+0x78>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <updateLedStatusOnLCD+0x18>
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <updateLedStatusOnLCD+0x7c>)
 8000d02:	e000      	b.n	8000d06 <updateLedStatusOnLCD+0x1a>
 8000d04:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <updateLedStatusOnLCD+0x80>)
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fad7 	bl	80002ba <lcd_send_string>
    lcd_put_cur(1, 11);
 8000d0c:	210b      	movs	r1, #11
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f7ff faf2 	bl	80002f8 <lcd_put_cur>
    lcd_send_string(led2State ? "LED2: ON " : "LED2: OFF");
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <updateLedStatusOnLCD+0x84>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <updateLedStatusOnLCD+0x34>
 8000d1c:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <updateLedStatusOnLCD+0x88>)
 8000d1e:	e000      	b.n	8000d22 <updateLedStatusOnLCD+0x36>
 8000d20:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <updateLedStatusOnLCD+0x8c>)
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fac9 	bl	80002ba <lcd_send_string>

    // Cập nhật trạng thái nút nhấn
    lcd_put_cur(2, 11);
 8000d28:	210b      	movs	r1, #11
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	f7ff fae4 	bl	80002f8 <lcd_put_cur>
    lcd_send_string(button1State ? "BTN1: ON " : "BTN1: OFF");
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <updateLedStatusOnLCD+0x90>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <updateLedStatusOnLCD+0x50>
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <updateLedStatusOnLCD+0x94>)
 8000d3a:	e000      	b.n	8000d3e <updateLedStatusOnLCD+0x52>
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <updateLedStatusOnLCD+0x98>)
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fabb 	bl	80002ba <lcd_send_string>
    lcd_put_cur(3, 11);
 8000d44:	210b      	movs	r1, #11
 8000d46:	2003      	movs	r0, #3
 8000d48:	f7ff fad6 	bl	80002f8 <lcd_put_cur>
    lcd_send_string(button2State ? "BTN2: ON " : "BTN2: OFF");
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <updateLedStatusOnLCD+0x9c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <updateLedStatusOnLCD+0x6c>
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <updateLedStatusOnLCD+0xa0>)
 8000d56:	e000      	b.n	8000d5a <updateLedStatusOnLCD+0x6e>
 8000d58:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <updateLedStatusOnLCD+0xa4>)
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff faad 	bl	80002ba <lcd_send_string>
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000310 	.word	0x20000310
 8000d68:	08007e30 	.word	0x08007e30
 8000d6c:	08007de4 	.word	0x08007de4
 8000d70:	20000311 	.word	0x20000311
 8000d74:	08007e3c 	.word	0x08007e3c
 8000d78:	08007df0 	.word	0x08007df0
 8000d7c:	20000224 	.word	0x20000224
 8000d80:	08007e48 	.word	0x08007e48
 8000d84:	08007e54 	.word	0x08007e54
 8000d88:	20000225 	.word	0x20000225
 8000d8c:	08007e60 	.word	0x08007e60
 8000d90:	08007e6c 	.word	0x08007e6c

08000d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9a:	f000 fe7d 	bl	8001a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9e:	f000 f89d 	bl	8000edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da2:	f000 fae5 	bl	8001370 <MX_GPIO_Init>
  MX_DMA_Init();
 8000da6:	f000 fac5 	bl	8001334 <MX_DMA_Init>
  MX_ADC1_Init();
 8000daa:	f000 f8f3 	bl	8000f94 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000dae:	f000 f95d 	bl	800106c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000db2:	f000 fa95 	bl	80012e0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000db6:	f000 fa1d 	bl	80011f4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000dba:	f000 f929 	bl	8001010 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Initialize LCD
  lcd_init();
 8000dbe:	f7ff fa4b 	bl	8000258 <lcd_init>
  // Initialize LCD with delay
     HAL_Delay(200);  // Wait for system to stabilize
 8000dc2:	20c8      	movs	r0, #200	; 0xc8
 8000dc4:	f000 feca 	bl	8001b5c <HAL_Delay>
     initializeLCD();
 8000dc8:	f7ff fce2 	bl	8000790 <initializeLCD>

//  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)led_data, LED_COUNT * 24);
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_buffer[index1], 1);
 8000dcc:	4b37      	ldr	r3, [pc, #220]	; (8000eac <main+0x118>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a37      	ldr	r2, [pc, #220]	; (8000eb0 <main+0x11c>)
 8000dd2:	4413      	add	r3, r2
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4836      	ldr	r0, [pc, #216]	; (8000eb4 <main+0x120>)
 8000dda:	f004 fbd6 	bl	800558a <HAL_UART_Receive_IT>
//  SendNeoPixelColor(255, 0, 255);
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
//  HAL_ADC_Start_IT(&hadc1);

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dde:	2100      	movs	r1, #0
 8000de0:	4835      	ldr	r0, [pc, #212]	; (8000eb8 <main+0x124>)
 8000de2:	f003 fba7 	bl	8004534 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000de6:	2104      	movs	r1, #4
 8000de8:	4833      	ldr	r0, [pc, #204]	; (8000eb8 <main+0x124>)
 8000dea:	f003 fba3 	bl	8004534 <HAL_TIM_PWM_Start>

  // Khởi tạo trạng thái ban đầu
     led1State = false;
 8000dee:	4b33      	ldr	r3, [pc, #204]	; (8000ebc <main+0x128>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
     led2State = false;
 8000df4:	4b32      	ldr	r3, [pc, #200]	; (8000ec0 <main+0x12c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
     button1State = false;
 8000dfa:	4b32      	ldr	r3, [pc, #200]	; (8000ec4 <main+0x130>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
     button2State = false;
 8000e00:	4b31      	ldr	r3, [pc, #196]	; (8000ec8 <main+0x134>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
     button1Flag = 0;
 8000e06:	4b31      	ldr	r3, [pc, #196]	; (8000ecc <main+0x138>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
     button2Flag = 0;
 8000e0c:	4b30      	ldr	r3, [pc, #192]	; (8000ed0 <main+0x13c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  checkAlarms();
 8000e12:	f7ff fee9 	bl	8000be8 <checkAlarms>
	  if (adcActive) {
 8000e16:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <main+0x140>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d042      	beq.n	8000ea4 <main+0x110>
	      //  ? ?c giá trị từ PA6 (ADC1 Channel 6)
	      ADC_ChannelConfTypeDef sConfig = {0};
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
	      sConfig.Channel = ADC_CHANNEL_6;  // PA6 là Channel 6
 8000e28:	2306      	movs	r3, #6
 8000e2a:	607b      	str	r3, [r7, #4]
	      sConfig.Rank = 1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
	      HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	4619      	mov	r1, r3
 8000e34:	4828      	ldr	r0, [pc, #160]	; (8000ed8 <main+0x144>)
 8000e36:	f001 fa4b 	bl	80022d0 <HAL_ADC_ConfigChannel>
	      HAL_ADC_Start(&hadc1);
 8000e3a:	4827      	ldr	r0, [pc, #156]	; (8000ed8 <main+0x144>)
 8000e3c:	f000 ff8a 	bl	8001d54 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295
 8000e44:	4824      	ldr	r0, [pc, #144]	; (8000ed8 <main+0x144>)
 8000e46:	f001 f85f 	bl	8001f08 <HAL_ADC_PollForConversion>
	      uint32_t adcValue = HAL_ADC_GetValue(&hadc1);  // Giá trị cho TIM1 CH1
 8000e4a:	4823      	ldr	r0, [pc, #140]	; (8000ed8 <main+0x144>)
 8000e4c:	f001 f962 	bl	8002114 <HAL_ADC_GetValue>
 8000e50:	61f8      	str	r0, [r7, #28]
	      HAL_ADC_Stop(&hadc1);
 8000e52:	4821      	ldr	r0, [pc, #132]	; (8000ed8 <main+0x144>)
 8000e54:	f001 f82c 	bl	8001eb0 <HAL_ADC_Stop>

	      //  ? ?c giá trị từ PA7 (ADC1 Channel 7)
	      sConfig.Channel = ADC_CHANNEL_7;  // PA7 là Channel 7
 8000e58:	2307      	movs	r3, #7
 8000e5a:	607b      	str	r3, [r7, #4]
	      HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	4619      	mov	r1, r3
 8000e60:	481d      	ldr	r0, [pc, #116]	; (8000ed8 <main+0x144>)
 8000e62:	f001 fa35 	bl	80022d0 <HAL_ADC_ConfigChannel>
	      HAL_ADC_Start(&hadc1);
 8000e66:	481c      	ldr	r0, [pc, #112]	; (8000ed8 <main+0x144>)
 8000e68:	f000 ff74 	bl	8001d54 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	4819      	ldr	r0, [pc, #100]	; (8000ed8 <main+0x144>)
 8000e72:	f001 f849 	bl	8001f08 <HAL_ADC_PollForConversion>
	      uint32_t adcValue2 = HAL_ADC_GetValue(&hadc1); // Giá trị cho TIM1 CH2
 8000e76:	4818      	ldr	r0, [pc, #96]	; (8000ed8 <main+0x144>)
 8000e78:	f001 f94c 	bl	8002114 <HAL_ADC_GetValue>
 8000e7c:	61b8      	str	r0, [r7, #24]
	      HAL_ADC_Stop(&hadc1);
 8000e7e:	4816      	ldr	r0, [pc, #88]	; (8000ed8 <main+0x144>)
 8000e80:	f001 f816 	bl	8001eb0 <HAL_ADC_Stop>

	      //  ?nh xạ giá trị ADC sang PWM
	      uint32_t pwmValue = mapValue(adcValue);
 8000e84:	69f8      	ldr	r0, [r7, #28]
 8000e86:	f7ff fa87 	bl	8000398 <mapValue>
 8000e8a:	6178      	str	r0, [r7, #20]
	      uint32_t pwmValue2 =mapValue2(adcValue2);
 8000e8c:	69b8      	ldr	r0, [r7, #24]
 8000e8e:	f7ff fa97 	bl	80003c0 <mapValue2>
 8000e92:	6138      	str	r0, [r7, #16]

	      //  ?ặt giá trị PWM cho TIM1 Channel 1 và Channel 2
	      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwmValue);
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <main+0x124>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	635a      	str	r2, [r3, #52]	; 0x34
	      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwmValue2);
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <main+0x124>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	639a      	str	r2, [r3, #56]	; 0x38
	  }
	  HAL_Delay(100);
 8000ea4:	2064      	movs	r0, #100	; 0x64
 8000ea6:	f000 fe59 	bl	8001b5c <HAL_Delay>
	  checkAlarms();
 8000eaa:	e7b2      	b.n	8000e12 <main+0x7e>
 8000eac:	200002a8 	.word	0x200002a8
 8000eb0:	20000228 	.word	0x20000228
 8000eb4:	200001dc 	.word	0x200001dc
 8000eb8:	20000108 	.word	0x20000108
 8000ebc:	20000310 	.word	0x20000310
 8000ec0:	20000311 	.word	0x20000311
 8000ec4:	20000224 	.word	0x20000224
 8000ec8:	20000225 	.word	0x20000225
 8000ecc:	200002ac 	.word	0x200002ac
 8000ed0:	200002ad 	.word	0x200002ad
 8000ed4:	200002b8 	.word	0x200002b8
 8000ed8:	20000084 	.word	0x20000084

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b094      	sub	sp, #80	; 0x50
 8000ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee6:	2228      	movs	r2, #40	; 0x28
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f005 fa77 	bl	80063de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f28:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f32:	4618      	mov	r0, r3
 8000f34:	f002 fcda 	bl	80038ec <HAL_RCC_OscConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f3e:	f000 fa8d 	bl	800145c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f42:	230f      	movs	r3, #15
 8000f44:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f52:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 ff46 	bl	8003df0 <HAL_RCC_ClockConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f6a:	f000 fa77 	bl	800145c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f76:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 f8c6 	bl	800410c <HAL_RCCEx_PeriphCLKConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f86:	f000 fa69 	bl	800145c <Error_Handler>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3750      	adds	r7, #80	; 0x50
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_ADC1_Init+0x74>)
 8000fa6:	4a19      	ldr	r2, [pc, #100]	; (800100c <MX_ADC1_Init+0x78>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000faa:	4b17      	ldr	r3, [pc, #92]	; (8001008 <MX_ADC1_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fb0:	4b15      	ldr	r3, [pc, #84]	; (8001008 <MX_ADC1_Init+0x74>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_ADC1_Init+0x74>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <MX_ADC1_Init+0x74>)
 8000fbe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000fc2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <MX_ADC1_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_ADC1_Init+0x74>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <MX_ADC1_Init+0x74>)
 8000fd2:	f000 fde7 	bl	8001ba4 <HAL_ADC_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000fdc:	f000 fa3e 	bl	800145c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fe0:	2306      	movs	r3, #6
 8000fe2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000fe8:	2307      	movs	r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_ADC1_Init+0x74>)
 8000ff2:	f001 f96d 	bl	80022d0 <HAL_ADC_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ffc:	f000 fa2e 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000084 	.word	0x20000084
 800100c:	40012400 	.word	0x40012400

08001010 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <MX_I2C1_Init+0x50>)
 8001016:	4a13      	ldr	r2, [pc, #76]	; (8001064 <MX_I2C1_Init+0x54>)
 8001018:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_I2C1_Init+0x50>)
 800101c:	4a12      	ldr	r2, [pc, #72]	; (8001068 <MX_I2C1_Init+0x58>)
 800101e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <MX_I2C1_Init+0x50>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_I2C1_Init+0x50>)
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_I2C1_Init+0x50>)
 800102e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001032:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <MX_I2C1_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_I2C1_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <MX_I2C1_Init+0x50>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_I2C1_Init+0x50>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800104c:	4804      	ldr	r0, [pc, #16]	; (8001060 <MX_I2C1_Init+0x50>)
 800104e:	f001 ffb1 	bl	8002fb4 <HAL_I2C_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001058:	f000 fa00 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200000b4 	.word	0x200000b4
 8001064:	40005400 	.word	0x40005400
 8001068:	000186a0 	.word	0x000186a0

0800106c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b096      	sub	sp, #88	; 0x58
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2220      	movs	r2, #32
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f005 f99a 	bl	80063de <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010aa:	4b50      	ldr	r3, [pc, #320]	; (80011ec <MX_TIM1_Init+0x180>)
 80010ac:	4a50      	ldr	r2, [pc, #320]	; (80011f0 <MX_TIM1_Init+0x184>)
 80010ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 80010b0:	4b4e      	ldr	r3, [pc, #312]	; (80011ec <MX_TIM1_Init+0x180>)
 80010b2:	223f      	movs	r2, #63	; 0x3f
 80010b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b6:	4b4d      	ldr	r3, [pc, #308]	; (80011ec <MX_TIM1_Init+0x180>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80010bc:	4b4b      	ldr	r3, [pc, #300]	; (80011ec <MX_TIM1_Init+0x180>)
 80010be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c4:	4b49      	ldr	r3, [pc, #292]	; (80011ec <MX_TIM1_Init+0x180>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010ca:	4b48      	ldr	r3, [pc, #288]	; (80011ec <MX_TIM1_Init+0x180>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d0:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MX_TIM1_Init+0x180>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010d6:	4845      	ldr	r0, [pc, #276]	; (80011ec <MX_TIM1_Init+0x180>)
 80010d8:	f003 f984 	bl	80043e4 <HAL_TIM_Base_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80010e2:	f000 f9bb 	bl	800145c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010f0:	4619      	mov	r1, r3
 80010f2:	483e      	ldr	r0, [pc, #248]	; (80011ec <MX_TIM1_Init+0x180>)
 80010f4:	f003 fd9c 	bl	8004c30 <HAL_TIM_ConfigClockSource>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80010fe:	f000 f9ad 	bl	800145c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001102:	483a      	ldr	r0, [pc, #232]	; (80011ec <MX_TIM1_Init+0x180>)
 8001104:	f003 f9bd 	bl	8004482 <HAL_TIM_PWM_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800110e:	f000 f9a5 	bl	800145c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800111a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800111e:	4619      	mov	r1, r3
 8001120:	4832      	ldr	r0, [pc, #200]	; (80011ec <MX_TIM1_Init+0x180>)
 8001122:	f004 f921 	bl	8005368 <HAL_TIMEx_MasterConfigSynchronization>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800112c:	f000 f996 	bl	800145c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001130:	2360      	movs	r3, #96	; 0x60
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800113c:	2300      	movs	r3, #0
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001148:	2300      	movs	r3, #0
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001150:	2200      	movs	r2, #0
 8001152:	4619      	mov	r1, r3
 8001154:	4825      	ldr	r0, [pc, #148]	; (80011ec <MX_TIM1_Init+0x180>)
 8001156:	f003 fca9 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001160:	f000 f97c 	bl	800145c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001168:	2204      	movs	r2, #4
 800116a:	4619      	mov	r1, r3
 800116c:	481f      	ldr	r0, [pc, #124]	; (80011ec <MX_TIM1_Init+0x180>)
 800116e:	f003 fc9d 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001178:	f000 f970 	bl	800145c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800117c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001180:	2208      	movs	r2, #8
 8001182:	4619      	mov	r1, r3
 8001184:	4819      	ldr	r0, [pc, #100]	; (80011ec <MX_TIM1_Init+0x180>)
 8001186:	f003 fc91 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001190:	f000 f964 	bl	800145c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001198:	220c      	movs	r2, #12
 800119a:	4619      	mov	r1, r3
 800119c:	4813      	ldr	r0, [pc, #76]	; (80011ec <MX_TIM1_Init+0x180>)
 800119e:	f003 fc85 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80011a8:	f000 f958 	bl	800145c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	4619      	mov	r1, r3
 80011ce:	4807      	ldr	r0, [pc, #28]	; (80011ec <MX_TIM1_Init+0x180>)
 80011d0:	f004 f928 	bl	8005424 <HAL_TIMEx_ConfigBreakDeadTime>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80011da:	f000 f93f 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011de:	4803      	ldr	r0, [pc, #12]	; (80011ec <MX_TIM1_Init+0x180>)
 80011e0:	f000 fa62 	bl	80016a8 <HAL_TIM_MspPostInit>

}
 80011e4:	bf00      	nop
 80011e6:	3758      	adds	r7, #88	; 0x58
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000108 	.word	0x20000108
 80011f0:	40012c00 	.word	0x40012c00

080011f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	; 0x38
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001208:	f107 0320 	add.w	r3, r7, #32
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
 8001220:	615a      	str	r2, [r3, #20]
 8001222:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001224:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <MX_TIM3_Init+0xe4>)
 8001226:	4a2d      	ldr	r2, [pc, #180]	; (80012dc <MX_TIM3_Init+0xe8>)
 8001228:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 30-1;
 800122a:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <MX_TIM3_Init+0xe4>)
 800122c:	221d      	movs	r2, #29
 800122e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <MX_TIM3_Init+0xe4>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <MX_TIM3_Init+0xe4>)
 8001238:	2263      	movs	r2, #99	; 0x63
 800123a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <MX_TIM3_Init+0xe4>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <MX_TIM3_Init+0xe4>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001248:	4823      	ldr	r0, [pc, #140]	; (80012d8 <MX_TIM3_Init+0xe4>)
 800124a:	f003 f8cb 	bl	80043e4 <HAL_TIM_Base_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001254:	f000 f902 	bl	800145c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800125e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001262:	4619      	mov	r1, r3
 8001264:	481c      	ldr	r0, [pc, #112]	; (80012d8 <MX_TIM3_Init+0xe4>)
 8001266:	f003 fce3 	bl	8004c30 <HAL_TIM_ConfigClockSource>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001270:	f000 f8f4 	bl	800145c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001274:	4818      	ldr	r0, [pc, #96]	; (80012d8 <MX_TIM3_Init+0xe4>)
 8001276:	f003 f904 	bl	8004482 <HAL_TIM_PWM_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001280:	f000 f8ec 	bl	800145c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800128c:	f107 0320 	add.w	r3, r7, #32
 8001290:	4619      	mov	r1, r3
 8001292:	4811      	ldr	r0, [pc, #68]	; (80012d8 <MX_TIM3_Init+0xe4>)
 8001294:	f004 f868 	bl	8005368 <HAL_TIMEx_MasterConfigSynchronization>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800129e:	f000 f8dd 	bl	800145c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a2:	2360      	movs	r3, #96	; 0x60
 80012a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80012a6:	2332      	movs	r3, #50	; 0x32
 80012a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2200      	movs	r2, #0
 80012b6:	4619      	mov	r1, r3
 80012b8:	4807      	ldr	r0, [pc, #28]	; (80012d8 <MX_TIM3_Init+0xe4>)
 80012ba:	f003 fbf7 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80012c4:	f000 f8ca 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012c8:	4803      	ldr	r0, [pc, #12]	; (80012d8 <MX_TIM3_Init+0xe4>)
 80012ca:	f000 f9ed 	bl	80016a8 <HAL_TIM_MspPostInit>

}
 80012ce:	bf00      	nop
 80012d0:	3738      	adds	r7, #56	; 0x38
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000150 	.word	0x20000150
 80012dc:	40000400 	.word	0x40000400

080012e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_USART2_UART_Init+0x4c>)
 80012e6:	4a12      	ldr	r2, [pc, #72]	; (8001330 <MX_USART2_UART_Init+0x50>)
 80012e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <MX_USART2_UART_Init+0x4c>)
 80012ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_USART2_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_USART2_UART_Init+0x4c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_USART2_UART_Init+0x4c>)
 8001306:	220c      	movs	r2, #12
 8001308:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <MX_USART2_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_USART2_UART_Init+0x4c>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_USART2_UART_Init+0x4c>)
 8001318:	f004 f8e7 	bl	80054ea <HAL_UART_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001322:	f000 f89b 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200001dc 	.word	0x200001dc
 8001330:	40004400 	.word	0x40004400

08001334 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_DMA_Init+0x38>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	4a0b      	ldr	r2, [pc, #44]	; (800136c <MX_DMA_Init+0x38>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6153      	str	r3, [r2, #20]
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_DMA_Init+0x38>)
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	2010      	movs	r0, #16
 8001358:	f001 fa2d 	bl	80027b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800135c:	2010      	movs	r0, #16
 800135e:	f001 fa46 	bl	80027ee <HAL_NVIC_EnableIRQ>

}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000

08001370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001384:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <MX_GPIO_Init+0xc4>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a2a      	ldr	r2, [pc, #168]	; (8001434 <MX_GPIO_Init+0xc4>)
 800138a:	f043 0320 	orr.w	r3, r3, #32
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b28      	ldr	r3, [pc, #160]	; (8001434 <MX_GPIO_Init+0xc4>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0320 	and.w	r3, r3, #32
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	4b25      	ldr	r3, [pc, #148]	; (8001434 <MX_GPIO_Init+0xc4>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a24      	ldr	r2, [pc, #144]	; (8001434 <MX_GPIO_Init+0xc4>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <MX_GPIO_Init+0xc4>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <MX_GPIO_Init+0xc4>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a1e      	ldr	r2, [pc, #120]	; (8001434 <MX_GPIO_Init+0xc4>)
 80013ba:	f043 0308 	orr.w	r3, r3, #8
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <MX_GPIO_Init+0xc4>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2112      	movs	r1, #18
 80013d0:	4819      	ldr	r0, [pc, #100]	; (8001438 <MX_GPIO_Init+0xc8>)
 80013d2:	f001 fdbf 	bl	8002f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80013d6:	2321      	movs	r3, #33	; 0x21
 80013d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013da:	4b18      	ldr	r3, [pc, #96]	; (800143c <MX_GPIO_Init+0xcc>)
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	4619      	mov	r1, r3
 80013e8:	4813      	ldr	r0, [pc, #76]	; (8001438 <MX_GPIO_Init+0xc8>)
 80013ea:	f001 fc2f 	bl	8002c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80013ee:	2312      	movs	r3, #18
 80013f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4619      	mov	r1, r3
 8001404:	480c      	ldr	r0, [pc, #48]	; (8001438 <MX_GPIO_Init+0xc8>)
 8001406:	f001 fc21 	bl	8002c4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2102      	movs	r1, #2
 800140e:	2006      	movs	r0, #6
 8001410:	f001 f9d1 	bl	80027b6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001414:	2006      	movs	r0, #6
 8001416:	f001 f9ea 	bl	80027ee <HAL_NVIC_EnableIRQ>

        /* Kích hoạt và cấu hình ngắt cho dòng EXTI1 */
        HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2102      	movs	r1, #2
 800141e:	2017      	movs	r0, #23
 8001420:	f001 f9c9 	bl	80027b6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001424:	2017      	movs	r0, #23
 8001426:	f001 f9e2 	bl	80027ee <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 800142a:	bf00      	nop
 800142c:	3720      	adds	r7, #32
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000
 8001438:	40010800 	.word	0x40010800
 800143c:	10110000 	.word	0x10110000

08001440 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI0_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001444:	2001      	movs	r0, #1
 8001446:	f001 fd9d 	bl	8002f84 <HAL_GPIO_EXTI_IRQHandler>
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}

0800144e <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001452:	2020      	movs	r0, #32
 8001454:	f001 fd96 	bl	8002f84 <HAL_GPIO_EXTI_IRQHandler>
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}

0800145c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001460:	b672      	cpsid	i
}
 8001462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001464:	e7fe      	b.n	8001464 <Error_Handler+0x8>
	...

08001468 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_MspInit+0x5c>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <HAL_MspInit+0x5c>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6193      	str	r3, [r2, #24]
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_MspInit+0x5c>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <HAL_MspInit+0x5c>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <HAL_MspInit+0x5c>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001490:	61d3      	str	r3, [r2, #28]
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <HAL_MspInit+0x5c>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <HAL_MspInit+0x60>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <HAL_MspInit+0x60>)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ba:	bf00      	nop
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40010000 	.word	0x40010000

080014cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a18      	ldr	r2, [pc, #96]	; (8001548 <HAL_ADC_MspInit+0x7c>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d129      	bne.n	8001540 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_ADC_MspInit+0x80>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a16      	ldr	r2, [pc, #88]	; (800154c <HAL_ADC_MspInit+0x80>)
 80014f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <HAL_ADC_MspInit+0x80>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <HAL_ADC_MspInit+0x80>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a10      	ldr	r2, [pc, #64]	; (800154c <HAL_ADC_MspInit+0x80>)
 800150a:	f043 0304 	orr.w	r3, r3, #4
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b0e      	ldr	r3, [pc, #56]	; (800154c <HAL_ADC_MspInit+0x80>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800151c:	23c0      	movs	r3, #192	; 0xc0
 800151e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001520:	2303      	movs	r3, #3
 8001522:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	4619      	mov	r1, r3
 800152a:	4809      	ldr	r0, [pc, #36]	; (8001550 <HAL_ADC_MspInit+0x84>)
 800152c:	f001 fb8e 	bl	8002c4c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001530:	2200      	movs	r2, #0
 8001532:	2100      	movs	r1, #0
 8001534:	2012      	movs	r0, #18
 8001536:	f001 f93e 	bl	80027b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800153a:	2012      	movs	r0, #18
 800153c:	f001 f957 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001540:	bf00      	nop
 8001542:	3720      	adds	r7, #32
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40012400 	.word	0x40012400
 800154c:	40021000 	.word	0x40021000
 8001550:	40010800 	.word	0x40010800

08001554 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <HAL_I2C_MspInit+0x70>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d123      	bne.n	80015bc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <HAL_I2C_MspInit+0x74>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <HAL_I2C_MspInit+0x74>)
 800157a:	f043 0308 	orr.w	r3, r3, #8
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_I2C_MspInit+0x74>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800158c:	23c0      	movs	r3, #192	; 0xc0
 800158e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001590:	2312      	movs	r3, #18
 8001592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	4619      	mov	r1, r3
 800159e:	480b      	ldr	r0, [pc, #44]	; (80015cc <HAL_I2C_MspInit+0x78>)
 80015a0:	f001 fb54 	bl	8002c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <HAL_I2C_MspInit+0x74>)
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <HAL_I2C_MspInit+0x74>)
 80015aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ae:	61d3      	str	r3, [r2, #28]
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_I2C_MspInit+0x74>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015bc:	bf00      	nop
 80015be:	3720      	adds	r7, #32
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40005400 	.word	0x40005400
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40010c00 	.word	0x40010c00

080015d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a2d      	ldr	r2, [pc, #180]	; (8001694 <HAL_TIM_Base_MspInit+0xc4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d10c      	bne.n	80015fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015e2:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <HAL_TIM_Base_MspInit+0xc8>)
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	4a2c      	ldr	r2, [pc, #176]	; (8001698 <HAL_TIM_Base_MspInit+0xc8>)
 80015e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015ec:	6193      	str	r3, [r2, #24]
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <HAL_TIM_Base_MspInit+0xc8>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015fa:	e046      	b.n	800168a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a26      	ldr	r2, [pc, #152]	; (800169c <HAL_TIM_Base_MspInit+0xcc>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d141      	bne.n	800168a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001606:	4b24      	ldr	r3, [pc, #144]	; (8001698 <HAL_TIM_Base_MspInit+0xc8>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	4a23      	ldr	r2, [pc, #140]	; (8001698 <HAL_TIM_Base_MspInit+0xc8>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	61d3      	str	r3, [r2, #28]
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <HAL_TIM_Base_MspInit+0xc8>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_TIM_Base_MspInit+0xd0>)
 8001620:	4a20      	ldr	r2, [pc, #128]	; (80016a4 <HAL_TIM_Base_MspInit+0xd4>)
 8001622:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <HAL_TIM_Base_MspInit+0xd0>)
 8001626:	2210      	movs	r2, #16
 8001628:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <HAL_TIM_Base_MspInit+0xd0>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_TIM_Base_MspInit+0xd0>)
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <HAL_TIM_Base_MspInit+0xd0>)
 8001638:	f44f 7280 	mov.w	r2, #256	; 0x100
 800163c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <HAL_TIM_Base_MspInit+0xd0>)
 8001640:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001644:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_TIM_Base_MspInit+0xd0>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <HAL_TIM_Base_MspInit+0xd0>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001652:	4813      	ldr	r0, [pc, #76]	; (80016a0 <HAL_TIM_Base_MspInit+0xd0>)
 8001654:	f001 f8e6 	bl	8002824 <HAL_DMA_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 800165e:	f7ff fefd 	bl	800145c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <HAL_TIM_Base_MspInit+0xd0>)
 8001666:	625a      	str	r2, [r3, #36]	; 0x24
 8001668:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <HAL_TIM_Base_MspInit+0xd0>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <HAL_TIM_Base_MspInit+0xd0>)
 8001672:	639a      	str	r2, [r3, #56]	; 0x38
 8001674:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <HAL_TIM_Base_MspInit+0xd0>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	201d      	movs	r0, #29
 8001680:	f001 f899 	bl	80027b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001684:	201d      	movs	r0, #29
 8001686:	f001 f8b2 	bl	80027ee <HAL_NVIC_EnableIRQ>
}
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40012c00 	.word	0x40012c00
 8001698:	40021000 	.word	0x40021000
 800169c:	40000400 	.word	0x40000400
 80016a0:	20000198 	.word	0x20000198
 80016a4:	4002006c 	.word	0x4002006c

080016a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a28      	ldr	r2, [pc, #160]	; (8001764 <HAL_TIM_MspPostInit+0xbc>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d119      	bne.n	80016fc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_TIM_MspPostInit+0xc0>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a26      	ldr	r2, [pc, #152]	; (8001768 <HAL_TIM_MspPostInit+0xc0>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b24      	ldr	r3, [pc, #144]	; (8001768 <HAL_TIM_MspPostInit+0xc0>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80016e0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80016e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2302      	movs	r3, #2
 80016ec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	481d      	ldr	r0, [pc, #116]	; (800176c <HAL_TIM_MspPostInit+0xc4>)
 80016f6:	f001 faa9 	bl	8002c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016fa:	e02e      	b.n	800175a <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM3)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a1b      	ldr	r2, [pc, #108]	; (8001770 <HAL_TIM_MspPostInit+0xc8>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d129      	bne.n	800175a <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_TIM_MspPostInit+0xc0>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	4a17      	ldr	r2, [pc, #92]	; (8001768 <HAL_TIM_MspPostInit+0xc0>)
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	6193      	str	r3, [r2, #24]
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_TIM_MspPostInit+0xc0>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800171e:	2310      	movs	r3, #16
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2302      	movs	r3, #2
 8001728:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4810      	ldr	r0, [pc, #64]	; (8001774 <HAL_TIM_MspPostInit+0xcc>)
 8001732:	f001 fa8b 	bl	8002c4c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_TIM_MspPostInit+0xd0>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
 8001754:	4a08      	ldr	r2, [pc, #32]	; (8001778 <HAL_TIM_MspPostInit+0xd0>)
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	6053      	str	r3, [r2, #4]
}
 800175a:	bf00      	nop
 800175c:	3728      	adds	r7, #40	; 0x28
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40012c00 	.word	0x40012c00
 8001768:	40021000 	.word	0x40021000
 800176c:	40010800 	.word	0x40010800
 8001770:	40000400 	.word	0x40000400
 8001774:	40010c00 	.word	0x40010c00
 8001778:	40010000 	.word	0x40010000

0800177c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <HAL_UART_MspInit+0x98>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d137      	bne.n	800180c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800179c:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <HAL_UART_MspInit+0x9c>)
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <HAL_UART_MspInit+0x9c>)
 80017a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a6:	61d3      	str	r3, [r2, #28]
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <HAL_UART_MspInit+0x9c>)
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <HAL_UART_MspInit+0x9c>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a17      	ldr	r2, [pc, #92]	; (8001818 <HAL_UART_MspInit+0x9c>)
 80017ba:	f043 0304 	orr.w	r3, r3, #4
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_UART_MspInit+0x9c>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017cc:	2304      	movs	r3, #4
 80017ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d4:	2303      	movs	r3, #3
 80017d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	4619      	mov	r1, r3
 80017de:	480f      	ldr	r0, [pc, #60]	; (800181c <HAL_UART_MspInit+0xa0>)
 80017e0:	f001 fa34 	bl	8002c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017e4:	2308      	movs	r3, #8
 80017e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	4619      	mov	r1, r3
 80017f6:	4809      	ldr	r0, [pc, #36]	; (800181c <HAL_UART_MspInit+0xa0>)
 80017f8:	f001 fa28 	bl	8002c4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2100      	movs	r1, #0
 8001800:	2026      	movs	r0, #38	; 0x26
 8001802:	f000 ffd8 	bl	80027b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001806:	2026      	movs	r0, #38	; 0x26
 8001808:	f000 fff1 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800180c:	bf00      	nop
 800180e:	3720      	adds	r7, #32
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40004400 	.word	0x40004400
 8001818:	40021000 	.word	0x40021000
 800181c:	40010800 	.word	0x40010800

08001820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001824:	e7fe      	b.n	8001824 <NMI_Handler+0x4>

08001826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <HardFault_Handler+0x4>

0800182c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <MemManage_Handler+0x4>

08001832 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <BusFault_Handler+0x4>

08001838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <UsageFault_Handler+0x4>

0800183e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001866:	f000 f95d 	bl	8001b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001874:	4802      	ldr	r0, [pc, #8]	; (8001880 <DMA1_Channel6_IRQHandler+0x10>)
 8001876:	f001 f8e3 	bl	8002a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000198 	.word	0x20000198

08001884 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <ADC1_2_IRQHandler+0x10>)
 800188a:	f000 fc4f 	bl	800212c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000084 	.word	0x20000084

08001898 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <TIM3_IRQHandler+0x10>)
 800189e:	f003 f815 	bl	80048cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000150 	.word	0x20000150

080018ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <USART2_IRQHandler+0x10>)
 80018b2:	f003 fe8f 	bl	80055d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200001dc 	.word	0x200001dc

080018c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return 1;
 80018c4:	2301      	movs	r3, #1
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <_kill>:

int _kill(int pid, int sig)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018d8:	f004 fe3e 	bl	8006558 <__errno>
 80018dc:	4603      	mov	r3, r0
 80018de:	2216      	movs	r2, #22
 80018e0:	601a      	str	r2, [r3, #0]
  return -1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_exit>:

void _exit (int status)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018f6:	f04f 31ff 	mov.w	r1, #4294967295
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ffe7 	bl	80018ce <_kill>
  while (1) {}    /* Make sure we hang here */
 8001900:	e7fe      	b.n	8001900 <_exit+0x12>

08001902 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e00a      	b.n	800192a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001914:	f3af 8000 	nop.w
 8001918:	4601      	mov	r1, r0
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	1c5a      	adds	r2, r3, #1
 800191e:	60ba      	str	r2, [r7, #8]
 8001920:	b2ca      	uxtb	r2, r1
 8001922:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	3301      	adds	r3, #1
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	429a      	cmp	r2, r3
 8001930:	dbf0      	blt.n	8001914 <_read+0x12>
  }

  return len;
 8001932:	687b      	ldr	r3, [r7, #4]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	e009      	b.n	8001962 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	60ba      	str	r2, [r7, #8]
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	3301      	adds	r3, #1
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	429a      	cmp	r2, r3
 8001968:	dbf1      	blt.n	800194e <_write+0x12>
  }
  return len;
 800196a:	687b      	ldr	r3, [r7, #4]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <_close>:

int _close(int file)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800197c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800199a:	605a      	str	r2, [r3, #4]
  return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <_isatty>:

int _isatty(int file)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019b0:	2301      	movs	r3, #1
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019dc:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <_sbrk+0x5c>)
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <_sbrk+0x60>)
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <_sbrk+0x64>)
 80019f2:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <_sbrk+0x68>)
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d207      	bcs.n	8001a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a04:	f004 fda8 	bl	8006558 <__errno>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	e009      	b.n	8001a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <_sbrk+0x64>)
 8001a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a26:	68fb      	ldr	r3, [r7, #12]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20005000 	.word	0x20005000
 8001a34:	00000400 	.word	0x00000400
 8001a38:	2000041c 	.word	0x2000041c
 8001a3c:	20000570 	.word	0x20000570

08001a40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a4c:	f7ff fff8 	bl	8001a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a50:	480b      	ldr	r0, [pc, #44]	; (8001a80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a52:	490c      	ldr	r1, [pc, #48]	; (8001a84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a54:	4a0c      	ldr	r2, [pc, #48]	; (8001a88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a58:	e002      	b.n	8001a60 <LoopCopyDataInit>

08001a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5e:	3304      	adds	r3, #4

08001a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a64:	d3f9      	bcc.n	8001a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a66:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a68:	4c09      	ldr	r4, [pc, #36]	; (8001a90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a6c:	e001      	b.n	8001a72 <LoopFillZerobss>

08001a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a70:	3204      	adds	r2, #4

08001a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a74:	d3fb      	bcc.n	8001a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a76:	f004 fd75 	bl	8006564 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a7a:	f7ff f98b 	bl	8000d94 <main>
  bx lr
 8001a7e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a84:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001a88:	080080c8 	.word	0x080080c8
  ldr r2, =_sbss
 8001a8c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001a90:	20000570 	.word	0x20000570

08001a94 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a94:	e7fe      	b.n	8001a94 <CAN1_RX1_IRQHandler>
	...

08001a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <HAL_Init+0x28>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <HAL_Init+0x28>)
 8001aa2:	f043 0310 	orr.w	r3, r3, #16
 8001aa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa8:	2003      	movs	r0, #3
 8001aaa:	f000 fe79 	bl	80027a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aae:	200f      	movs	r0, #15
 8001ab0:	f000 f808 	bl	8001ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab4:	f7ff fcd8 	bl	8001468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40022000 	.word	0x40022000

08001ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_InitTick+0x54>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_InitTick+0x58>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 fe91 	bl	800280a <HAL_SYSTICK_Config>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00e      	b.n	8001b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b0f      	cmp	r3, #15
 8001af6:	d80a      	bhi.n	8001b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af8:	2200      	movs	r2, #0
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f000 fe59 	bl	80027b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b04:	4a06      	ldr	r2, [pc, #24]	; (8001b20 <HAL_InitTick+0x5c>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e000      	b.n	8001b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	20000008 	.word	0x20000008
 8001b20:	20000004 	.word	0x20000004

08001b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_IncTick+0x1c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_IncTick+0x20>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	4a03      	ldr	r2, [pc, #12]	; (8001b44 <HAL_IncTick+0x20>)
 8001b36:	6013      	str	r3, [r2, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	20000008 	.word	0x20000008
 8001b44:	20000420 	.word	0x20000420

08001b48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b4c:	4b02      	ldr	r3, [pc, #8]	; (8001b58 <HAL_GetTick+0x10>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	20000420 	.word	0x20000420

08001b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b64:	f7ff fff0 	bl	8001b48 <HAL_GetTick>
 8001b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b74:	d005      	beq.n	8001b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_Delay+0x44>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4413      	add	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b82:	bf00      	nop
 8001b84:	f7ff ffe0 	bl	8001b48 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d8f7      	bhi.n	8001b84 <HAL_Delay+0x28>
  {
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000008 	.word	0x20000008

08001ba4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e0be      	b.n	8001d44 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d109      	bne.n	8001be8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff fc72 	bl	80014cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fcc3 	bl	8002574 <ADC_ConversionStop_Disable>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f040 8099 	bne.w	8001d32 <HAL_ADC_Init+0x18e>
 8001c00:	7dfb      	ldrb	r3, [r7, #23]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f040 8095 	bne.w	8001d32 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c10:	f023 0302 	bic.w	r3, r3, #2
 8001c14:	f043 0202 	orr.w	r2, r3, #2
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c24:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	7b1b      	ldrb	r3, [r3, #12]
 8001c2a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c2c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c3c:	d003      	beq.n	8001c46 <HAL_ADC_Init+0xa2>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d102      	bne.n	8001c4c <HAL_ADC_Init+0xa8>
 8001c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c4a:	e000      	b.n	8001c4e <HAL_ADC_Init+0xaa>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	7d1b      	ldrb	r3, [r3, #20]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d119      	bne.n	8001c90 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	7b1b      	ldrb	r3, [r3, #12]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d109      	bne.n	8001c78 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	035a      	lsls	r2, r3, #13
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	e00b      	b.n	8001c90 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	f043 0220 	orr.w	r2, r3, #32
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	f043 0201 	orr.w	r2, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <HAL_ADC_Init+0x1a8>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	68b9      	ldr	r1, [r7, #8]
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cc0:	d003      	beq.n	8001cca <HAL_ADC_Init+0x126>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d104      	bne.n	8001cd4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	051b      	lsls	r3, r3, #20
 8001cd2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cda:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <HAL_ADC_Init+0x1ac>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d10b      	bne.n	8001d10 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	f023 0303 	bic.w	r3, r3, #3
 8001d06:	f043 0201 	orr.w	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d0e:	e018      	b.n	8001d42 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	f023 0312 	bic.w	r3, r3, #18
 8001d18:	f043 0210 	orr.w	r2, r3, #16
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	f043 0201 	orr.w	r2, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d30:	e007      	b.n	8001d42 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d36:	f043 0210 	orr.w	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	ffe1f7fd 	.word	0xffe1f7fd
 8001d50:	ff1f0efe 	.word	0xff1f0efe

08001d54 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <HAL_ADC_Start+0x1a>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e098      	b.n	8001ea0 <HAL_ADC_Start+0x14c>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 fba2 	bl	80024c0 <ADC_Enable>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f040 8087 	bne.w	8001e96 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d90:	f023 0301 	bic.w	r3, r3, #1
 8001d94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a41      	ldr	r2, [pc, #260]	; (8001ea8 <HAL_ADC_Start+0x154>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d105      	bne.n	8001db2 <HAL_ADC_Start+0x5e>
 8001da6:	4b41      	ldr	r3, [pc, #260]	; (8001eac <HAL_ADC_Start+0x158>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d115      	bne.n	8001dde <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d026      	beq.n	8001e1a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dd4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ddc:	e01d      	b.n	8001e1a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a2f      	ldr	r2, [pc, #188]	; (8001eac <HAL_ADC_Start+0x158>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d004      	beq.n	8001dfe <HAL_ADC_Start+0xaa>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a2b      	ldr	r2, [pc, #172]	; (8001ea8 <HAL_ADC_Start+0x154>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d10d      	bne.n	8001e1a <HAL_ADC_Start+0xc6>
 8001dfe:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <HAL_ADC_Start+0x158>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d006      	beq.n	8001e34 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	f023 0206 	bic.w	r2, r3, #6
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e32:	e002      	b.n	8001e3a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f06f 0202 	mvn.w	r2, #2
 8001e4a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e56:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e5a:	d113      	bne.n	8001e84 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e60:	4a11      	ldr	r2, [pc, #68]	; (8001ea8 <HAL_ADC_Start+0x154>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d105      	bne.n	8001e72 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_ADC_Start+0x158>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d108      	bne.n	8001e84 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	e00c      	b.n	8001e9e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	e003      	b.n	8001e9e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40012800 	.word	0x40012800
 8001eac:	40012400 	.word	0x40012400

08001eb0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_ADC_Stop+0x1a>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e01a      	b.n	8001f00 <HAL_ADC_Stop+0x50>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 fb4e 	bl	8002574 <ADC_ConversionStop_Disable>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d109      	bne.n	8001ef6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eea:	f023 0301 	bic.w	r3, r3, #1
 8001eee:	f043 0201 	orr.w	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f08:	b590      	push	{r4, r7, lr}
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f1e:	f7ff fe13 	bl	8001b48 <HAL_GetTick>
 8001f22:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00b      	beq.n	8001f4a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	f043 0220 	orr.w	r2, r3, #32
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e0d3      	b.n	80020f2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d131      	bne.n	8001fbc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d12a      	bne.n	8001fbc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001f66:	e021      	b.n	8001fac <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6e:	d01d      	beq.n	8001fac <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <HAL_ADC_PollForConversion+0x7e>
 8001f76:	f7ff fde7 	bl	8001b48 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d212      	bcs.n	8001fac <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10b      	bne.n	8001fac <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	f043 0204 	orr.w	r2, r3, #4
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e0a2      	b.n	80020f2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0d6      	beq.n	8001f68 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001fba:	e070      	b.n	800209e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001fbc:	4b4f      	ldr	r3, [pc, #316]	; (80020fc <HAL_ADC_PollForConversion+0x1f4>)
 8001fbe:	681c      	ldr	r4, [r3, #0]
 8001fc0:	2002      	movs	r0, #2
 8001fc2:	f002 f959 	bl	8004278 <HAL_RCCEx_GetPeriphCLKFreq>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6919      	ldr	r1, [r3, #16]
 8001fd2:	4b4b      	ldr	r3, [pc, #300]	; (8002100 <HAL_ADC_PollForConversion+0x1f8>)
 8001fd4:	400b      	ands	r3, r1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d118      	bne.n	800200c <HAL_ADC_PollForConversion+0x104>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68d9      	ldr	r1, [r3, #12]
 8001fe0:	4b48      	ldr	r3, [pc, #288]	; (8002104 <HAL_ADC_PollForConversion+0x1fc>)
 8001fe2:	400b      	ands	r3, r1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d111      	bne.n	800200c <HAL_ADC_PollForConversion+0x104>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6919      	ldr	r1, [r3, #16]
 8001fee:	4b46      	ldr	r3, [pc, #280]	; (8002108 <HAL_ADC_PollForConversion+0x200>)
 8001ff0:	400b      	ands	r3, r1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d108      	bne.n	8002008 <HAL_ADC_PollForConversion+0x100>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68d9      	ldr	r1, [r3, #12]
 8001ffc:	4b43      	ldr	r3, [pc, #268]	; (800210c <HAL_ADC_PollForConversion+0x204>)
 8001ffe:	400b      	ands	r3, r1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_ADC_PollForConversion+0x100>
 8002004:	2314      	movs	r3, #20
 8002006:	e020      	b.n	800204a <HAL_ADC_PollForConversion+0x142>
 8002008:	2329      	movs	r3, #41	; 0x29
 800200a:	e01e      	b.n	800204a <HAL_ADC_PollForConversion+0x142>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6919      	ldr	r1, [r3, #16]
 8002012:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <HAL_ADC_PollForConversion+0x200>)
 8002014:	400b      	ands	r3, r1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d106      	bne.n	8002028 <HAL_ADC_PollForConversion+0x120>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68d9      	ldr	r1, [r3, #12]
 8002020:	4b3a      	ldr	r3, [pc, #232]	; (800210c <HAL_ADC_PollForConversion+0x204>)
 8002022:	400b      	ands	r3, r1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00d      	beq.n	8002044 <HAL_ADC_PollForConversion+0x13c>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6919      	ldr	r1, [r3, #16]
 800202e:	4b38      	ldr	r3, [pc, #224]	; (8002110 <HAL_ADC_PollForConversion+0x208>)
 8002030:	400b      	ands	r3, r1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d108      	bne.n	8002048 <HAL_ADC_PollForConversion+0x140>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68d9      	ldr	r1, [r3, #12]
 800203c:	4b34      	ldr	r3, [pc, #208]	; (8002110 <HAL_ADC_PollForConversion+0x208>)
 800203e:	400b      	ands	r3, r1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_ADC_PollForConversion+0x140>
 8002044:	2354      	movs	r3, #84	; 0x54
 8002046:	e000      	b.n	800204a <HAL_ADC_PollForConversion+0x142>
 8002048:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800204a:	fb02 f303 	mul.w	r3, r2, r3
 800204e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002050:	e021      	b.n	8002096 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002058:	d01a      	beq.n	8002090 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d007      	beq.n	8002070 <HAL_ADC_PollForConversion+0x168>
 8002060:	f7ff fd72 	bl	8001b48 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d20f      	bcs.n	8002090 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	429a      	cmp	r2, r3
 8002076:	d90b      	bls.n	8002090 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	f043 0204 	orr.w	r2, r3, #4
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e030      	b.n	80020f2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	3301      	adds	r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	429a      	cmp	r2, r3
 800209c:	d8d9      	bhi.n	8002052 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f06f 0212 	mvn.w	r2, #18
 80020a6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80020be:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80020c2:	d115      	bne.n	80020f0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d111      	bne.n	80020f0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d105      	bne.n	80020f0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	f043 0201 	orr.w	r2, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	371c      	adds	r7, #28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd90      	pop	{r4, r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000000 	.word	0x20000000
 8002100:	24924924 	.word	0x24924924
 8002104:	00924924 	.word	0x00924924
 8002108:	12492492 	.word	0x12492492
 800210c:	00492492 	.word	0x00492492
 8002110:	00249249 	.word	0x00249249

08002114 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	2b00      	cmp	r3, #0
 800214c:	d03e      	beq.n	80021cc <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d039      	beq.n	80021cc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	2b00      	cmp	r3, #0
 8002162:	d105      	bne.n	8002170 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800217a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800217e:	d11d      	bne.n	80021bc <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002184:	2b00      	cmp	r3, #0
 8002186:	d119      	bne.n	80021bc <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0220 	bic.w	r2, r2, #32
 8002196:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d105      	bne.n	80021bc <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	f043 0201 	orr.w	r2, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f874 	bl	80022aa <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f06f 0212 	mvn.w	r2, #18
 80021ca:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d04d      	beq.n	8002272 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d048      	beq.n	8002272 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d105      	bne.n	80021f8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002202:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002206:	d012      	beq.n	800222e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002212:	2b00      	cmp	r3, #0
 8002214:	d125      	bne.n	8002262 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002220:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002224:	d11d      	bne.n	8002262 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800222a:	2b00      	cmp	r3, #0
 800222c:	d119      	bne.n	8002262 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800223c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002242:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d105      	bne.n	8002262 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	f043 0201 	orr.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f9c7 	bl	80025f6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 020c 	mvn.w	r2, #12
 8002270:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002278:	2b00      	cmp	r3, #0
 800227a:	d012      	beq.n	80022a2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00d      	beq.n	80022a2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f812 	bl	80022bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0201 	mvn.w	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr
	...

080022d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x20>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e0dc      	b.n	80024aa <HAL_ADC_ConfigChannel+0x1da>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b06      	cmp	r3, #6
 80022fe:	d81c      	bhi.n	800233a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	3b05      	subs	r3, #5
 8002312:	221f      	movs	r2, #31
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	4019      	ands	r1, r3
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	3b05      	subs	r3, #5
 800232c:	fa00 f203 	lsl.w	r2, r0, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	635a      	str	r2, [r3, #52]	; 0x34
 8002338:	e03c      	b.n	80023b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b0c      	cmp	r3, #12
 8002340:	d81c      	bhi.n	800237c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	3b23      	subs	r3, #35	; 0x23
 8002354:	221f      	movs	r2, #31
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	4019      	ands	r1, r3
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	3b23      	subs	r3, #35	; 0x23
 800236e:	fa00 f203 	lsl.w	r2, r0, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	631a      	str	r2, [r3, #48]	; 0x30
 800237a:	e01b      	b.n	80023b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	3b41      	subs	r3, #65	; 0x41
 800238e:	221f      	movs	r2, #31
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	4019      	ands	r1, r3
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	3b41      	subs	r3, #65	; 0x41
 80023a8:	fa00 f203 	lsl.w	r2, r0, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b09      	cmp	r3, #9
 80023ba:	d91c      	bls.n	80023f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68d9      	ldr	r1, [r3, #12]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	3b1e      	subs	r3, #30
 80023ce:	2207      	movs	r2, #7
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	4019      	ands	r1, r3
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6898      	ldr	r0, [r3, #8]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4613      	mov	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4413      	add	r3, r2
 80023e6:	3b1e      	subs	r3, #30
 80023e8:	fa00 f203 	lsl.w	r2, r0, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	60da      	str	r2, [r3, #12]
 80023f4:	e019      	b.n	800242a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6919      	ldr	r1, [r3, #16]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4613      	mov	r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4413      	add	r3, r2
 8002406:	2207      	movs	r2, #7
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	4019      	ands	r1, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	6898      	ldr	r0, [r3, #8]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	fa00 f203 	lsl.w	r2, r0, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b10      	cmp	r3, #16
 8002430:	d003      	beq.n	800243a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002436:	2b11      	cmp	r3, #17
 8002438:	d132      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1d      	ldr	r2, [pc, #116]	; (80024b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d125      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d126      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002460:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b10      	cmp	r3, #16
 8002468:	d11a      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800246a:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a13      	ldr	r2, [pc, #76]	; (80024bc <HAL_ADC_ConfigChannel+0x1ec>)
 8002470:	fba2 2303 	umull	r2, r3, r2, r3
 8002474:	0c9a      	lsrs	r2, r3, #18
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002480:	e002      	b.n	8002488 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	3b01      	subs	r3, #1
 8002486:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f9      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x1b2>
 800248e:	e007      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	f043 0220 	orr.w	r2, r3, #32
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	40012400 	.word	0x40012400
 80024b8:	20000000 	.word	0x20000000
 80024bc:	431bde83 	.word	0x431bde83

080024c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d040      	beq.n	8002560 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0201 	orr.w	r2, r2, #1
 80024ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024ee:	4b1f      	ldr	r3, [pc, #124]	; (800256c <ADC_Enable+0xac>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1f      	ldr	r2, [pc, #124]	; (8002570 <ADC_Enable+0xb0>)
 80024f4:	fba2 2303 	umull	r2, r3, r2, r3
 80024f8:	0c9b      	lsrs	r3, r3, #18
 80024fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024fc:	e002      	b.n	8002504 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	3b01      	subs	r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f9      	bne.n	80024fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800250a:	f7ff fb1d 	bl	8001b48 <HAL_GetTick>
 800250e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002510:	e01f      	b.n	8002552 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002512:	f7ff fb19 	bl	8001b48 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d918      	bls.n	8002552 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b01      	cmp	r3, #1
 800252c:	d011      	beq.n	8002552 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002532:	f043 0210 	orr.w	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	f043 0201 	orr.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e007      	b.n	8002562 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b01      	cmp	r3, #1
 800255e:	d1d8      	bne.n	8002512 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000000 	.word	0x20000000
 8002570:	431bde83 	.word	0x431bde83

08002574 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b01      	cmp	r3, #1
 800258c:	d12e      	bne.n	80025ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0201 	bic.w	r2, r2, #1
 800259c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800259e:	f7ff fad3 	bl	8001b48 <HAL_GetTick>
 80025a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025a4:	e01b      	b.n	80025de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025a6:	f7ff facf 	bl	8001b48 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d914      	bls.n	80025de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d10d      	bne.n	80025de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c6:	f043 0210 	orr.w	r2, r3, #16
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	f043 0201 	orr.w	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e007      	b.n	80025ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d0dc      	beq.n	80025a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002624:	4013      	ands	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263a:	4a04      	ldr	r2, [pc, #16]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	60d3      	str	r3, [r2, #12]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <__NVIC_GetPriorityGrouping+0x18>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	f003 0307 	and.w	r3, r3, #7
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	2b00      	cmp	r3, #0
 800267c:	db0b      	blt.n	8002696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	f003 021f 	and.w	r2, r3, #31
 8002684:	4906      	ldr	r1, [pc, #24]	; (80026a0 <__NVIC_EnableIRQ+0x34>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2001      	movs	r0, #1
 800268e:	fa00 f202 	lsl.w	r2, r0, r2
 8002692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	e000e100 	.word	0xe000e100

080026a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	db0a      	blt.n	80026ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	490c      	ldr	r1, [pc, #48]	; (80026f0 <__NVIC_SetPriority+0x4c>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	0112      	lsls	r2, r2, #4
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	440b      	add	r3, r1
 80026c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026cc:	e00a      	b.n	80026e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4908      	ldr	r1, [pc, #32]	; (80026f4 <__NVIC_SetPriority+0x50>)
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	3b04      	subs	r3, #4
 80026dc:	0112      	lsls	r2, r2, #4
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	440b      	add	r3, r1
 80026e2:	761a      	strb	r2, [r3, #24]
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000e100 	.word	0xe000e100
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b089      	sub	sp, #36	; 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f1c3 0307 	rsb	r3, r3, #7
 8002712:	2b04      	cmp	r3, #4
 8002714:	bf28      	it	cs
 8002716:	2304      	movcs	r3, #4
 8002718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3304      	adds	r3, #4
 800271e:	2b06      	cmp	r3, #6
 8002720:	d902      	bls.n	8002728 <NVIC_EncodePriority+0x30>
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3b03      	subs	r3, #3
 8002726:	e000      	b.n	800272a <NVIC_EncodePriority+0x32>
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	f04f 32ff 	mov.w	r2, #4294967295
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43da      	mvns	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	401a      	ands	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002740:	f04f 31ff 	mov.w	r1, #4294967295
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	43d9      	mvns	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002750:	4313      	orrs	r3, r2
         );
}
 8002752:	4618      	mov	r0, r3
 8002754:	3724      	adds	r7, #36	; 0x24
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800276c:	d301      	bcc.n	8002772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800276e:	2301      	movs	r3, #1
 8002770:	e00f      	b.n	8002792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002772:	4a0a      	ldr	r2, [pc, #40]	; (800279c <SysTick_Config+0x40>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800277a:	210f      	movs	r1, #15
 800277c:	f04f 30ff 	mov.w	r0, #4294967295
 8002780:	f7ff ff90 	bl	80026a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <SysTick_Config+0x40>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800278a:	4b04      	ldr	r3, [pc, #16]	; (800279c <SysTick_Config+0x40>)
 800278c:	2207      	movs	r2, #7
 800278e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	e000e010 	.word	0xe000e010

080027a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ff2d 	bl	8002608 <__NVIC_SetPriorityGrouping>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	4603      	mov	r3, r0
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c8:	f7ff ff42 	bl	8002650 <__NVIC_GetPriorityGrouping>
 80027cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	6978      	ldr	r0, [r7, #20]
 80027d4:	f7ff ff90 	bl	80026f8 <NVIC_EncodePriority>
 80027d8:	4602      	mov	r2, r0
 80027da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff5f 	bl	80026a4 <__NVIC_SetPriority>
}
 80027e6:	bf00      	nop
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff35 	bl	800266c <__NVIC_EnableIRQ>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff ffa2 	bl	800275c <SysTick_Config>
 8002818:	4603      	mov	r3, r0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e043      	b.n	80028c2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	4b22      	ldr	r3, [pc, #136]	; (80028cc <HAL_DMA_Init+0xa8>)
 8002842:	4413      	add	r3, r2
 8002844:	4a22      	ldr	r2, [pc, #136]	; (80028d0 <HAL_DMA_Init+0xac>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	009a      	lsls	r2, r3, #2
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a1f      	ldr	r2, [pc, #124]	; (80028d4 <HAL_DMA_Init+0xb0>)
 8002856:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800286e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002872:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800287c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002888:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002894:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	bffdfff8 	.word	0xbffdfff8
 80028d0:	cccccccd 	.word	0xcccccccd
 80028d4:	40020000 	.word	0x40020000

080028d8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d008      	beq.n	8002902 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2204      	movs	r2, #4
 80028f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e020      	b.n	8002944 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 020e 	bic.w	r2, r2, #14
 8002910:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0201 	bic.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292a:	2101      	movs	r1, #1
 800292c:	fa01 f202 	lsl.w	r2, r1, r2
 8002930:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002942:	7bfb      	ldrb	r3, [r7, #15]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr
	...

08002950 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d005      	beq.n	8002974 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2204      	movs	r2, #4
 800296c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
 8002972:	e051      	b.n	8002a18 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 020e 	bic.w	r2, r2, #14
 8002982:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a22      	ldr	r2, [pc, #136]	; (8002a24 <HAL_DMA_Abort_IT+0xd4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d029      	beq.n	80029f2 <HAL_DMA_Abort_IT+0xa2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a21      	ldr	r2, [pc, #132]	; (8002a28 <HAL_DMA_Abort_IT+0xd8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d022      	beq.n	80029ee <HAL_DMA_Abort_IT+0x9e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <HAL_DMA_Abort_IT+0xdc>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d01a      	beq.n	80029e8 <HAL_DMA_Abort_IT+0x98>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1e      	ldr	r2, [pc, #120]	; (8002a30 <HAL_DMA_Abort_IT+0xe0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d012      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x92>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <HAL_DMA_Abort_IT+0xe4>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00a      	beq.n	80029dc <HAL_DMA_Abort_IT+0x8c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1b      	ldr	r2, [pc, #108]	; (8002a38 <HAL_DMA_Abort_IT+0xe8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d102      	bne.n	80029d6 <HAL_DMA_Abort_IT+0x86>
 80029d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029d4:	e00e      	b.n	80029f4 <HAL_DMA_Abort_IT+0xa4>
 80029d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029da:	e00b      	b.n	80029f4 <HAL_DMA_Abort_IT+0xa4>
 80029dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029e0:	e008      	b.n	80029f4 <HAL_DMA_Abort_IT+0xa4>
 80029e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029e6:	e005      	b.n	80029f4 <HAL_DMA_Abort_IT+0xa4>
 80029e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ec:	e002      	b.n	80029f4 <HAL_DMA_Abort_IT+0xa4>
 80029ee:	2310      	movs	r3, #16
 80029f0:	e000      	b.n	80029f4 <HAL_DMA_Abort_IT+0xa4>
 80029f2:	2301      	movs	r3, #1
 80029f4:	4a11      	ldr	r2, [pc, #68]	; (8002a3c <HAL_DMA_Abort_IT+0xec>)
 80029f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
    } 
  }
  return status;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40020008 	.word	0x40020008
 8002a28:	4002001c 	.word	0x4002001c
 8002a2c:	40020030 	.word	0x40020030
 8002a30:	40020044 	.word	0x40020044
 8002a34:	40020058 	.word	0x40020058
 8002a38:	4002006c 	.word	0x4002006c
 8002a3c:	40020000 	.word	0x40020000

08002a40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d04f      	beq.n	8002b08 <HAL_DMA_IRQHandler+0xc8>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d04a      	beq.n	8002b08 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d107      	bne.n	8002a90 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0204 	bic.w	r2, r2, #4
 8002a8e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a66      	ldr	r2, [pc, #408]	; (8002c30 <HAL_DMA_IRQHandler+0x1f0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d029      	beq.n	8002aee <HAL_DMA_IRQHandler+0xae>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a65      	ldr	r2, [pc, #404]	; (8002c34 <HAL_DMA_IRQHandler+0x1f4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d022      	beq.n	8002aea <HAL_DMA_IRQHandler+0xaa>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a63      	ldr	r2, [pc, #396]	; (8002c38 <HAL_DMA_IRQHandler+0x1f8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d01a      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0xa4>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a62      	ldr	r2, [pc, #392]	; (8002c3c <HAL_DMA_IRQHandler+0x1fc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d012      	beq.n	8002ade <HAL_DMA_IRQHandler+0x9e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a60      	ldr	r2, [pc, #384]	; (8002c40 <HAL_DMA_IRQHandler+0x200>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x98>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a5f      	ldr	r2, [pc, #380]	; (8002c44 <HAL_DMA_IRQHandler+0x204>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d102      	bne.n	8002ad2 <HAL_DMA_IRQHandler+0x92>
 8002acc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ad0:	e00e      	b.n	8002af0 <HAL_DMA_IRQHandler+0xb0>
 8002ad2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002ad6:	e00b      	b.n	8002af0 <HAL_DMA_IRQHandler+0xb0>
 8002ad8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002adc:	e008      	b.n	8002af0 <HAL_DMA_IRQHandler+0xb0>
 8002ade:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ae2:	e005      	b.n	8002af0 <HAL_DMA_IRQHandler+0xb0>
 8002ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ae8:	e002      	b.n	8002af0 <HAL_DMA_IRQHandler+0xb0>
 8002aea:	2340      	movs	r3, #64	; 0x40
 8002aec:	e000      	b.n	8002af0 <HAL_DMA_IRQHandler+0xb0>
 8002aee:	2304      	movs	r3, #4
 8002af0:	4a55      	ldr	r2, [pc, #340]	; (8002c48 <HAL_DMA_IRQHandler+0x208>)
 8002af2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 8094 	beq.w	8002c26 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b06:	e08e      	b.n	8002c26 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d056      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x186>
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d051      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0320 	and.w	r3, r3, #32
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10b      	bne.n	8002b48 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 020a 	bic.w	r2, r2, #10
 8002b3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a38      	ldr	r2, [pc, #224]	; (8002c30 <HAL_DMA_IRQHandler+0x1f0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d029      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0x166>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a37      	ldr	r2, [pc, #220]	; (8002c34 <HAL_DMA_IRQHandler+0x1f4>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d022      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0x162>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a35      	ldr	r2, [pc, #212]	; (8002c38 <HAL_DMA_IRQHandler+0x1f8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d01a      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x15c>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a34      	ldr	r2, [pc, #208]	; (8002c3c <HAL_DMA_IRQHandler+0x1fc>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d012      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x156>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a32      	ldr	r2, [pc, #200]	; (8002c40 <HAL_DMA_IRQHandler+0x200>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00a      	beq.n	8002b90 <HAL_DMA_IRQHandler+0x150>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a31      	ldr	r2, [pc, #196]	; (8002c44 <HAL_DMA_IRQHandler+0x204>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d102      	bne.n	8002b8a <HAL_DMA_IRQHandler+0x14a>
 8002b84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b88:	e00e      	b.n	8002ba8 <HAL_DMA_IRQHandler+0x168>
 8002b8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b8e:	e00b      	b.n	8002ba8 <HAL_DMA_IRQHandler+0x168>
 8002b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b94:	e008      	b.n	8002ba8 <HAL_DMA_IRQHandler+0x168>
 8002b96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b9a:	e005      	b.n	8002ba8 <HAL_DMA_IRQHandler+0x168>
 8002b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ba0:	e002      	b.n	8002ba8 <HAL_DMA_IRQHandler+0x168>
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	e000      	b.n	8002ba8 <HAL_DMA_IRQHandler+0x168>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	4a27      	ldr	r2, [pc, #156]	; (8002c48 <HAL_DMA_IRQHandler+0x208>)
 8002baa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d034      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002bc4:	e02f      	b.n	8002c26 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	2208      	movs	r2, #8
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d028      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x1e8>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d023      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 020e 	bic.w	r2, r2, #14
 8002bee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d004      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	4798      	blx	r3
    }
  }
  return;
 8002c26:	bf00      	nop
 8002c28:	bf00      	nop
}
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40020008 	.word	0x40020008
 8002c34:	4002001c 	.word	0x4002001c
 8002c38:	40020030 	.word	0x40020030
 8002c3c:	40020044 	.word	0x40020044
 8002c40:	40020058 	.word	0x40020058
 8002c44:	4002006c 	.word	0x4002006c
 8002c48:	40020000 	.word	0x40020000

08002c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b08b      	sub	sp, #44	; 0x2c
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c56:	2300      	movs	r3, #0
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c5e:	e169      	b.n	8002f34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c60:	2201      	movs	r2, #1
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69fa      	ldr	r2, [r7, #28]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	f040 8158 	bne.w	8002f2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4a9a      	ldr	r2, [pc, #616]	; (8002eec <HAL_GPIO_Init+0x2a0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d05e      	beq.n	8002d46 <HAL_GPIO_Init+0xfa>
 8002c88:	4a98      	ldr	r2, [pc, #608]	; (8002eec <HAL_GPIO_Init+0x2a0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d875      	bhi.n	8002d7a <HAL_GPIO_Init+0x12e>
 8002c8e:	4a98      	ldr	r2, [pc, #608]	; (8002ef0 <HAL_GPIO_Init+0x2a4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d058      	beq.n	8002d46 <HAL_GPIO_Init+0xfa>
 8002c94:	4a96      	ldr	r2, [pc, #600]	; (8002ef0 <HAL_GPIO_Init+0x2a4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d86f      	bhi.n	8002d7a <HAL_GPIO_Init+0x12e>
 8002c9a:	4a96      	ldr	r2, [pc, #600]	; (8002ef4 <HAL_GPIO_Init+0x2a8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d052      	beq.n	8002d46 <HAL_GPIO_Init+0xfa>
 8002ca0:	4a94      	ldr	r2, [pc, #592]	; (8002ef4 <HAL_GPIO_Init+0x2a8>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d869      	bhi.n	8002d7a <HAL_GPIO_Init+0x12e>
 8002ca6:	4a94      	ldr	r2, [pc, #592]	; (8002ef8 <HAL_GPIO_Init+0x2ac>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d04c      	beq.n	8002d46 <HAL_GPIO_Init+0xfa>
 8002cac:	4a92      	ldr	r2, [pc, #584]	; (8002ef8 <HAL_GPIO_Init+0x2ac>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d863      	bhi.n	8002d7a <HAL_GPIO_Init+0x12e>
 8002cb2:	4a92      	ldr	r2, [pc, #584]	; (8002efc <HAL_GPIO_Init+0x2b0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d046      	beq.n	8002d46 <HAL_GPIO_Init+0xfa>
 8002cb8:	4a90      	ldr	r2, [pc, #576]	; (8002efc <HAL_GPIO_Init+0x2b0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d85d      	bhi.n	8002d7a <HAL_GPIO_Init+0x12e>
 8002cbe:	2b12      	cmp	r3, #18
 8002cc0:	d82a      	bhi.n	8002d18 <HAL_GPIO_Init+0xcc>
 8002cc2:	2b12      	cmp	r3, #18
 8002cc4:	d859      	bhi.n	8002d7a <HAL_GPIO_Init+0x12e>
 8002cc6:	a201      	add	r2, pc, #4	; (adr r2, 8002ccc <HAL_GPIO_Init+0x80>)
 8002cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ccc:	08002d47 	.word	0x08002d47
 8002cd0:	08002d21 	.word	0x08002d21
 8002cd4:	08002d33 	.word	0x08002d33
 8002cd8:	08002d75 	.word	0x08002d75
 8002cdc:	08002d7b 	.word	0x08002d7b
 8002ce0:	08002d7b 	.word	0x08002d7b
 8002ce4:	08002d7b 	.word	0x08002d7b
 8002ce8:	08002d7b 	.word	0x08002d7b
 8002cec:	08002d7b 	.word	0x08002d7b
 8002cf0:	08002d7b 	.word	0x08002d7b
 8002cf4:	08002d7b 	.word	0x08002d7b
 8002cf8:	08002d7b 	.word	0x08002d7b
 8002cfc:	08002d7b 	.word	0x08002d7b
 8002d00:	08002d7b 	.word	0x08002d7b
 8002d04:	08002d7b 	.word	0x08002d7b
 8002d08:	08002d7b 	.word	0x08002d7b
 8002d0c:	08002d7b 	.word	0x08002d7b
 8002d10:	08002d29 	.word	0x08002d29
 8002d14:	08002d3d 	.word	0x08002d3d
 8002d18:	4a79      	ldr	r2, [pc, #484]	; (8002f00 <HAL_GPIO_Init+0x2b4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d1e:	e02c      	b.n	8002d7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	623b      	str	r3, [r7, #32]
          break;
 8002d26:	e029      	b.n	8002d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	623b      	str	r3, [r7, #32]
          break;
 8002d30:	e024      	b.n	8002d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	3308      	adds	r3, #8
 8002d38:	623b      	str	r3, [r7, #32]
          break;
 8002d3a:	e01f      	b.n	8002d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	330c      	adds	r3, #12
 8002d42:	623b      	str	r3, [r7, #32]
          break;
 8002d44:	e01a      	b.n	8002d7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d102      	bne.n	8002d54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d4e:	2304      	movs	r3, #4
 8002d50:	623b      	str	r3, [r7, #32]
          break;
 8002d52:	e013      	b.n	8002d7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d105      	bne.n	8002d68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d5c:	2308      	movs	r3, #8
 8002d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	611a      	str	r2, [r3, #16]
          break;
 8002d66:	e009      	b.n	8002d7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d68:	2308      	movs	r3, #8
 8002d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	615a      	str	r2, [r3, #20]
          break;
 8002d72:	e003      	b.n	8002d7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d74:	2300      	movs	r3, #0
 8002d76:	623b      	str	r3, [r7, #32]
          break;
 8002d78:	e000      	b.n	8002d7c <HAL_GPIO_Init+0x130>
          break;
 8002d7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2bff      	cmp	r3, #255	; 0xff
 8002d80:	d801      	bhi.n	8002d86 <HAL_GPIO_Init+0x13a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	e001      	b.n	8002d8a <HAL_GPIO_Init+0x13e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	2bff      	cmp	r3, #255	; 0xff
 8002d90:	d802      	bhi.n	8002d98 <HAL_GPIO_Init+0x14c>
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	e002      	b.n	8002d9e <HAL_GPIO_Init+0x152>
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	3b08      	subs	r3, #8
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	210f      	movs	r1, #15
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	401a      	ands	r2, r3
 8002db0:	6a39      	ldr	r1, [r7, #32]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	431a      	orrs	r2, r3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 80b1 	beq.w	8002f2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dcc:	4b4d      	ldr	r3, [pc, #308]	; (8002f04 <HAL_GPIO_Init+0x2b8>)
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	4a4c      	ldr	r2, [pc, #304]	; (8002f04 <HAL_GPIO_Init+0x2b8>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6193      	str	r3, [r2, #24]
 8002dd8:	4b4a      	ldr	r3, [pc, #296]	; (8002f04 <HAL_GPIO_Init+0x2b8>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002de4:	4a48      	ldr	r2, [pc, #288]	; (8002f08 <HAL_GPIO_Init+0x2bc>)
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	089b      	lsrs	r3, r3, #2
 8002dea:	3302      	adds	r3, #2
 8002dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	220f      	movs	r2, #15
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4013      	ands	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a40      	ldr	r2, [pc, #256]	; (8002f0c <HAL_GPIO_Init+0x2c0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d013      	beq.n	8002e38 <HAL_GPIO_Init+0x1ec>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a3f      	ldr	r2, [pc, #252]	; (8002f10 <HAL_GPIO_Init+0x2c4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00d      	beq.n	8002e34 <HAL_GPIO_Init+0x1e8>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a3e      	ldr	r2, [pc, #248]	; (8002f14 <HAL_GPIO_Init+0x2c8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d007      	beq.n	8002e30 <HAL_GPIO_Init+0x1e4>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a3d      	ldr	r2, [pc, #244]	; (8002f18 <HAL_GPIO_Init+0x2cc>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d101      	bne.n	8002e2c <HAL_GPIO_Init+0x1e0>
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e006      	b.n	8002e3a <HAL_GPIO_Init+0x1ee>
 8002e2c:	2304      	movs	r3, #4
 8002e2e:	e004      	b.n	8002e3a <HAL_GPIO_Init+0x1ee>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e002      	b.n	8002e3a <HAL_GPIO_Init+0x1ee>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <HAL_GPIO_Init+0x1ee>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e3c:	f002 0203 	and.w	r2, r2, #3
 8002e40:	0092      	lsls	r2, r2, #2
 8002e42:	4093      	lsls	r3, r2
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e4a:	492f      	ldr	r1, [pc, #188]	; (8002f08 <HAL_GPIO_Init+0x2bc>)
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	089b      	lsrs	r3, r3, #2
 8002e50:	3302      	adds	r3, #2
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d006      	beq.n	8002e72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e64:	4b2d      	ldr	r3, [pc, #180]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	492c      	ldr	r1, [pc, #176]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	608b      	str	r3, [r1, #8]
 8002e70:	e006      	b.n	8002e80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e72:	4b2a      	ldr	r3, [pc, #168]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	4928      	ldr	r1, [pc, #160]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d006      	beq.n	8002e9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e8c:	4b23      	ldr	r3, [pc, #140]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	4922      	ldr	r1, [pc, #136]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60cb      	str	r3, [r1, #12]
 8002e98:	e006      	b.n	8002ea8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e9a:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	491e      	ldr	r1, [pc, #120]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d006      	beq.n	8002ec2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002eb4:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	4918      	ldr	r1, [pc, #96]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	604b      	str	r3, [r1, #4]
 8002ec0:	e006      	b.n	8002ed0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ec2:	4b16      	ldr	r3, [pc, #88]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	4914      	ldr	r1, [pc, #80]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d021      	beq.n	8002f20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002edc:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	490e      	ldr	r1, [pc, #56]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]
 8002ee8:	e021      	b.n	8002f2e <HAL_GPIO_Init+0x2e2>
 8002eea:	bf00      	nop
 8002eec:	10320000 	.word	0x10320000
 8002ef0:	10310000 	.word	0x10310000
 8002ef4:	10220000 	.word	0x10220000
 8002ef8:	10210000 	.word	0x10210000
 8002efc:	10120000 	.word	0x10120000
 8002f00:	10110000 	.word	0x10110000
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40010000 	.word	0x40010000
 8002f0c:	40010800 	.word	0x40010800
 8002f10:	40010c00 	.word	0x40010c00
 8002f14:	40011000 	.word	0x40011000
 8002f18:	40011400 	.word	0x40011400
 8002f1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_GPIO_Init+0x304>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	43db      	mvns	r3, r3
 8002f28:	4909      	ldr	r1, [pc, #36]	; (8002f50 <HAL_GPIO_Init+0x304>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	3301      	adds	r3, #1
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f47f ae8e 	bne.w	8002c60 <HAL_GPIO_Init+0x14>
  }
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	372c      	adds	r7, #44	; 0x2c
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	40010400 	.word	0x40010400

08002f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	807b      	strh	r3, [r7, #2]
 8002f60:	4613      	mov	r3, r2
 8002f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f64:	787b      	ldrb	r3, [r7, #1]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f6a:	887a      	ldrh	r2, [r7, #2]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f70:	e003      	b.n	8002f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f72:	887b      	ldrh	r3, [r7, #2]
 8002f74:	041a      	lsls	r2, r3, #16
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	611a      	str	r2, [r3, #16]
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f8e:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d006      	beq.n	8002fa8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f9a:	4a05      	ldr	r2, [pc, #20]	; (8002fb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f9c:	88fb      	ldrh	r3, [r7, #6]
 8002f9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fd fa20 	bl	80003e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fa8:	bf00      	nop
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40010400 	.word	0x40010400

08002fb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e12b      	b.n	800321e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fe faba 	bl	8001554 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2224      	movs	r2, #36	; 0x24
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003006:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003016:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003018:	f001 f832 	bl	8004080 <HAL_RCC_GetPCLK1Freq>
 800301c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4a81      	ldr	r2, [pc, #516]	; (8003228 <HAL_I2C_Init+0x274>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d807      	bhi.n	8003038 <HAL_I2C_Init+0x84>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4a80      	ldr	r2, [pc, #512]	; (800322c <HAL_I2C_Init+0x278>)
 800302c:	4293      	cmp	r3, r2
 800302e:	bf94      	ite	ls
 8003030:	2301      	movls	r3, #1
 8003032:	2300      	movhi	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	e006      	b.n	8003046 <HAL_I2C_Init+0x92>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4a7d      	ldr	r2, [pc, #500]	; (8003230 <HAL_I2C_Init+0x27c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	bf94      	ite	ls
 8003040:	2301      	movls	r3, #1
 8003042:	2300      	movhi	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e0e7      	b.n	800321e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4a78      	ldr	r2, [pc, #480]	; (8003234 <HAL_I2C_Init+0x280>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	0c9b      	lsrs	r3, r3, #18
 8003058:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4a6a      	ldr	r2, [pc, #424]	; (8003228 <HAL_I2C_Init+0x274>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d802      	bhi.n	8003088 <HAL_I2C_Init+0xd4>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	3301      	adds	r3, #1
 8003086:	e009      	b.n	800309c <HAL_I2C_Init+0xe8>
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800308e:	fb02 f303 	mul.w	r3, r2, r3
 8003092:	4a69      	ldr	r2, [pc, #420]	; (8003238 <HAL_I2C_Init+0x284>)
 8003094:	fba2 2303 	umull	r2, r3, r2, r3
 8003098:	099b      	lsrs	r3, r3, #6
 800309a:	3301      	adds	r3, #1
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	495c      	ldr	r1, [pc, #368]	; (8003228 <HAL_I2C_Init+0x274>)
 80030b8:	428b      	cmp	r3, r1
 80030ba:	d819      	bhi.n	80030f0 <HAL_I2C_Init+0x13c>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1e59      	subs	r1, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ca:	1c59      	adds	r1, r3, #1
 80030cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030d0:	400b      	ands	r3, r1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <HAL_I2C_Init+0x138>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	1e59      	subs	r1, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e4:	3301      	adds	r3, #1
 80030e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ea:	e051      	b.n	8003190 <HAL_I2C_Init+0x1dc>
 80030ec:	2304      	movs	r3, #4
 80030ee:	e04f      	b.n	8003190 <HAL_I2C_Init+0x1dc>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d111      	bne.n	800311c <HAL_I2C_Init+0x168>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1e58      	subs	r0, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	440b      	add	r3, r1
 8003106:	fbb0 f3f3 	udiv	r3, r0, r3
 800310a:	3301      	adds	r3, #1
 800310c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	e012      	b.n	8003142 <HAL_I2C_Init+0x18e>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1e58      	subs	r0, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	0099      	lsls	r1, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003132:	3301      	adds	r3, #1
 8003134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Init+0x196>
 8003146:	2301      	movs	r3, #1
 8003148:	e022      	b.n	8003190 <HAL_I2C_Init+0x1dc>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10e      	bne.n	8003170 <HAL_I2C_Init+0x1bc>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1e58      	subs	r0, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6859      	ldr	r1, [r3, #4]
 800315a:	460b      	mov	r3, r1
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	440b      	add	r3, r1
 8003160:	fbb0 f3f3 	udiv	r3, r0, r3
 8003164:	3301      	adds	r3, #1
 8003166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800316a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800316e:	e00f      	b.n	8003190 <HAL_I2C_Init+0x1dc>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1e58      	subs	r0, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	0099      	lsls	r1, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	fbb0 f3f3 	udiv	r3, r0, r3
 8003186:	3301      	adds	r3, #1
 8003188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	6809      	ldr	r1, [r1, #0]
 8003194:	4313      	orrs	r3, r2
 8003196:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69da      	ldr	r2, [r3, #28]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6911      	ldr	r1, [r2, #16]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	68d2      	ldr	r2, [r2, #12]
 80031ca:	4311      	orrs	r1, r2
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	430b      	orrs	r3, r1
 80031d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	000186a0 	.word	0x000186a0
 800322c:	001e847f 	.word	0x001e847f
 8003230:	003d08ff 	.word	0x003d08ff
 8003234:	431bde83 	.word	0x431bde83
 8003238:	10624dd3 	.word	0x10624dd3

0800323c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af02      	add	r7, sp, #8
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	607a      	str	r2, [r7, #4]
 8003246:	461a      	mov	r2, r3
 8003248:	460b      	mov	r3, r1
 800324a:	817b      	strh	r3, [r7, #10]
 800324c:	4613      	mov	r3, r2
 800324e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003250:	f7fe fc7a 	bl	8001b48 <HAL_GetTick>
 8003254:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b20      	cmp	r3, #32
 8003260:	f040 80e0 	bne.w	8003424 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	2319      	movs	r3, #25
 800326a:	2201      	movs	r2, #1
 800326c:	4970      	ldr	r1, [pc, #448]	; (8003430 <HAL_I2C_Master_Transmit+0x1f4>)
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 f964 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800327a:	2302      	movs	r3, #2
 800327c:	e0d3      	b.n	8003426 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_I2C_Master_Transmit+0x50>
 8003288:	2302      	movs	r3, #2
 800328a:	e0cc      	b.n	8003426 <HAL_I2C_Master_Transmit+0x1ea>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d007      	beq.n	80032b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0201 	orr.w	r2, r2, #1
 80032b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2221      	movs	r2, #33	; 0x21
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2210      	movs	r2, #16
 80032ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	893a      	ldrh	r2, [r7, #8]
 80032e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4a50      	ldr	r2, [pc, #320]	; (8003434 <HAL_I2C_Master_Transmit+0x1f8>)
 80032f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032f4:	8979      	ldrh	r1, [r7, #10]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	6a3a      	ldr	r2, [r7, #32]
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f89c 	bl	8003438 <I2C_MasterRequestWrite>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e08d      	b.n	8003426 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800330a:	2300      	movs	r3, #0
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003320:	e066      	b.n	80033f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	6a39      	ldr	r1, [r7, #32]
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 fa22 	bl	8003770 <I2C_WaitOnTXEFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00d      	beq.n	800334e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	2b04      	cmp	r3, #4
 8003338:	d107      	bne.n	800334a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003348:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e06b      	b.n	8003426 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	781a      	ldrb	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b04      	cmp	r3, #4
 800338a:	d11b      	bne.n	80033c4 <HAL_I2C_Master_Transmit+0x188>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003390:	2b00      	cmp	r3, #0
 8003392:	d017      	beq.n	80033c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	781a      	ldrb	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	6a39      	ldr	r1, [r7, #32]
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 fa19 	bl	8003800 <I2C_WaitOnBTFFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00d      	beq.n	80033f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d107      	bne.n	80033ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e01a      	b.n	8003426 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d194      	bne.n	8003322 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003406:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	e000      	b.n	8003426 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003424:	2302      	movs	r3, #2
  }
}
 8003426:	4618      	mov	r0, r3
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	00100002 	.word	0x00100002
 8003434:	ffff0000 	.word	0xffff0000

08003438 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af02      	add	r7, sp, #8
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	460b      	mov	r3, r1
 8003446:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b08      	cmp	r3, #8
 8003452:	d006      	beq.n	8003462 <I2C_MasterRequestWrite+0x2a>
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d003      	beq.n	8003462 <I2C_MasterRequestWrite+0x2a>
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003460:	d108      	bne.n	8003474 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	e00b      	b.n	800348c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	2b12      	cmp	r3, #18
 800347a:	d107      	bne.n	800348c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800348a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f84f 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00d      	beq.n	80034c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b2:	d103      	bne.n	80034bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e035      	b.n	800352c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034c8:	d108      	bne.n	80034dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034ca:	897b      	ldrh	r3, [r7, #10]
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	461a      	mov	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034d8:	611a      	str	r2, [r3, #16]
 80034da:	e01b      	b.n	8003514 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034dc:	897b      	ldrh	r3, [r7, #10]
 80034de:	11db      	asrs	r3, r3, #7
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	f003 0306 	and.w	r3, r3, #6
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f063 030f 	orn	r3, r3, #15
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	490e      	ldr	r1, [pc, #56]	; (8003534 <I2C_MasterRequestWrite+0xfc>)
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 f898 	bl	8003630 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e010      	b.n	800352c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800350a:	897b      	ldrh	r3, [r7, #10]
 800350c:	b2da      	uxtb	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	4907      	ldr	r1, [pc, #28]	; (8003538 <I2C_MasterRequestWrite+0x100>)
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f888 	bl	8003630 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	00010008 	.word	0x00010008
 8003538:	00010002 	.word	0x00010002

0800353c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800354c:	e048      	b.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d044      	beq.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003556:	f7fe faf7 	bl	8001b48 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d302      	bcc.n	800356c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d139      	bne.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	0c1b      	lsrs	r3, r3, #16
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	d10d      	bne.n	8003592 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	43da      	mvns	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	e00c      	b.n	80035ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	43da      	mvns	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4013      	ands	r3, r2
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf0c      	ite	eq
 80035a4:	2301      	moveq	r3, #1
 80035a6:	2300      	movne	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d116      	bne.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	f043 0220 	orr.w	r2, r3, #32
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e023      	b.n	8003628 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	0c1b      	lsrs	r3, r3, #16
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d10d      	bne.n	8003606 <I2C_WaitOnFlagUntilTimeout+0xca>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	43da      	mvns	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	4013      	ands	r3, r2
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf0c      	ite	eq
 80035fc:	2301      	moveq	r3, #1
 80035fe:	2300      	movne	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	461a      	mov	r2, r3
 8003604:	e00c      	b.n	8003620 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	43da      	mvns	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	4013      	ands	r3, r2
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	461a      	mov	r2, r3
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	429a      	cmp	r2, r3
 8003624:	d093      	beq.n	800354e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800363e:	e071      	b.n	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364e:	d123      	bne.n	8003698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003668:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	f043 0204 	orr.w	r2, r3, #4
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e067      	b.n	8003768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369e:	d041      	beq.n	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a0:	f7fe fa52 	bl	8001b48 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d302      	bcc.n	80036b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d136      	bne.n	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	0c1b      	lsrs	r3, r3, #16
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d10c      	bne.n	80036da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	43da      	mvns	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4013      	ands	r3, r2
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bf14      	ite	ne
 80036d2:	2301      	movne	r3, #1
 80036d4:	2300      	moveq	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	e00b      	b.n	80036f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	43da      	mvns	r2, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4013      	ands	r3, r2
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf14      	ite	ne
 80036ec:	2301      	movne	r3, #1
 80036ee:	2300      	moveq	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d016      	beq.n	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	f043 0220 	orr.w	r2, r3, #32
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e021      	b.n	8003768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	0c1b      	lsrs	r3, r3, #16
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b01      	cmp	r3, #1
 800372c:	d10c      	bne.n	8003748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	43da      	mvns	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4013      	ands	r3, r2
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf14      	ite	ne
 8003740:	2301      	movne	r3, #1
 8003742:	2300      	moveq	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e00b      	b.n	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	43da      	mvns	r2, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4013      	ands	r3, r2
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	bf14      	ite	ne
 800375a:	2301      	movne	r3, #1
 800375c:	2300      	moveq	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	f47f af6d 	bne.w	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800377c:	e034      	b.n	80037e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f886 	bl	8003890 <I2C_IsAcknowledgeFailed>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e034      	b.n	80037f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003794:	d028      	beq.n	80037e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003796:	f7fe f9d7 	bl	8001b48 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d302      	bcc.n	80037ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d11d      	bne.n	80037e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b6:	2b80      	cmp	r3, #128	; 0x80
 80037b8:	d016      	beq.n	80037e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	f043 0220 	orr.w	r2, r3, #32
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e007      	b.n	80037f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f2:	2b80      	cmp	r3, #128	; 0x80
 80037f4:	d1c3      	bne.n	800377e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800380c:	e034      	b.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f83e 	bl	8003890 <I2C_IsAcknowledgeFailed>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e034      	b.n	8003888 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003824:	d028      	beq.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003826:	f7fe f98f 	bl	8001b48 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	429a      	cmp	r2, r3
 8003834:	d302      	bcc.n	800383c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d11d      	bne.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b04      	cmp	r3, #4
 8003848:	d016      	beq.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	f043 0220 	orr.w	r2, r3, #32
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e007      	b.n	8003888 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b04      	cmp	r3, #4
 8003884:	d1c3      	bne.n	800380e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a6:	d11b      	bne.n	80038e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f043 0204 	orr.w	r2, r3, #4
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr

080038ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e272      	b.n	8003de4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 8087 	beq.w	8003a1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800390c:	4b92      	ldr	r3, [pc, #584]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 030c 	and.w	r3, r3, #12
 8003914:	2b04      	cmp	r3, #4
 8003916:	d00c      	beq.n	8003932 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003918:	4b8f      	ldr	r3, [pc, #572]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 030c 	and.w	r3, r3, #12
 8003920:	2b08      	cmp	r3, #8
 8003922:	d112      	bne.n	800394a <HAL_RCC_OscConfig+0x5e>
 8003924:	4b8c      	ldr	r3, [pc, #560]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003930:	d10b      	bne.n	800394a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003932:	4b89      	ldr	r3, [pc, #548]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d06c      	beq.n	8003a18 <HAL_RCC_OscConfig+0x12c>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d168      	bne.n	8003a18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e24c      	b.n	8003de4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003952:	d106      	bne.n	8003962 <HAL_RCC_OscConfig+0x76>
 8003954:	4b80      	ldr	r3, [pc, #512]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a7f      	ldr	r2, [pc, #508]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 800395a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	e02e      	b.n	80039c0 <HAL_RCC_OscConfig+0xd4>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10c      	bne.n	8003984 <HAL_RCC_OscConfig+0x98>
 800396a:	4b7b      	ldr	r3, [pc, #492]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a7a      	ldr	r2, [pc, #488]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 8003970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	4b78      	ldr	r3, [pc, #480]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a77      	ldr	r2, [pc, #476]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 800397c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	e01d      	b.n	80039c0 <HAL_RCC_OscConfig+0xd4>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800398c:	d10c      	bne.n	80039a8 <HAL_RCC_OscConfig+0xbc>
 800398e:	4b72      	ldr	r3, [pc, #456]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a71      	ldr	r2, [pc, #452]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 8003994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	4b6f      	ldr	r3, [pc, #444]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a6e      	ldr	r2, [pc, #440]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 80039a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	e00b      	b.n	80039c0 <HAL_RCC_OscConfig+0xd4>
 80039a8:	4b6b      	ldr	r3, [pc, #428]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a6a      	ldr	r2, [pc, #424]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 80039ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	4b68      	ldr	r3, [pc, #416]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a67      	ldr	r2, [pc, #412]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 80039ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d013      	beq.n	80039f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c8:	f7fe f8be 	bl	8001b48 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d0:	f7fe f8ba 	bl	8001b48 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b64      	cmp	r3, #100	; 0x64
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e200      	b.n	8003de4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e2:	4b5d      	ldr	r3, [pc, #372]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0f0      	beq.n	80039d0 <HAL_RCC_OscConfig+0xe4>
 80039ee:	e014      	b.n	8003a1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f0:	f7fe f8aa 	bl	8001b48 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f8:	f7fe f8a6 	bl	8001b48 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b64      	cmp	r3, #100	; 0x64
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e1ec      	b.n	8003de4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0a:	4b53      	ldr	r3, [pc, #332]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x10c>
 8003a16:	e000      	b.n	8003a1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d063      	beq.n	8003aee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a26:	4b4c      	ldr	r3, [pc, #304]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a32:	4b49      	ldr	r3, [pc, #292]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d11c      	bne.n	8003a78 <HAL_RCC_OscConfig+0x18c>
 8003a3e:	4b46      	ldr	r3, [pc, #280]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d116      	bne.n	8003a78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a4a:	4b43      	ldr	r3, [pc, #268]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_RCC_OscConfig+0x176>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d001      	beq.n	8003a62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e1c0      	b.n	8003de4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a62:	4b3d      	ldr	r3, [pc, #244]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4939      	ldr	r1, [pc, #228]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a76:	e03a      	b.n	8003aee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d020      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a80:	4b36      	ldr	r3, [pc, #216]	; (8003b5c <HAL_RCC_OscConfig+0x270>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a86:	f7fe f85f 	bl	8001b48 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8e:	f7fe f85b 	bl	8001b48 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e1a1      	b.n	8003de4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa0:	4b2d      	ldr	r3, [pc, #180]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aac:	4b2a      	ldr	r3, [pc, #168]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4927      	ldr	r1, [pc, #156]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	600b      	str	r3, [r1, #0]
 8003ac0:	e015      	b.n	8003aee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac2:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <HAL_RCC_OscConfig+0x270>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac8:	f7fe f83e 	bl	8001b48 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad0:	f7fe f83a 	bl	8001b48 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e180      	b.n	8003de4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae2:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d03a      	beq.n	8003b70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d019      	beq.n	8003b36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b02:	4b17      	ldr	r3, [pc, #92]	; (8003b60 <HAL_RCC_OscConfig+0x274>)
 8003b04:	2201      	movs	r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b08:	f7fe f81e 	bl	8001b48 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b10:	f7fe f81a 	bl	8001b48 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e160      	b.n	8003de4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b22:	4b0d      	ldr	r3, [pc, #52]	; (8003b58 <HAL_RCC_OscConfig+0x26c>)
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b2e:	2001      	movs	r0, #1
 8003b30:	f000 face 	bl	80040d0 <RCC_Delay>
 8003b34:	e01c      	b.n	8003b70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b36:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <HAL_RCC_OscConfig+0x274>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3c:	f7fe f804 	bl	8001b48 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b42:	e00f      	b.n	8003b64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b44:	f7fe f800 	bl	8001b48 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d908      	bls.n	8003b64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e146      	b.n	8003de4 <HAL_RCC_OscConfig+0x4f8>
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	42420000 	.word	0x42420000
 8003b60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b64:	4b92      	ldr	r3, [pc, #584]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e9      	bne.n	8003b44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 80a6 	beq.w	8003cca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b82:	4b8b      	ldr	r3, [pc, #556]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10d      	bne.n	8003baa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8e:	4b88      	ldr	r3, [pc, #544]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	4a87      	ldr	r2, [pc, #540]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b98:	61d3      	str	r3, [r2, #28]
 8003b9a:	4b85      	ldr	r3, [pc, #532]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	60bb      	str	r3, [r7, #8]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003baa:	4b82      	ldr	r3, [pc, #520]	; (8003db4 <HAL_RCC_OscConfig+0x4c8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d118      	bne.n	8003be8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bb6:	4b7f      	ldr	r3, [pc, #508]	; (8003db4 <HAL_RCC_OscConfig+0x4c8>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a7e      	ldr	r2, [pc, #504]	; (8003db4 <HAL_RCC_OscConfig+0x4c8>)
 8003bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc2:	f7fd ffc1 	bl	8001b48 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bca:	f7fd ffbd 	bl	8001b48 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b64      	cmp	r3, #100	; 0x64
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e103      	b.n	8003de4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bdc:	4b75      	ldr	r3, [pc, #468]	; (8003db4 <HAL_RCC_OscConfig+0x4c8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0f0      	beq.n	8003bca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d106      	bne.n	8003bfe <HAL_RCC_OscConfig+0x312>
 8003bf0:	4b6f      	ldr	r3, [pc, #444]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	4a6e      	ldr	r2, [pc, #440]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	6213      	str	r3, [r2, #32]
 8003bfc:	e02d      	b.n	8003c5a <HAL_RCC_OscConfig+0x36e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x334>
 8003c06:	4b6a      	ldr	r3, [pc, #424]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	4a69      	ldr	r2, [pc, #420]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	6213      	str	r3, [r2, #32]
 8003c12:	4b67      	ldr	r3, [pc, #412]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	4a66      	ldr	r2, [pc, #408]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003c18:	f023 0304 	bic.w	r3, r3, #4
 8003c1c:	6213      	str	r3, [r2, #32]
 8003c1e:	e01c      	b.n	8003c5a <HAL_RCC_OscConfig+0x36e>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	2b05      	cmp	r3, #5
 8003c26:	d10c      	bne.n	8003c42 <HAL_RCC_OscConfig+0x356>
 8003c28:	4b61      	ldr	r3, [pc, #388]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	4a60      	ldr	r2, [pc, #384]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003c2e:	f043 0304 	orr.w	r3, r3, #4
 8003c32:	6213      	str	r3, [r2, #32]
 8003c34:	4b5e      	ldr	r3, [pc, #376]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	4a5d      	ldr	r2, [pc, #372]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	6213      	str	r3, [r2, #32]
 8003c40:	e00b      	b.n	8003c5a <HAL_RCC_OscConfig+0x36e>
 8003c42:	4b5b      	ldr	r3, [pc, #364]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	4a5a      	ldr	r2, [pc, #360]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	6213      	str	r3, [r2, #32]
 8003c4e:	4b58      	ldr	r3, [pc, #352]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	4a57      	ldr	r2, [pc, #348]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003c54:	f023 0304 	bic.w	r3, r3, #4
 8003c58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d015      	beq.n	8003c8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c62:	f7fd ff71 	bl	8001b48 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c68:	e00a      	b.n	8003c80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6a:	f7fd ff6d 	bl	8001b48 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e0b1      	b.n	8003de4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c80:	4b4b      	ldr	r3, [pc, #300]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0ee      	beq.n	8003c6a <HAL_RCC_OscConfig+0x37e>
 8003c8c:	e014      	b.n	8003cb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8e:	f7fd ff5b 	bl	8001b48 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c94:	e00a      	b.n	8003cac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c96:	f7fd ff57 	bl	8001b48 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e09b      	b.n	8003de4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cac:	4b40      	ldr	r3, [pc, #256]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1ee      	bne.n	8003c96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d105      	bne.n	8003cca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cbe:	4b3c      	ldr	r3, [pc, #240]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	4a3b      	ldr	r2, [pc, #236]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 8087 	beq.w	8003de2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cd4:	4b36      	ldr	r3, [pc, #216]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 030c 	and.w	r3, r3, #12
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d061      	beq.n	8003da4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d146      	bne.n	8003d76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce8:	4b33      	ldr	r3, [pc, #204]	; (8003db8 <HAL_RCC_OscConfig+0x4cc>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cee:	f7fd ff2b 	bl	8001b48 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf6:	f7fd ff27 	bl	8001b48 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e06d      	b.n	8003de4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d08:	4b29      	ldr	r3, [pc, #164]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1f0      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1c:	d108      	bne.n	8003d30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d1e:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	4921      	ldr	r1, [pc, #132]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d30:	4b1f      	ldr	r3, [pc, #124]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a19      	ldr	r1, [r3, #32]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	430b      	orrs	r3, r1
 8003d42:	491b      	ldr	r1, [pc, #108]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d48:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <HAL_RCC_OscConfig+0x4cc>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4e:	f7fd fefb 	bl	8001b48 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d56:	f7fd fef7 	bl	8001b48 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e03d      	b.n	8003de4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d68:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0f0      	beq.n	8003d56 <HAL_RCC_OscConfig+0x46a>
 8003d74:	e035      	b.n	8003de2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d76:	4b10      	ldr	r3, [pc, #64]	; (8003db8 <HAL_RCC_OscConfig+0x4cc>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7c:	f7fd fee4 	bl	8001b48 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d84:	f7fd fee0 	bl	8001b48 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e026      	b.n	8003de4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <HAL_RCC_OscConfig+0x4c4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0x498>
 8003da2:	e01e      	b.n	8003de2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d107      	bne.n	8003dbc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e019      	b.n	8003de4 <HAL_RCC_OscConfig+0x4f8>
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40007000 	.word	0x40007000
 8003db8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <HAL_RCC_OscConfig+0x500>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d106      	bne.n	8003dde <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d001      	beq.n	8003de2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40021000 	.word	0x40021000

08003df0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e0d0      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e04:	4b6a      	ldr	r3, [pc, #424]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d910      	bls.n	8003e34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e12:	4b67      	ldr	r3, [pc, #412]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f023 0207 	bic.w	r2, r3, #7
 8003e1a:	4965      	ldr	r1, [pc, #404]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e22:	4b63      	ldr	r3, [pc, #396]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e0b8      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d020      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e4c:	4b59      	ldr	r3, [pc, #356]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	4a58      	ldr	r2, [pc, #352]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e64:	4b53      	ldr	r3, [pc, #332]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	4a52      	ldr	r2, [pc, #328]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e70:	4b50      	ldr	r3, [pc, #320]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	494d      	ldr	r1, [pc, #308]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d040      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d107      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e96:	4b47      	ldr	r3, [pc, #284]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d115      	bne.n	8003ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e07f      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d107      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eae:	4b41      	ldr	r3, [pc, #260]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e073      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ebe:	4b3d      	ldr	r3, [pc, #244]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e06b      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ece:	4b39      	ldr	r3, [pc, #228]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f023 0203 	bic.w	r2, r3, #3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	4936      	ldr	r1, [pc, #216]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ee0:	f7fd fe32 	bl	8001b48 <HAL_GetTick>
 8003ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee6:	e00a      	b.n	8003efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee8:	f7fd fe2e 	bl	8001b48 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e053      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efe:	4b2d      	ldr	r3, [pc, #180]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 020c 	and.w	r2, r3, #12
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d1eb      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f10:	4b27      	ldr	r3, [pc, #156]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d210      	bcs.n	8003f40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1e:	4b24      	ldr	r3, [pc, #144]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f023 0207 	bic.w	r2, r3, #7
 8003f26:	4922      	ldr	r1, [pc, #136]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2e:	4b20      	ldr	r3, [pc, #128]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e032      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4916      	ldr	r1, [pc, #88]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f6a:	4b12      	ldr	r3, [pc, #72]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	490e      	ldr	r1, [pc, #56]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f7e:	f000 f821 	bl	8003fc4 <HAL_RCC_GetSysClockFreq>
 8003f82:	4602      	mov	r2, r0
 8003f84:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	091b      	lsrs	r3, r3, #4
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	490a      	ldr	r1, [pc, #40]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f90:	5ccb      	ldrb	r3, [r1, r3]
 8003f92:	fa22 f303 	lsr.w	r3, r2, r3
 8003f96:	4a09      	ldr	r2, [pc, #36]	; (8003fbc <HAL_RCC_ClockConfig+0x1cc>)
 8003f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f9a:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <HAL_RCC_ClockConfig+0x1d0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fd fd90 	bl	8001ac4 <HAL_InitTick>

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40022000 	.word	0x40022000
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	08007e84 	.word	0x08007e84
 8003fbc:	20000000 	.word	0x20000000
 8003fc0:	20000004 	.word	0x20000004

08003fc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fde:	4b1e      	ldr	r3, [pc, #120]	; (8004058 <HAL_RCC_GetSysClockFreq+0x94>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d002      	beq.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x30>
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d003      	beq.n	8003ffa <HAL_RCC_GetSysClockFreq+0x36>
 8003ff2:	e027      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ff4:	4b19      	ldr	r3, [pc, #100]	; (800405c <HAL_RCC_GetSysClockFreq+0x98>)
 8003ff6:	613b      	str	r3, [r7, #16]
      break;
 8003ff8:	e027      	b.n	800404a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	0c9b      	lsrs	r3, r3, #18
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	4a17      	ldr	r2, [pc, #92]	; (8004060 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004004:	5cd3      	ldrb	r3, [r2, r3]
 8004006:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d010      	beq.n	8004034 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004012:	4b11      	ldr	r3, [pc, #68]	; (8004058 <HAL_RCC_GetSysClockFreq+0x94>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	0c5b      	lsrs	r3, r3, #17
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	4a11      	ldr	r2, [pc, #68]	; (8004064 <HAL_RCC_GetSysClockFreq+0xa0>)
 800401e:	5cd3      	ldrb	r3, [r2, r3]
 8004020:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a0d      	ldr	r2, [pc, #52]	; (800405c <HAL_RCC_GetSysClockFreq+0x98>)
 8004026:	fb03 f202 	mul.w	r2, r3, r2
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	e004      	b.n	800403e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a0c      	ldr	r2, [pc, #48]	; (8004068 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004038:	fb02 f303 	mul.w	r3, r2, r3
 800403c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	613b      	str	r3, [r7, #16]
      break;
 8004042:	e002      	b.n	800404a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004044:	4b05      	ldr	r3, [pc, #20]	; (800405c <HAL_RCC_GetSysClockFreq+0x98>)
 8004046:	613b      	str	r3, [r7, #16]
      break;
 8004048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800404a:	693b      	ldr	r3, [r7, #16]
}
 800404c:	4618      	mov	r0, r3
 800404e:	371c      	adds	r7, #28
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000
 800405c:	007a1200 	.word	0x007a1200
 8004060:	08007e9c 	.word	0x08007e9c
 8004064:	08007eac 	.word	0x08007eac
 8004068:	003d0900 	.word	0x003d0900

0800406c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004070:	4b02      	ldr	r3, [pc, #8]	; (800407c <HAL_RCC_GetHCLKFreq+0x10>)
 8004072:	681b      	ldr	r3, [r3, #0]
}
 8004074:	4618      	mov	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr
 800407c:	20000000 	.word	0x20000000

08004080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004084:	f7ff fff2 	bl	800406c <HAL_RCC_GetHCLKFreq>
 8004088:	4602      	mov	r2, r0
 800408a:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	0a1b      	lsrs	r3, r3, #8
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	4903      	ldr	r1, [pc, #12]	; (80040a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004096:	5ccb      	ldrb	r3, [r1, r3]
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800409c:	4618      	mov	r0, r3
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40021000 	.word	0x40021000
 80040a4:	08007e94 	.word	0x08007e94

080040a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040ac:	f7ff ffde 	bl	800406c <HAL_RCC_GetHCLKFreq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	0adb      	lsrs	r3, r3, #11
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	4903      	ldr	r1, [pc, #12]	; (80040cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040be:	5ccb      	ldrb	r3, [r1, r3]
 80040c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40021000 	.word	0x40021000
 80040cc:	08007e94 	.word	0x08007e94

080040d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040d8:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <RCC_Delay+0x34>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a0a      	ldr	r2, [pc, #40]	; (8004108 <RCC_Delay+0x38>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	0a5b      	lsrs	r3, r3, #9
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	fb02 f303 	mul.w	r3, r2, r3
 80040ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040ec:	bf00      	nop
  }
  while (Delay --);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1e5a      	subs	r2, r3, #1
 80040f2:	60fa      	str	r2, [r7, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f9      	bne.n	80040ec <RCC_Delay+0x1c>
}
 80040f8:	bf00      	nop
 80040fa:	bf00      	nop
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr
 8004104:	20000000 	.word	0x20000000
 8004108:	10624dd3 	.word	0x10624dd3

0800410c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	613b      	str	r3, [r7, #16]
 8004118:	2300      	movs	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d07d      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004128:	2300      	movs	r3, #0
 800412a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800412c:	4b4f      	ldr	r3, [pc, #316]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10d      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004138:	4b4c      	ldr	r3, [pc, #304]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	4a4b      	ldr	r2, [pc, #300]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004142:	61d3      	str	r3, [r2, #28]
 8004144:	4b49      	ldr	r3, [pc, #292]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004150:	2301      	movs	r3, #1
 8004152:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004154:	4b46      	ldr	r3, [pc, #280]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d118      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004160:	4b43      	ldr	r3, [pc, #268]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a42      	ldr	r2, [pc, #264]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800416c:	f7fd fcec 	bl	8001b48 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004172:	e008      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004174:	f7fd fce8 	bl	8001b48 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b64      	cmp	r3, #100	; 0x64
 8004180:	d901      	bls.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e06d      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004186:	4b3a      	ldr	r3, [pc, #232]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f0      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004192:	4b36      	ldr	r3, [pc, #216]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d02e      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d027      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041b0:	4b2e      	ldr	r3, [pc, #184]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041ba:	4b2e      	ldr	r3, [pc, #184]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041bc:	2201      	movs	r2, #1
 80041be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041c0:	4b2c      	ldr	r3, [pc, #176]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041c6:	4a29      	ldr	r2, [pc, #164]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d014      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d6:	f7fd fcb7 	bl	8001b48 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041dc:	e00a      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041de:	f7fd fcb3 	bl	8001b48 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e036      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f4:	4b1d      	ldr	r3, [pc, #116]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0ee      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004200:	4b1a      	ldr	r3, [pc, #104]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4917      	ldr	r1, [pc, #92]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420e:	4313      	orrs	r3, r2
 8004210:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004212:	7dfb      	ldrb	r3, [r7, #23]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d105      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004218:	4b14      	ldr	r3, [pc, #80]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	4a13      	ldr	r2, [pc, #76]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004222:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004230:	4b0e      	ldr	r3, [pc, #56]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	490b      	ldr	r1, [pc, #44]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423e:	4313      	orrs	r3, r2
 8004240:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	2b00      	cmp	r3, #0
 800424c:	d008      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800424e:	4b07      	ldr	r3, [pc, #28]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	4904      	ldr	r1, [pc, #16]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425c:	4313      	orrs	r3, r2
 800425e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40021000 	.word	0x40021000
 8004270:	40007000 	.word	0x40007000
 8004274:	42420440 	.word	0x42420440

08004278 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	2300      	movs	r3, #0
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	2300      	movs	r3, #0
 800428a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	2300      	movs	r3, #0
 8004292:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b10      	cmp	r3, #16
 8004298:	d00a      	beq.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b10      	cmp	r3, #16
 800429e:	f200 808a 	bhi.w	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d045      	beq.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d075      	beq.n	800439a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80042ae:	e082      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80042b0:	4b46      	ldr	r3, [pc, #280]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80042b6:	4b45      	ldr	r3, [pc, #276]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d07b      	beq.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	0c9b      	lsrs	r3, r3, #18
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	4a41      	ldr	r2, [pc, #260]	; (80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80042cc:	5cd3      	ldrb	r3, [r2, r3]
 80042ce:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d015      	beq.n	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042da:	4b3c      	ldr	r3, [pc, #240]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	0c5b      	lsrs	r3, r3, #17
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	4a3b      	ldr	r2, [pc, #236]	; (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80042e6:	5cd3      	ldrb	r3, [r2, r3]
 80042e8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00d      	beq.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80042f4:	4a38      	ldr	r2, [pc, #224]	; (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	fb02 f303 	mul.w	r3, r2, r3
 8004302:	61fb      	str	r3, [r7, #28]
 8004304:	e004      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4a34      	ldr	r2, [pc, #208]	; (80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800430a:	fb02 f303 	mul.w	r3, r2, r3
 800430e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004310:	4b2e      	ldr	r3, [pc, #184]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800431c:	d102      	bne.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	61bb      	str	r3, [r7, #24]
      break;
 8004322:	e04a      	b.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	4a2d      	ldr	r2, [pc, #180]	; (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800432a:	fba2 2303 	umull	r2, r3, r2, r3
 800432e:	085b      	lsrs	r3, r3, #1
 8004330:	61bb      	str	r3, [r7, #24]
      break;
 8004332:	e042      	b.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004334:	4b25      	ldr	r3, [pc, #148]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004344:	d108      	bne.n	8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004350:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	e01f      	b.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004362:	d109      	bne.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004364:	4b19      	ldr	r3, [pc, #100]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004370:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	e00f      	b.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004382:	d11c      	bne.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004384:	4b11      	ldr	r3, [pc, #68]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d016      	beq.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004390:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004394:	61bb      	str	r3, [r7, #24]
      break;
 8004396:	e012      	b.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004398:	e011      	b.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800439a:	f7ff fe85 	bl	80040a8 <HAL_RCC_GetPCLK2Freq>
 800439e:	4602      	mov	r2, r0
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	0b9b      	lsrs	r3, r3, #14
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	3301      	adds	r3, #1
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b2:	61bb      	str	r3, [r7, #24]
      break;
 80043b4:	e004      	b.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80043b6:	bf00      	nop
 80043b8:	e002      	b.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80043ba:	bf00      	nop
 80043bc:	e000      	b.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80043be:	bf00      	nop
    }
  }
  return (frequency);
 80043c0:	69bb      	ldr	r3, [r7, #24]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3720      	adds	r7, #32
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40021000 	.word	0x40021000
 80043d0:	08007eb0 	.word	0x08007eb0
 80043d4:	08007ec0 	.word	0x08007ec0
 80043d8:	007a1200 	.word	0x007a1200
 80043dc:	003d0900 	.word	0x003d0900
 80043e0:	aaaaaaab 	.word	0xaaaaaaab

080043e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e041      	b.n	800447a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fd f8e0 	bl	80015d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3304      	adds	r3, #4
 8004420:	4619      	mov	r1, r3
 8004422:	4610      	mov	r0, r2
 8004424:	f000 fcf0 	bl	8004e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b082      	sub	sp, #8
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e041      	b.n	8004518 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d106      	bne.n	80044ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f839 	bl	8004520 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2202      	movs	r2, #2
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3304      	adds	r3, #4
 80044be:	4619      	mov	r1, r3
 80044c0:	4610      	mov	r0, r2
 80044c2:	f000 fca1 	bl	8004e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	bc80      	pop	{r7}
 8004530:	4770      	bx	lr
	...

08004534 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d109      	bne.n	8004558 <HAL_TIM_PWM_Start+0x24>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b01      	cmp	r3, #1
 800454e:	bf14      	ite	ne
 8004550:	2301      	movne	r3, #1
 8004552:	2300      	moveq	r3, #0
 8004554:	b2db      	uxtb	r3, r3
 8004556:	e022      	b.n	800459e <HAL_TIM_PWM_Start+0x6a>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2b04      	cmp	r3, #4
 800455c:	d109      	bne.n	8004572 <HAL_TIM_PWM_Start+0x3e>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b01      	cmp	r3, #1
 8004568:	bf14      	ite	ne
 800456a:	2301      	movne	r3, #1
 800456c:	2300      	moveq	r3, #0
 800456e:	b2db      	uxtb	r3, r3
 8004570:	e015      	b.n	800459e <HAL_TIM_PWM_Start+0x6a>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b08      	cmp	r3, #8
 8004576:	d109      	bne.n	800458c <HAL_TIM_PWM_Start+0x58>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b01      	cmp	r3, #1
 8004582:	bf14      	ite	ne
 8004584:	2301      	movne	r3, #1
 8004586:	2300      	moveq	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	e008      	b.n	800459e <HAL_TIM_PWM_Start+0x6a>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b01      	cmp	r3, #1
 8004596:	bf14      	ite	ne
 8004598:	2301      	movne	r3, #1
 800459a:	2300      	moveq	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e05e      	b.n	8004664 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d104      	bne.n	80045b6 <HAL_TIM_PWM_Start+0x82>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b4:	e013      	b.n	80045de <HAL_TIM_PWM_Start+0xaa>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d104      	bne.n	80045c6 <HAL_TIM_PWM_Start+0x92>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045c4:	e00b      	b.n	80045de <HAL_TIM_PWM_Start+0xaa>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d104      	bne.n	80045d6 <HAL_TIM_PWM_Start+0xa2>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045d4:	e003      	b.n	80045de <HAL_TIM_PWM_Start+0xaa>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2202      	movs	r2, #2
 80045da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2201      	movs	r2, #1
 80045e4:	6839      	ldr	r1, [r7, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fe9a 	bl	8005320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1e      	ldr	r2, [pc, #120]	; (800466c <HAL_TIM_PWM_Start+0x138>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d107      	bne.n	8004606 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004604:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a18      	ldr	r2, [pc, #96]	; (800466c <HAL_TIM_PWM_Start+0x138>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00e      	beq.n	800462e <HAL_TIM_PWM_Start+0xfa>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004618:	d009      	beq.n	800462e <HAL_TIM_PWM_Start+0xfa>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a14      	ldr	r2, [pc, #80]	; (8004670 <HAL_TIM_PWM_Start+0x13c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d004      	beq.n	800462e <HAL_TIM_PWM_Start+0xfa>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a12      	ldr	r2, [pc, #72]	; (8004674 <HAL_TIM_PWM_Start+0x140>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d111      	bne.n	8004652 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b06      	cmp	r3, #6
 800463e:	d010      	beq.n	8004662 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004650:	e007      	b.n	8004662 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0201 	orr.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40012c00 	.word	0x40012c00
 8004670:	40000400 	.word	0x40000400
 8004674:	40000800 	.word	0x40000800

08004678 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2200      	movs	r2, #0
 8004688:	6839      	ldr	r1, [r7, #0]
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fe48 	bl	8005320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a29      	ldr	r2, [pc, #164]	; (800473c <HAL_TIM_PWM_Stop+0xc4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d117      	bne.n	80046ca <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6a1a      	ldr	r2, [r3, #32]
 80046a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80046a4:	4013      	ands	r3, r2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10f      	bne.n	80046ca <HAL_TIM_PWM_Stop+0x52>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6a1a      	ldr	r2, [r3, #32]
 80046b0:	f240 4344 	movw	r3, #1092	; 0x444
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d107      	bne.n	80046ca <HAL_TIM_PWM_Stop+0x52>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6a1a      	ldr	r2, [r3, #32]
 80046d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10f      	bne.n	80046fa <HAL_TIM_PWM_Stop+0x82>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6a1a      	ldr	r2, [r3, #32]
 80046e0:	f240 4344 	movw	r3, #1092	; 0x444
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d107      	bne.n	80046fa <HAL_TIM_PWM_Stop+0x82>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0201 	bic.w	r2, r2, #1
 80046f8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d104      	bne.n	800470a <HAL_TIM_PWM_Stop+0x92>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004708:	e013      	b.n	8004732 <HAL_TIM_PWM_Stop+0xba>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b04      	cmp	r3, #4
 800470e:	d104      	bne.n	800471a <HAL_TIM_PWM_Stop+0xa2>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004718:	e00b      	b.n	8004732 <HAL_TIM_PWM_Stop+0xba>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b08      	cmp	r3, #8
 800471e:	d104      	bne.n	800472a <HAL_TIM_PWM_Stop+0xb2>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004728:	e003      	b.n	8004732 <HAL_TIM_PWM_Stop+0xba>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40012c00 	.word	0x40012c00

08004740 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b0c      	cmp	r3, #12
 8004752:	d855      	bhi.n	8004800 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004754:	a201      	add	r2, pc, #4	; (adr r2, 800475c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475a:	bf00      	nop
 800475c:	08004791 	.word	0x08004791
 8004760:	08004801 	.word	0x08004801
 8004764:	08004801 	.word	0x08004801
 8004768:	08004801 	.word	0x08004801
 800476c:	080047ad 	.word	0x080047ad
 8004770:	08004801 	.word	0x08004801
 8004774:	08004801 	.word	0x08004801
 8004778:	08004801 	.word	0x08004801
 800477c:	080047c9 	.word	0x080047c9
 8004780:	08004801 	.word	0x08004801
 8004784:	08004801 	.word	0x08004801
 8004788:	08004801 	.word	0x08004801
 800478c:	080047e5 	.word	0x080047e5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800479e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fe f8d3 	bl	8002950 <HAL_DMA_Abort_IT>
      break;
 80047aa:	e02c      	b.n	8004806 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fe f8c5 	bl	8002950 <HAL_DMA_Abort_IT>
      break;
 80047c6:	e01e      	b.n	8004806 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fe f8b7 	bl	8002950 <HAL_DMA_Abort_IT>
      break;
 80047e2:	e010      	b.n	8004806 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fe f8a9 	bl	8002950 <HAL_DMA_Abort_IT>
      break;
 80047fe:	e002      	b.n	8004806 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	73fb      	strb	r3, [r7, #15]
      break;
 8004804:	bf00      	nop
  }

  if (status == HAL_OK)
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d157      	bne.n	80048bc <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2200      	movs	r2, #0
 8004812:	6839      	ldr	r1, [r7, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fd83 	bl	8005320 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a2a      	ldr	r2, [pc, #168]	; (80048c8 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d117      	bne.n	8004854 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6a1a      	ldr	r2, [r3, #32]
 800482a:	f241 1311 	movw	r3, #4369	; 0x1111
 800482e:	4013      	ands	r3, r2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10f      	bne.n	8004854 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6a1a      	ldr	r2, [r3, #32]
 800483a:	f240 4344 	movw	r3, #1092	; 0x444
 800483e:	4013      	ands	r3, r2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d107      	bne.n	8004854 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004852:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6a1a      	ldr	r2, [r3, #32]
 800485a:	f241 1311 	movw	r3, #4369	; 0x1111
 800485e:	4013      	ands	r3, r2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10f      	bne.n	8004884 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6a1a      	ldr	r2, [r3, #32]
 800486a:	f240 4344 	movw	r3, #1092	; 0x444
 800486e:	4013      	ands	r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d107      	bne.n	8004884 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0201 	bic.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d104      	bne.n	8004894 <HAL_TIM_PWM_Stop_DMA+0x154>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004892:	e013      	b.n	80048bc <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2b04      	cmp	r3, #4
 8004898:	d104      	bne.n	80048a4 <HAL_TIM_PWM_Stop_DMA+0x164>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048a2:	e00b      	b.n	80048bc <HAL_TIM_PWM_Stop_DMA+0x17c>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d104      	bne.n	80048b4 <HAL_TIM_PWM_Stop_DMA+0x174>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048b2:	e003      	b.n	80048bc <HAL_TIM_PWM_Stop_DMA+0x17c>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40012c00 	.word	0x40012c00

080048cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d020      	beq.n	8004930 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d01b      	beq.n	8004930 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0202 	mvn.w	r2, #2
 8004900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fa63 	bl	8004de2 <HAL_TIM_IC_CaptureCallback>
 800491c:	e005      	b.n	800492a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fa56 	bl	8004dd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7fb fd25 	bl	8000374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b00      	cmp	r3, #0
 8004938:	d020      	beq.n	800497c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01b      	beq.n	800497c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0204 	mvn.w	r2, #4
 800494c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fa3d 	bl	8004de2 <HAL_TIM_IC_CaptureCallback>
 8004968:	e005      	b.n	8004976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fa30 	bl	8004dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7fb fcff 	bl	8000374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d020      	beq.n	80049c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f003 0308 	and.w	r3, r3, #8
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01b      	beq.n	80049c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0208 	mvn.w	r2, #8
 8004998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2204      	movs	r2, #4
 800499e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fa17 	bl	8004de2 <HAL_TIM_IC_CaptureCallback>
 80049b4:	e005      	b.n	80049c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fa0a 	bl	8004dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7fb fcd9 	bl	8000374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d020      	beq.n	8004a14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01b      	beq.n	8004a14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0210 	mvn.w	r2, #16
 80049e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2208      	movs	r2, #8
 80049ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f9f1 	bl	8004de2 <HAL_TIM_IC_CaptureCallback>
 8004a00:	e005      	b.n	8004a0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f9e4 	bl	8004dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7fb fcb3 	bl	8000374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00c      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d007      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f06f 0201 	mvn.w	r2, #1
 8004a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f9c3 	bl	8004dbe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00c      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d007      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fd3e 	bl	80054d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00c      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f9ba 	bl	8004df4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f003 0320 	and.w	r3, r3, #32
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00c      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f003 0320 	and.w	r3, r3, #32
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d007      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0220 	mvn.w	r2, #32
 8004a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fd11 	bl	80054c6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aa4:	bf00      	nop
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e0ae      	b.n	8004c28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b0c      	cmp	r3, #12
 8004ad6:	f200 809f 	bhi.w	8004c18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ada:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae0:	08004b15 	.word	0x08004b15
 8004ae4:	08004c19 	.word	0x08004c19
 8004ae8:	08004c19 	.word	0x08004c19
 8004aec:	08004c19 	.word	0x08004c19
 8004af0:	08004b55 	.word	0x08004b55
 8004af4:	08004c19 	.word	0x08004c19
 8004af8:	08004c19 	.word	0x08004c19
 8004afc:	08004c19 	.word	0x08004c19
 8004b00:	08004b97 	.word	0x08004b97
 8004b04:	08004c19 	.word	0x08004c19
 8004b08:	08004c19 	.word	0x08004c19
 8004b0c:	08004c19 	.word	0x08004c19
 8004b10:	08004bd7 	.word	0x08004bd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 f9e2 	bl	8004ee4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0208 	orr.w	r2, r2, #8
 8004b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0204 	bic.w	r2, r2, #4
 8004b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6999      	ldr	r1, [r3, #24]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	619a      	str	r2, [r3, #24]
      break;
 8004b52:	e064      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fa28 	bl	8004fb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699a      	ldr	r2, [r3, #24]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6999      	ldr	r1, [r3, #24]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	021a      	lsls	r2, r3, #8
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	619a      	str	r2, [r3, #24]
      break;
 8004b94:	e043      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68b9      	ldr	r1, [r7, #8]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fa71 	bl	8005084 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0208 	orr.w	r2, r2, #8
 8004bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69da      	ldr	r2, [r3, #28]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0204 	bic.w	r2, r2, #4
 8004bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69d9      	ldr	r1, [r3, #28]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	61da      	str	r2, [r3, #28]
      break;
 8004bd4:	e023      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 fabb 	bl	8005158 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69da      	ldr	r2, [r3, #28]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69da      	ldr	r2, [r3, #28]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69d9      	ldr	r1, [r3, #28]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	021a      	lsls	r2, r3, #8
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	61da      	str	r2, [r3, #28]
      break;
 8004c16:	e002      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_TIM_ConfigClockSource+0x1c>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e0b4      	b.n	8004db6 <HAL_TIM_ConfigClockSource+0x186>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c84:	d03e      	beq.n	8004d04 <HAL_TIM_ConfigClockSource+0xd4>
 8004c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c8a:	f200 8087 	bhi.w	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c92:	f000 8086 	beq.w	8004da2 <HAL_TIM_ConfigClockSource+0x172>
 8004c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9a:	d87f      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004c9c:	2b70      	cmp	r3, #112	; 0x70
 8004c9e:	d01a      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0xa6>
 8004ca0:	2b70      	cmp	r3, #112	; 0x70
 8004ca2:	d87b      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b60      	cmp	r3, #96	; 0x60
 8004ca6:	d050      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x11a>
 8004ca8:	2b60      	cmp	r3, #96	; 0x60
 8004caa:	d877      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004cac:	2b50      	cmp	r3, #80	; 0x50
 8004cae:	d03c      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0xfa>
 8004cb0:	2b50      	cmp	r3, #80	; 0x50
 8004cb2:	d873      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004cb4:	2b40      	cmp	r3, #64	; 0x40
 8004cb6:	d058      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x13a>
 8004cb8:	2b40      	cmp	r3, #64	; 0x40
 8004cba:	d86f      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004cbc:	2b30      	cmp	r3, #48	; 0x30
 8004cbe:	d064      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x15a>
 8004cc0:	2b30      	cmp	r3, #48	; 0x30
 8004cc2:	d86b      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d060      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x15a>
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	d867      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d05c      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x15a>
 8004cd0:	2b10      	cmp	r3, #16
 8004cd2:	d05a      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x15a>
 8004cd4:	e062      	b.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ce6:	f000 fafc 	bl	80052e2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	609a      	str	r2, [r3, #8]
      break;
 8004d02:	e04f      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d14:	f000 fae5 	bl	80052e2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d26:	609a      	str	r2, [r3, #8]
      break;
 8004d28:	e03c      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d36:	461a      	mov	r2, r3
 8004d38:	f000 fa5c 	bl	80051f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2150      	movs	r1, #80	; 0x50
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fab3 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004d48:	e02c      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d56:	461a      	mov	r2, r3
 8004d58:	f000 fa7a 	bl	8005250 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2160      	movs	r1, #96	; 0x60
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 faa3 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004d68:	e01c      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d76:	461a      	mov	r2, r3
 8004d78:	f000 fa3c 	bl	80051f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2140      	movs	r1, #64	; 0x40
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fa93 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004d88:	e00c      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4619      	mov	r1, r3
 8004d94:	4610      	mov	r0, r2
 8004d96:	f000 fa8a 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004d9a:	e003      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004da0:	e000      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004da2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bc80      	pop	{r7}
 8004de0:	4770      	bx	lr

08004de2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr

08004df4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr
	...

08004e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a2f      	ldr	r2, [pc, #188]	; (8004ed8 <TIM_Base_SetConfig+0xd0>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00b      	beq.n	8004e38 <TIM_Base_SetConfig+0x30>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e26:	d007      	beq.n	8004e38 <TIM_Base_SetConfig+0x30>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a2c      	ldr	r2, [pc, #176]	; (8004edc <TIM_Base_SetConfig+0xd4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_Base_SetConfig+0x30>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a2b      	ldr	r2, [pc, #172]	; (8004ee0 <TIM_Base_SetConfig+0xd8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d108      	bne.n	8004e4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a22      	ldr	r2, [pc, #136]	; (8004ed8 <TIM_Base_SetConfig+0xd0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00b      	beq.n	8004e6a <TIM_Base_SetConfig+0x62>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e58:	d007      	beq.n	8004e6a <TIM_Base_SetConfig+0x62>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a1f      	ldr	r2, [pc, #124]	; (8004edc <TIM_Base_SetConfig+0xd4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d003      	beq.n	8004e6a <TIM_Base_SetConfig+0x62>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a1e      	ldr	r2, [pc, #120]	; (8004ee0 <TIM_Base_SetConfig+0xd8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d108      	bne.n	8004e7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a0d      	ldr	r2, [pc, #52]	; (8004ed8 <TIM_Base_SetConfig+0xd0>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d103      	bne.n	8004eb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f023 0201 	bic.w	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	611a      	str	r2, [r3, #16]
  }
}
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bc80      	pop	{r7}
 8004ed6:	4770      	bx	lr
 8004ed8:	40012c00 	.word	0x40012c00
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40000800 	.word	0x40000800

08004ee4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	f023 0201 	bic.w	r2, r3, #1
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0303 	bic.w	r3, r3, #3
 8004f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f023 0302 	bic.w	r3, r3, #2
 8004f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a1c      	ldr	r2, [pc, #112]	; (8004fac <TIM_OC1_SetConfig+0xc8>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d10c      	bne.n	8004f5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f023 0308 	bic.w	r3, r3, #8
 8004f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f023 0304 	bic.w	r3, r3, #4
 8004f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a13      	ldr	r2, [pc, #76]	; (8004fac <TIM_OC1_SetConfig+0xc8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d111      	bne.n	8004f86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	621a      	str	r2, [r3, #32]
}
 8004fa0:	bf00      	nop
 8004fa2:	371c      	adds	r7, #28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40012c00 	.word	0x40012c00

08004fb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	f023 0210 	bic.w	r2, r3, #16
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	021b      	lsls	r3, r3, #8
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0320 	bic.w	r3, r3, #32
 8004ffa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a1d      	ldr	r2, [pc, #116]	; (8005080 <TIM_OC2_SetConfig+0xd0>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d10d      	bne.n	800502c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800502a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a14      	ldr	r2, [pc, #80]	; (8005080 <TIM_OC2_SetConfig+0xd0>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d113      	bne.n	800505c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800503a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005042:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr
 8005080:	40012c00 	.word	0x40012c00

08005084 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 0303 	bic.w	r3, r3, #3
 80050ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a1d      	ldr	r2, [pc, #116]	; (8005154 <TIM_OC3_SetConfig+0xd0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d10d      	bne.n	80050fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a14      	ldr	r2, [pc, #80]	; (8005154 <TIM_OC3_SetConfig+0xd0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d113      	bne.n	800512e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800510c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	4313      	orrs	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	621a      	str	r2, [r3, #32]
}
 8005148:	bf00      	nop
 800514a:	371c      	adds	r7, #28
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40012c00 	.word	0x40012c00

08005158 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800518e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	021b      	lsls	r3, r3, #8
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	031b      	lsls	r3, r3, #12
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a0f      	ldr	r2, [pc, #60]	; (80051f0 <TIM_OC4_SetConfig+0x98>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d109      	bne.n	80051cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	019b      	lsls	r3, r3, #6
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	bf00      	nop
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr
 80051f0:	40012c00 	.word	0x40012c00

080051f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	f023 0201 	bic.w	r2, r3, #1
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800521e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f023 030a 	bic.w	r3, r3, #10
 8005230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4313      	orrs	r3, r2
 8005238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	621a      	str	r2, [r3, #32]
}
 8005246:	bf00      	nop
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr

08005250 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f023 0210 	bic.w	r2, r3, #16
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800527a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	031b      	lsls	r3, r3, #12
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800528c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	4313      	orrs	r3, r2
 8005296:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	621a      	str	r2, [r3, #32]
}
 80052a4:	bf00      	nop
 80052a6:	371c      	adds	r7, #28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bc80      	pop	{r7}
 80052ac:	4770      	bx	lr

080052ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b085      	sub	sp, #20
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f043 0307 	orr.w	r3, r3, #7
 80052d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	609a      	str	r2, [r3, #8]
}
 80052d8:	bf00      	nop
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	bc80      	pop	{r7}
 80052e0:	4770      	bx	lr

080052e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b087      	sub	sp, #28
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	607a      	str	r2, [r7, #4]
 80052ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	021a      	lsls	r2, r3, #8
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	431a      	orrs	r2, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	4313      	orrs	r3, r2
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	609a      	str	r2, [r3, #8]
}
 8005316:	bf00      	nop
 8005318:	371c      	adds	r7, #28
 800531a:	46bd      	mov	sp, r7
 800531c:	bc80      	pop	{r7}
 800531e:	4770      	bx	lr

08005320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	2201      	movs	r2, #1
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a1a      	ldr	r2, [r3, #32]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	43db      	mvns	r3, r3
 8005342:	401a      	ands	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	fa01 f303 	lsl.w	r3, r1, r3
 8005358:	431a      	orrs	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	bc80      	pop	{r7}
 8005366:	4770      	bx	lr

08005368 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005378:	2b01      	cmp	r3, #1
 800537a:	d101      	bne.n	8005380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800537c:	2302      	movs	r3, #2
 800537e:	e046      	b.n	800540e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a16      	ldr	r2, [pc, #88]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00e      	beq.n	80053e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053cc:	d009      	beq.n	80053e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a12      	ldr	r2, [pc, #72]	; (800541c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d004      	beq.n	80053e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a10      	ldr	r2, [pc, #64]	; (8005420 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d10c      	bne.n	80053fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	bc80      	pop	{r7}
 8005416:	4770      	bx	lr
 8005418:	40012c00 	.word	0x40012c00
 800541c:	40000400 	.word	0x40000400
 8005420:	40000800 	.word	0x40000800

08005424 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005438:	2b01      	cmp	r3, #1
 800543a:	d101      	bne.n	8005440 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800543c:	2302      	movs	r3, #2
 800543e:	e03d      	b.n	80054bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	4313      	orrs	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	4313      	orrs	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr

080054c6 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bc80      	pop	{r7}
 80054e8:	4770      	bx	lr

080054ea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b082      	sub	sp, #8
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e042      	b.n	8005582 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d106      	bne.n	8005516 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7fc f933 	bl	800177c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2224      	movs	r2, #36	; 0x24
 800551a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800552c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fcd4 	bl	8005edc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005542:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695a      	ldr	r2, [r3, #20]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005552:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005562:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2220      	movs	r2, #32
 800556e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2220      	movs	r2, #32
 8005576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	4613      	mov	r3, r2
 8005596:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d112      	bne.n	80055ca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <HAL_UART_Receive_IT+0x26>
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e00b      	b.n	80055cc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	461a      	mov	r2, r3
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 fab6 	bl	8005b32 <UART_Start_Receive_IT>
 80055c6:	4603      	mov	r3, r0
 80055c8:	e000      	b.n	80055cc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80055ca:	2302      	movs	r3, #2
  }
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b0ba      	sub	sp, #232	; 0xe8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005600:	2300      	movs	r3, #0
 8005602:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005612:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10f      	bne.n	800563a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800561a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d009      	beq.n	800563a <HAL_UART_IRQHandler+0x66>
 8005626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fb93 	bl	8005d5e <UART_Receive_IT>
      return;
 8005638:	e25b      	b.n	8005af2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800563a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 80de 	beq.w	8005800 <HAL_UART_IRQHandler+0x22c>
 8005644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d106      	bne.n	800565e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005654:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 80d1 	beq.w	8005800 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00b      	beq.n	8005682 <HAL_UART_IRQHandler+0xae>
 800566a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800566e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567a:	f043 0201 	orr.w	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00b      	beq.n	80056a6 <HAL_UART_IRQHandler+0xd2>
 800568e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569e:	f043 0202 	orr.w	r2, r3, #2
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00b      	beq.n	80056ca <HAL_UART_IRQHandler+0xf6>
 80056b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c2:	f043 0204 	orr.w	r2, r3, #4
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d011      	beq.n	80056fa <HAL_UART_IRQHandler+0x126>
 80056d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d105      	bne.n	80056ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f2:	f043 0208 	orr.w	r2, r3, #8
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 81f2 	beq.w	8005ae8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005708:	f003 0320 	and.w	r3, r3, #32
 800570c:	2b00      	cmp	r3, #0
 800570e:	d008      	beq.n	8005722 <HAL_UART_IRQHandler+0x14e>
 8005710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fb1e 	bl	8005d5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572c:	2b00      	cmp	r3, #0
 800572e:	bf14      	ite	ne
 8005730:	2301      	movne	r3, #1
 8005732:	2300      	moveq	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b00      	cmp	r3, #0
 8005744:	d103      	bne.n	800574e <HAL_UART_IRQHandler+0x17a>
 8005746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800574a:	2b00      	cmp	r3, #0
 800574c:	d04f      	beq.n	80057ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fa28 	bl	8005ba4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	d041      	beq.n	80057e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3314      	adds	r3, #20
 8005768:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005770:	e853 3f00 	ldrex	r3, [r3]
 8005774:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005778:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800577c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005780:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3314      	adds	r3, #20
 800578a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800578e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005792:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005796:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800579a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800579e:	e841 2300 	strex	r3, r2, [r1]
 80057a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1d9      	bne.n	8005762 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d013      	beq.n	80057de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ba:	4a7e      	ldr	r2, [pc, #504]	; (80059b4 <HAL_UART_IRQHandler+0x3e0>)
 80057bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fd f8c4 	bl	8002950 <HAL_DMA_Abort_IT>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d016      	beq.n	80057fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80057d8:	4610      	mov	r0, r2
 80057da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057dc:	e00e      	b.n	80057fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f993 	bl	8005b0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e4:	e00a      	b.n	80057fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f98f 	bl	8005b0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ec:	e006      	b.n	80057fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f98b 	bl	8005b0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80057fa:	e175      	b.n	8005ae8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fc:	bf00      	nop
    return;
 80057fe:	e173      	b.n	8005ae8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005804:	2b01      	cmp	r3, #1
 8005806:	f040 814f 	bne.w	8005aa8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800580a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800580e:	f003 0310 	and.w	r3, r3, #16
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 8148 	beq.w	8005aa8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 8141 	beq.w	8005aa8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005826:	2300      	movs	r3, #0
 8005828:	60bb      	str	r3, [r7, #8]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	60bb      	str	r3, [r7, #8]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	60bb      	str	r3, [r7, #8]
 800583a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 80b6 	beq.w	80059b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005858:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 8145 	beq.w	8005aec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005866:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800586a:	429a      	cmp	r2, r3
 800586c:	f080 813e 	bcs.w	8005aec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005876:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	2b20      	cmp	r3, #32
 8005880:	f000 8088 	beq.w	8005994 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	330c      	adds	r3, #12
 800588a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005892:	e853 3f00 	ldrex	r3, [r3]
 8005896:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800589a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800589e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	330c      	adds	r3, #12
 80058ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80058b0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058c0:	e841 2300 	strex	r3, r2, [r1]
 80058c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1d9      	bne.n	8005884 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3314      	adds	r3, #20
 80058d6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058e2:	f023 0301 	bic.w	r3, r3, #1
 80058e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3314      	adds	r3, #20
 80058f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005900:	e841 2300 	strex	r3, r2, [r1]
 8005904:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005906:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e1      	bne.n	80058d0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3314      	adds	r3, #20
 8005912:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005916:	e853 3f00 	ldrex	r3, [r3]
 800591a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800591c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800591e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005922:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3314      	adds	r3, #20
 800592c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005930:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005932:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005936:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005938:	e841 2300 	strex	r3, r2, [r1]
 800593c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800593e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1e3      	bne.n	800590c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2220      	movs	r2, #32
 8005948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	330c      	adds	r3, #12
 8005958:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800595c:	e853 3f00 	ldrex	r3, [r3]
 8005960:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005964:	f023 0310 	bic.w	r3, r3, #16
 8005968:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	330c      	adds	r3, #12
 8005972:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005976:	65ba      	str	r2, [r7, #88]	; 0x58
 8005978:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800597c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e3      	bne.n	8005952 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598e:	4618      	mov	r0, r3
 8005990:	f7fc ffa2 	bl	80028d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	4619      	mov	r1, r3
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f8b6 	bl	8005b1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059b0:	e09c      	b.n	8005aec <HAL_UART_IRQHandler+0x518>
 80059b2:	bf00      	nop
 80059b4:	08005c69 	.word	0x08005c69
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 808e 	beq.w	8005af0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80059d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 8089 	beq.w	8005af0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	330c      	adds	r3, #12
 80059e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a02:	647a      	str	r2, [r7, #68]	; 0x44
 8005a04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a0a:	e841 2300 	strex	r3, r2, [r1]
 8005a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1e3      	bne.n	80059de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3314      	adds	r3, #20
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	e853 3f00 	ldrex	r3, [r3]
 8005a24:	623b      	str	r3, [r7, #32]
   return(result);
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	f023 0301 	bic.w	r3, r3, #1
 8005a2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3314      	adds	r3, #20
 8005a36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a3a:	633a      	str	r2, [r7, #48]	; 0x30
 8005a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e3      	bne.n	8005a16 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	330c      	adds	r3, #12
 8005a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0310 	bic.w	r3, r3, #16
 8005a72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	330c      	adds	r3, #12
 8005a7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005a80:	61fa      	str	r2, [r7, #28]
 8005a82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	69b9      	ldr	r1, [r7, #24]
 8005a86:	69fa      	ldr	r2, [r7, #28]
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e3      	bne.n	8005a5c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f83b 	bl	8005b1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005aa6:	e023      	b.n	8005af0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d009      	beq.n	8005ac8 <HAL_UART_IRQHandler+0x4f4>
 8005ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d003      	beq.n	8005ac8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f8e5 	bl	8005c90 <UART_Transmit_IT>
    return;
 8005ac6:	e014      	b.n	8005af2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00e      	beq.n	8005af2 <HAL_UART_IRQHandler+0x51e>
 8005ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d008      	beq.n	8005af2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f924 	bl	8005d2e <UART_EndTransmit_IT>
    return;
 8005ae6:	e004      	b.n	8005af2 <HAL_UART_IRQHandler+0x51e>
    return;
 8005ae8:	bf00      	nop
 8005aea:	e002      	b.n	8005af2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005aec:	bf00      	nop
 8005aee:	e000      	b.n	8005af2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005af0:	bf00      	nop
  }
}
 8005af2:	37e8      	adds	r7, #232	; 0xe8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr

08005b0a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bc80      	pop	{r7}
 8005b1a:	4770      	bx	lr

08005b1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bc80      	pop	{r7}
 8005b30:	4770      	bx	lr

08005b32 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b085      	sub	sp, #20
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	88fa      	ldrh	r2, [r7, #6]
 8005b4a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	88fa      	ldrh	r2, [r7, #6]
 8005b50:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2222      	movs	r2, #34	; 0x22
 8005b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d007      	beq.n	8005b78 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b76:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	695a      	ldr	r2, [r3, #20]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0201 	orr.w	r2, r2, #1
 8005b86:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0220 	orr.w	r2, r2, #32
 8005b96:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bc80      	pop	{r7}
 8005ba2:	4770      	bx	lr

08005ba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b095      	sub	sp, #84	; 0x54
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	330c      	adds	r3, #12
 8005bb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb6:	e853 3f00 	ldrex	r3, [r3]
 8005bba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	330c      	adds	r3, #12
 8005bca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bcc:	643a      	str	r2, [r7, #64]	; 0x40
 8005bce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bd4:	e841 2300 	strex	r3, r2, [r1]
 8005bd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e5      	bne.n	8005bac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3314      	adds	r3, #20
 8005be6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	e853 3f00 	ldrex	r3, [r3]
 8005bee:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f023 0301 	bic.w	r3, r3, #1
 8005bf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3314      	adds	r3, #20
 8005bfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c08:	e841 2300 	strex	r3, r2, [r1]
 8005c0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1e5      	bne.n	8005be0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d119      	bne.n	8005c50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	330c      	adds	r3, #12
 8005c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	e853 3f00 	ldrex	r3, [r3]
 8005c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f023 0310 	bic.w	r3, r3, #16
 8005c32:	647b      	str	r3, [r7, #68]	; 0x44
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	330c      	adds	r3, #12
 8005c3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c3c:	61ba      	str	r2, [r7, #24]
 8005c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	6979      	ldr	r1, [r7, #20]
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	e841 2300 	strex	r3, r2, [r1]
 8005c48:	613b      	str	r3, [r7, #16]
   return(result);
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e5      	bne.n	8005c1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c5e:	bf00      	nop
 8005c60:	3754      	adds	r7, #84	; 0x54
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bc80      	pop	{r7}
 8005c66:	4770      	bx	lr

08005c68 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f7ff ff41 	bl	8005b0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c88:	bf00      	nop
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b21      	cmp	r3, #33	; 0x21
 8005ca2:	d13e      	bne.n	8005d22 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cac:	d114      	bne.n	8005cd8 <UART_Transmit_IT+0x48>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d110      	bne.n	8005cd8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	1c9a      	adds	r2, r3, #2
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	621a      	str	r2, [r3, #32]
 8005cd6:	e008      	b.n	8005cea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	1c59      	adds	r1, r3, #1
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6211      	str	r1, [r2, #32]
 8005ce2:	781a      	ldrb	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10f      	bne.n	8005d1e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d0c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d1c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	e000      	b.n	8005d24 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d22:	2302      	movs	r3, #2
  }
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc80      	pop	{r7}
 8005d2c:	4770      	bx	lr

08005d2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7ff fed2 	bl	8005af8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b08c      	sub	sp, #48	; 0x30
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b22      	cmp	r3, #34	; 0x22
 8005d70:	f040 80ae 	bne.w	8005ed0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7c:	d117      	bne.n	8005dae <UART_Receive_IT+0x50>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d113      	bne.n	8005dae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d86:	2300      	movs	r3, #0
 8005d88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da6:	1c9a      	adds	r2, r3, #2
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	629a      	str	r2, [r3, #40]	; 0x28
 8005dac:	e026      	b.n	8005dfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005db4:	2300      	movs	r3, #0
 8005db6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc0:	d007      	beq.n	8005dd2 <UART_Receive_IT+0x74>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10a      	bne.n	8005de0 <UART_Receive_IT+0x82>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d106      	bne.n	8005de0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	e008      	b.n	8005df2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	4619      	mov	r1, r3
 8005e0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d15d      	bne.n	8005ecc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0220 	bic.w	r2, r2, #32
 8005e1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	695a      	ldr	r2, [r3, #20]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0201 	bic.w	r2, r2, #1
 8005e3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d135      	bne.n	8005ec2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	330c      	adds	r3, #12
 8005e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	e853 3f00 	ldrex	r3, [r3]
 8005e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f023 0310 	bic.w	r3, r3, #16
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	330c      	adds	r3, #12
 8005e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e7c:	623a      	str	r2, [r7, #32]
 8005e7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e80:	69f9      	ldr	r1, [r7, #28]
 8005e82:	6a3a      	ldr	r2, [r7, #32]
 8005e84:	e841 2300 	strex	r3, r2, [r1]
 8005e88:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1e5      	bne.n	8005e5c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0310 	and.w	r3, r3, #16
 8005e9a:	2b10      	cmp	r3, #16
 8005e9c:	d10a      	bne.n	8005eb4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff fe2e 	bl	8005b1c <HAL_UARTEx_RxEventCallback>
 8005ec0:	e002      	b.n	8005ec8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fa fcf4 	bl	80008b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	e002      	b.n	8005ed2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	e000      	b.n	8005ed2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ed0:	2302      	movs	r3, #2
  }
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3730      	adds	r7, #48	; 0x30
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68da      	ldr	r2, [r3, #12]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005f16:	f023 030c 	bic.w	r3, r3, #12
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6812      	ldr	r2, [r2, #0]
 8005f1e:	68b9      	ldr	r1, [r7, #8]
 8005f20:	430b      	orrs	r3, r1
 8005f22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699a      	ldr	r2, [r3, #24]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a2c      	ldr	r2, [pc, #176]	; (8005ff0 <UART_SetConfig+0x114>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d103      	bne.n	8005f4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f44:	f7fe f8b0 	bl	80040a8 <HAL_RCC_GetPCLK2Freq>
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	e002      	b.n	8005f52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f4c:	f7fe f898 	bl	8004080 <HAL_RCC_GetPCLK1Freq>
 8005f50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	4613      	mov	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	009a      	lsls	r2, r3, #2
 8005f5c:	441a      	add	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f68:	4a22      	ldr	r2, [pc, #136]	; (8005ff4 <UART_SetConfig+0x118>)
 8005f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6e:	095b      	lsrs	r3, r3, #5
 8005f70:	0119      	lsls	r1, r3, #4
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4613      	mov	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	009a      	lsls	r2, r3, #2
 8005f7c:	441a      	add	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f88:	4b1a      	ldr	r3, [pc, #104]	; (8005ff4 <UART_SetConfig+0x118>)
 8005f8a:	fba3 0302 	umull	r0, r3, r3, r2
 8005f8e:	095b      	lsrs	r3, r3, #5
 8005f90:	2064      	movs	r0, #100	; 0x64
 8005f92:	fb00 f303 	mul.w	r3, r0, r3
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	3332      	adds	r3, #50	; 0x32
 8005f9c:	4a15      	ldr	r2, [pc, #84]	; (8005ff4 <UART_SetConfig+0x118>)
 8005f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa2:	095b      	lsrs	r3, r3, #5
 8005fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fa8:	4419      	add	r1, r3
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009a      	lsls	r2, r3, #2
 8005fb4:	441a      	add	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fc0:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <UART_SetConfig+0x118>)
 8005fc2:	fba3 0302 	umull	r0, r3, r3, r2
 8005fc6:	095b      	lsrs	r3, r3, #5
 8005fc8:	2064      	movs	r0, #100	; 0x64
 8005fca:	fb00 f303 	mul.w	r3, r0, r3
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	3332      	adds	r3, #50	; 0x32
 8005fd4:	4a07      	ldr	r2, [pc, #28]	; (8005ff4 <UART_SetConfig+0x118>)
 8005fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fda:	095b      	lsrs	r3, r3, #5
 8005fdc:	f003 020f 	and.w	r2, r3, #15
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	440a      	add	r2, r1
 8005fe6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005fe8:	bf00      	nop
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	40013800 	.word	0x40013800
 8005ff4:	51eb851f 	.word	0x51eb851f

08005ff8 <atoi>:
 8005ff8:	220a      	movs	r2, #10
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	f000 b880 	b.w	8006100 <strtol>

08006000 <_strtol_l.constprop.0>:
 8006000:	2b01      	cmp	r3, #1
 8006002:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006006:	4686      	mov	lr, r0
 8006008:	4690      	mov	r8, r2
 800600a:	d001      	beq.n	8006010 <_strtol_l.constprop.0+0x10>
 800600c:	2b24      	cmp	r3, #36	; 0x24
 800600e:	d906      	bls.n	800601e <_strtol_l.constprop.0+0x1e>
 8006010:	f000 faa2 	bl	8006558 <__errno>
 8006014:	2316      	movs	r3, #22
 8006016:	6003      	str	r3, [r0, #0]
 8006018:	2000      	movs	r0, #0
 800601a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800601e:	460d      	mov	r5, r1
 8006020:	4835      	ldr	r0, [pc, #212]	; (80060f8 <_strtol_l.constprop.0+0xf8>)
 8006022:	462a      	mov	r2, r5
 8006024:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006028:	5d06      	ldrb	r6, [r0, r4]
 800602a:	f016 0608 	ands.w	r6, r6, #8
 800602e:	d1f8      	bne.n	8006022 <_strtol_l.constprop.0+0x22>
 8006030:	2c2d      	cmp	r4, #45	; 0x2d
 8006032:	d12e      	bne.n	8006092 <_strtol_l.constprop.0+0x92>
 8006034:	2601      	movs	r6, #1
 8006036:	782c      	ldrb	r4, [r5, #0]
 8006038:	1c95      	adds	r5, r2, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d057      	beq.n	80060ee <_strtol_l.constprop.0+0xee>
 800603e:	2b10      	cmp	r3, #16
 8006040:	d109      	bne.n	8006056 <_strtol_l.constprop.0+0x56>
 8006042:	2c30      	cmp	r4, #48	; 0x30
 8006044:	d107      	bne.n	8006056 <_strtol_l.constprop.0+0x56>
 8006046:	782a      	ldrb	r2, [r5, #0]
 8006048:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800604c:	2a58      	cmp	r2, #88	; 0x58
 800604e:	d149      	bne.n	80060e4 <_strtol_l.constprop.0+0xe4>
 8006050:	2310      	movs	r3, #16
 8006052:	786c      	ldrb	r4, [r5, #1]
 8006054:	3502      	adds	r5, #2
 8006056:	2200      	movs	r2, #0
 8006058:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800605c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006060:	fbbc f9f3 	udiv	r9, ip, r3
 8006064:	4610      	mov	r0, r2
 8006066:	fb03 ca19 	mls	sl, r3, r9, ip
 800606a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800606e:	2f09      	cmp	r7, #9
 8006070:	d814      	bhi.n	800609c <_strtol_l.constprop.0+0x9c>
 8006072:	463c      	mov	r4, r7
 8006074:	42a3      	cmp	r3, r4
 8006076:	dd20      	ble.n	80060ba <_strtol_l.constprop.0+0xba>
 8006078:	1c57      	adds	r7, r2, #1
 800607a:	d007      	beq.n	800608c <_strtol_l.constprop.0+0x8c>
 800607c:	4581      	cmp	r9, r0
 800607e:	d319      	bcc.n	80060b4 <_strtol_l.constprop.0+0xb4>
 8006080:	d101      	bne.n	8006086 <_strtol_l.constprop.0+0x86>
 8006082:	45a2      	cmp	sl, r4
 8006084:	db16      	blt.n	80060b4 <_strtol_l.constprop.0+0xb4>
 8006086:	2201      	movs	r2, #1
 8006088:	fb00 4003 	mla	r0, r0, r3, r4
 800608c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006090:	e7eb      	b.n	800606a <_strtol_l.constprop.0+0x6a>
 8006092:	2c2b      	cmp	r4, #43	; 0x2b
 8006094:	bf04      	itt	eq
 8006096:	782c      	ldrbeq	r4, [r5, #0]
 8006098:	1c95      	addeq	r5, r2, #2
 800609a:	e7ce      	b.n	800603a <_strtol_l.constprop.0+0x3a>
 800609c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80060a0:	2f19      	cmp	r7, #25
 80060a2:	d801      	bhi.n	80060a8 <_strtol_l.constprop.0+0xa8>
 80060a4:	3c37      	subs	r4, #55	; 0x37
 80060a6:	e7e5      	b.n	8006074 <_strtol_l.constprop.0+0x74>
 80060a8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80060ac:	2f19      	cmp	r7, #25
 80060ae:	d804      	bhi.n	80060ba <_strtol_l.constprop.0+0xba>
 80060b0:	3c57      	subs	r4, #87	; 0x57
 80060b2:	e7df      	b.n	8006074 <_strtol_l.constprop.0+0x74>
 80060b4:	f04f 32ff 	mov.w	r2, #4294967295
 80060b8:	e7e8      	b.n	800608c <_strtol_l.constprop.0+0x8c>
 80060ba:	1c53      	adds	r3, r2, #1
 80060bc:	d108      	bne.n	80060d0 <_strtol_l.constprop.0+0xd0>
 80060be:	2322      	movs	r3, #34	; 0x22
 80060c0:	4660      	mov	r0, ip
 80060c2:	f8ce 3000 	str.w	r3, [lr]
 80060c6:	f1b8 0f00 	cmp.w	r8, #0
 80060ca:	d0a6      	beq.n	800601a <_strtol_l.constprop.0+0x1a>
 80060cc:	1e69      	subs	r1, r5, #1
 80060ce:	e006      	b.n	80060de <_strtol_l.constprop.0+0xde>
 80060d0:	b106      	cbz	r6, 80060d4 <_strtol_l.constprop.0+0xd4>
 80060d2:	4240      	negs	r0, r0
 80060d4:	f1b8 0f00 	cmp.w	r8, #0
 80060d8:	d09f      	beq.n	800601a <_strtol_l.constprop.0+0x1a>
 80060da:	2a00      	cmp	r2, #0
 80060dc:	d1f6      	bne.n	80060cc <_strtol_l.constprop.0+0xcc>
 80060de:	f8c8 1000 	str.w	r1, [r8]
 80060e2:	e79a      	b.n	800601a <_strtol_l.constprop.0+0x1a>
 80060e4:	2430      	movs	r4, #48	; 0x30
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1b5      	bne.n	8006056 <_strtol_l.constprop.0+0x56>
 80060ea:	2308      	movs	r3, #8
 80060ec:	e7b3      	b.n	8006056 <_strtol_l.constprop.0+0x56>
 80060ee:	2c30      	cmp	r4, #48	; 0x30
 80060f0:	d0a9      	beq.n	8006046 <_strtol_l.constprop.0+0x46>
 80060f2:	230a      	movs	r3, #10
 80060f4:	e7af      	b.n	8006056 <_strtol_l.constprop.0+0x56>
 80060f6:	bf00      	nop
 80060f8:	08007ec3 	.word	0x08007ec3

080060fc <_strtol_r>:
 80060fc:	f7ff bf80 	b.w	8006000 <_strtol_l.constprop.0>

08006100 <strtol>:
 8006100:	4613      	mov	r3, r2
 8006102:	460a      	mov	r2, r1
 8006104:	4601      	mov	r1, r0
 8006106:	4802      	ldr	r0, [pc, #8]	; (8006110 <strtol+0x10>)
 8006108:	6800      	ldr	r0, [r0, #0]
 800610a:	f7ff bf79 	b.w	8006000 <_strtol_l.constprop.0>
 800610e:	bf00      	nop
 8006110:	20000064 	.word	0x20000064

08006114 <std>:
 8006114:	2300      	movs	r3, #0
 8006116:	b510      	push	{r4, lr}
 8006118:	4604      	mov	r4, r0
 800611a:	e9c0 3300 	strd	r3, r3, [r0]
 800611e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006122:	6083      	str	r3, [r0, #8]
 8006124:	8181      	strh	r1, [r0, #12]
 8006126:	6643      	str	r3, [r0, #100]	; 0x64
 8006128:	81c2      	strh	r2, [r0, #14]
 800612a:	6183      	str	r3, [r0, #24]
 800612c:	4619      	mov	r1, r3
 800612e:	2208      	movs	r2, #8
 8006130:	305c      	adds	r0, #92	; 0x5c
 8006132:	f000 f954 	bl	80063de <memset>
 8006136:	4b0d      	ldr	r3, [pc, #52]	; (800616c <std+0x58>)
 8006138:	6224      	str	r4, [r4, #32]
 800613a:	6263      	str	r3, [r4, #36]	; 0x24
 800613c:	4b0c      	ldr	r3, [pc, #48]	; (8006170 <std+0x5c>)
 800613e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006140:	4b0c      	ldr	r3, [pc, #48]	; (8006174 <std+0x60>)
 8006142:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006144:	4b0c      	ldr	r3, [pc, #48]	; (8006178 <std+0x64>)
 8006146:	6323      	str	r3, [r4, #48]	; 0x30
 8006148:	4b0c      	ldr	r3, [pc, #48]	; (800617c <std+0x68>)
 800614a:	429c      	cmp	r4, r3
 800614c:	d006      	beq.n	800615c <std+0x48>
 800614e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006152:	4294      	cmp	r4, r2
 8006154:	d002      	beq.n	800615c <std+0x48>
 8006156:	33d0      	adds	r3, #208	; 0xd0
 8006158:	429c      	cmp	r4, r3
 800615a:	d105      	bne.n	8006168 <std+0x54>
 800615c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006164:	f000 ba22 	b.w	80065ac <__retarget_lock_init_recursive>
 8006168:	bd10      	pop	{r4, pc}
 800616a:	bf00      	nop
 800616c:	08006355 	.word	0x08006355
 8006170:	0800637b 	.word	0x0800637b
 8006174:	080063b3 	.word	0x080063b3
 8006178:	080063d7 	.word	0x080063d7
 800617c:	20000424 	.word	0x20000424

08006180 <stdio_exit_handler>:
 8006180:	4a02      	ldr	r2, [pc, #8]	; (800618c <stdio_exit_handler+0xc>)
 8006182:	4903      	ldr	r1, [pc, #12]	; (8006190 <stdio_exit_handler+0x10>)
 8006184:	4803      	ldr	r0, [pc, #12]	; (8006194 <stdio_exit_handler+0x14>)
 8006186:	f000 b869 	b.w	800625c <_fwalk_sglue>
 800618a:	bf00      	nop
 800618c:	2000000c 	.word	0x2000000c
 8006190:	08007501 	.word	0x08007501
 8006194:	20000018 	.word	0x20000018

08006198 <cleanup_stdio>:
 8006198:	6841      	ldr	r1, [r0, #4]
 800619a:	4b0c      	ldr	r3, [pc, #48]	; (80061cc <cleanup_stdio+0x34>)
 800619c:	b510      	push	{r4, lr}
 800619e:	4299      	cmp	r1, r3
 80061a0:	4604      	mov	r4, r0
 80061a2:	d001      	beq.n	80061a8 <cleanup_stdio+0x10>
 80061a4:	f001 f9ac 	bl	8007500 <_fflush_r>
 80061a8:	68a1      	ldr	r1, [r4, #8]
 80061aa:	4b09      	ldr	r3, [pc, #36]	; (80061d0 <cleanup_stdio+0x38>)
 80061ac:	4299      	cmp	r1, r3
 80061ae:	d002      	beq.n	80061b6 <cleanup_stdio+0x1e>
 80061b0:	4620      	mov	r0, r4
 80061b2:	f001 f9a5 	bl	8007500 <_fflush_r>
 80061b6:	68e1      	ldr	r1, [r4, #12]
 80061b8:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <cleanup_stdio+0x3c>)
 80061ba:	4299      	cmp	r1, r3
 80061bc:	d004      	beq.n	80061c8 <cleanup_stdio+0x30>
 80061be:	4620      	mov	r0, r4
 80061c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061c4:	f001 b99c 	b.w	8007500 <_fflush_r>
 80061c8:	bd10      	pop	{r4, pc}
 80061ca:	bf00      	nop
 80061cc:	20000424 	.word	0x20000424
 80061d0:	2000048c 	.word	0x2000048c
 80061d4:	200004f4 	.word	0x200004f4

080061d8 <global_stdio_init.part.0>:
 80061d8:	b510      	push	{r4, lr}
 80061da:	4b0b      	ldr	r3, [pc, #44]	; (8006208 <global_stdio_init.part.0+0x30>)
 80061dc:	4c0b      	ldr	r4, [pc, #44]	; (800620c <global_stdio_init.part.0+0x34>)
 80061de:	4a0c      	ldr	r2, [pc, #48]	; (8006210 <global_stdio_init.part.0+0x38>)
 80061e0:	4620      	mov	r0, r4
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	2104      	movs	r1, #4
 80061e6:	2200      	movs	r2, #0
 80061e8:	f7ff ff94 	bl	8006114 <std>
 80061ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80061f0:	2201      	movs	r2, #1
 80061f2:	2109      	movs	r1, #9
 80061f4:	f7ff ff8e 	bl	8006114 <std>
 80061f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80061fc:	2202      	movs	r2, #2
 80061fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006202:	2112      	movs	r1, #18
 8006204:	f7ff bf86 	b.w	8006114 <std>
 8006208:	2000055c 	.word	0x2000055c
 800620c:	20000424 	.word	0x20000424
 8006210:	08006181 	.word	0x08006181

08006214 <__sfp_lock_acquire>:
 8006214:	4801      	ldr	r0, [pc, #4]	; (800621c <__sfp_lock_acquire+0x8>)
 8006216:	f000 b9ca 	b.w	80065ae <__retarget_lock_acquire_recursive>
 800621a:	bf00      	nop
 800621c:	20000565 	.word	0x20000565

08006220 <__sfp_lock_release>:
 8006220:	4801      	ldr	r0, [pc, #4]	; (8006228 <__sfp_lock_release+0x8>)
 8006222:	f000 b9c5 	b.w	80065b0 <__retarget_lock_release_recursive>
 8006226:	bf00      	nop
 8006228:	20000565 	.word	0x20000565

0800622c <__sinit>:
 800622c:	b510      	push	{r4, lr}
 800622e:	4604      	mov	r4, r0
 8006230:	f7ff fff0 	bl	8006214 <__sfp_lock_acquire>
 8006234:	6a23      	ldr	r3, [r4, #32]
 8006236:	b11b      	cbz	r3, 8006240 <__sinit+0x14>
 8006238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800623c:	f7ff bff0 	b.w	8006220 <__sfp_lock_release>
 8006240:	4b04      	ldr	r3, [pc, #16]	; (8006254 <__sinit+0x28>)
 8006242:	6223      	str	r3, [r4, #32]
 8006244:	4b04      	ldr	r3, [pc, #16]	; (8006258 <__sinit+0x2c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1f5      	bne.n	8006238 <__sinit+0xc>
 800624c:	f7ff ffc4 	bl	80061d8 <global_stdio_init.part.0>
 8006250:	e7f2      	b.n	8006238 <__sinit+0xc>
 8006252:	bf00      	nop
 8006254:	08006199 	.word	0x08006199
 8006258:	2000055c 	.word	0x2000055c

0800625c <_fwalk_sglue>:
 800625c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006260:	4607      	mov	r7, r0
 8006262:	4688      	mov	r8, r1
 8006264:	4614      	mov	r4, r2
 8006266:	2600      	movs	r6, #0
 8006268:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800626c:	f1b9 0901 	subs.w	r9, r9, #1
 8006270:	d505      	bpl.n	800627e <_fwalk_sglue+0x22>
 8006272:	6824      	ldr	r4, [r4, #0]
 8006274:	2c00      	cmp	r4, #0
 8006276:	d1f7      	bne.n	8006268 <_fwalk_sglue+0xc>
 8006278:	4630      	mov	r0, r6
 800627a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800627e:	89ab      	ldrh	r3, [r5, #12]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d907      	bls.n	8006294 <_fwalk_sglue+0x38>
 8006284:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006288:	3301      	adds	r3, #1
 800628a:	d003      	beq.n	8006294 <_fwalk_sglue+0x38>
 800628c:	4629      	mov	r1, r5
 800628e:	4638      	mov	r0, r7
 8006290:	47c0      	blx	r8
 8006292:	4306      	orrs	r6, r0
 8006294:	3568      	adds	r5, #104	; 0x68
 8006296:	e7e9      	b.n	800626c <_fwalk_sglue+0x10>

08006298 <sniprintf>:
 8006298:	b40c      	push	{r2, r3}
 800629a:	b530      	push	{r4, r5, lr}
 800629c:	4b17      	ldr	r3, [pc, #92]	; (80062fc <sniprintf+0x64>)
 800629e:	1e0c      	subs	r4, r1, #0
 80062a0:	681d      	ldr	r5, [r3, #0]
 80062a2:	b09d      	sub	sp, #116	; 0x74
 80062a4:	da08      	bge.n	80062b8 <sniprintf+0x20>
 80062a6:	238b      	movs	r3, #139	; 0x8b
 80062a8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ac:	602b      	str	r3, [r5, #0]
 80062ae:	b01d      	add	sp, #116	; 0x74
 80062b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062b4:	b002      	add	sp, #8
 80062b6:	4770      	bx	lr
 80062b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80062bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80062c0:	bf0c      	ite	eq
 80062c2:	4623      	moveq	r3, r4
 80062c4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80062c8:	9304      	str	r3, [sp, #16]
 80062ca:	9307      	str	r3, [sp, #28]
 80062cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062d0:	9002      	str	r0, [sp, #8]
 80062d2:	9006      	str	r0, [sp, #24]
 80062d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80062d8:	4628      	mov	r0, r5
 80062da:	ab21      	add	r3, sp, #132	; 0x84
 80062dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80062de:	a902      	add	r1, sp, #8
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	f000 fadb 	bl	800689c <_svfiprintf_r>
 80062e6:	1c43      	adds	r3, r0, #1
 80062e8:	bfbc      	itt	lt
 80062ea:	238b      	movlt	r3, #139	; 0x8b
 80062ec:	602b      	strlt	r3, [r5, #0]
 80062ee:	2c00      	cmp	r4, #0
 80062f0:	d0dd      	beq.n	80062ae <sniprintf+0x16>
 80062f2:	2200      	movs	r2, #0
 80062f4:	9b02      	ldr	r3, [sp, #8]
 80062f6:	701a      	strb	r2, [r3, #0]
 80062f8:	e7d9      	b.n	80062ae <sniprintf+0x16>
 80062fa:	bf00      	nop
 80062fc:	20000064 	.word	0x20000064

08006300 <siscanf>:
 8006300:	b40e      	push	{r1, r2, r3}
 8006302:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006306:	b530      	push	{r4, r5, lr}
 8006308:	b09c      	sub	sp, #112	; 0x70
 800630a:	ac1f      	add	r4, sp, #124	; 0x7c
 800630c:	f854 5b04 	ldr.w	r5, [r4], #4
 8006310:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006314:	9002      	str	r0, [sp, #8]
 8006316:	9006      	str	r0, [sp, #24]
 8006318:	f7f9 ff22 	bl	8000160 <strlen>
 800631c:	4b0b      	ldr	r3, [pc, #44]	; (800634c <siscanf+0x4c>)
 800631e:	9003      	str	r0, [sp, #12]
 8006320:	930b      	str	r3, [sp, #44]	; 0x2c
 8006322:	2300      	movs	r3, #0
 8006324:	930f      	str	r3, [sp, #60]	; 0x3c
 8006326:	9314      	str	r3, [sp, #80]	; 0x50
 8006328:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800632c:	9007      	str	r0, [sp, #28]
 800632e:	4808      	ldr	r0, [pc, #32]	; (8006350 <siscanf+0x50>)
 8006330:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006334:	462a      	mov	r2, r5
 8006336:	4623      	mov	r3, r4
 8006338:	a902      	add	r1, sp, #8
 800633a:	6800      	ldr	r0, [r0, #0]
 800633c:	9401      	str	r4, [sp, #4]
 800633e:	f000 fc05 	bl	8006b4c <__ssvfiscanf_r>
 8006342:	b01c      	add	sp, #112	; 0x70
 8006344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006348:	b003      	add	sp, #12
 800634a:	4770      	bx	lr
 800634c:	08006377 	.word	0x08006377
 8006350:	20000064 	.word	0x20000064

08006354 <__sread>:
 8006354:	b510      	push	{r4, lr}
 8006356:	460c      	mov	r4, r1
 8006358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800635c:	f000 f8d8 	bl	8006510 <_read_r>
 8006360:	2800      	cmp	r0, #0
 8006362:	bfab      	itete	ge
 8006364:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006366:	89a3      	ldrhlt	r3, [r4, #12]
 8006368:	181b      	addge	r3, r3, r0
 800636a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800636e:	bfac      	ite	ge
 8006370:	6563      	strge	r3, [r4, #84]	; 0x54
 8006372:	81a3      	strhlt	r3, [r4, #12]
 8006374:	bd10      	pop	{r4, pc}

08006376 <__seofread>:
 8006376:	2000      	movs	r0, #0
 8006378:	4770      	bx	lr

0800637a <__swrite>:
 800637a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800637e:	461f      	mov	r7, r3
 8006380:	898b      	ldrh	r3, [r1, #12]
 8006382:	4605      	mov	r5, r0
 8006384:	05db      	lsls	r3, r3, #23
 8006386:	460c      	mov	r4, r1
 8006388:	4616      	mov	r6, r2
 800638a:	d505      	bpl.n	8006398 <__swrite+0x1e>
 800638c:	2302      	movs	r3, #2
 800638e:	2200      	movs	r2, #0
 8006390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006394:	f000 f8aa 	bl	80064ec <_lseek_r>
 8006398:	89a3      	ldrh	r3, [r4, #12]
 800639a:	4632      	mov	r2, r6
 800639c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063a0:	81a3      	strh	r3, [r4, #12]
 80063a2:	4628      	mov	r0, r5
 80063a4:	463b      	mov	r3, r7
 80063a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063ae:	f000 b8c1 	b.w	8006534 <_write_r>

080063b2 <__sseek>:
 80063b2:	b510      	push	{r4, lr}
 80063b4:	460c      	mov	r4, r1
 80063b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ba:	f000 f897 	bl	80064ec <_lseek_r>
 80063be:	1c43      	adds	r3, r0, #1
 80063c0:	89a3      	ldrh	r3, [r4, #12]
 80063c2:	bf15      	itete	ne
 80063c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80063c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063ce:	81a3      	strheq	r3, [r4, #12]
 80063d0:	bf18      	it	ne
 80063d2:	81a3      	strhne	r3, [r4, #12]
 80063d4:	bd10      	pop	{r4, pc}

080063d6 <__sclose>:
 80063d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063da:	f000 b877 	b.w	80064cc <_close_r>

080063de <memset>:
 80063de:	4603      	mov	r3, r0
 80063e0:	4402      	add	r2, r0
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d100      	bne.n	80063e8 <memset+0xa>
 80063e6:	4770      	bx	lr
 80063e8:	f803 1b01 	strb.w	r1, [r3], #1
 80063ec:	e7f9      	b.n	80063e2 <memset+0x4>

080063ee <strncpy>:
 80063ee:	4603      	mov	r3, r0
 80063f0:	b510      	push	{r4, lr}
 80063f2:	3901      	subs	r1, #1
 80063f4:	b132      	cbz	r2, 8006404 <strncpy+0x16>
 80063f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80063fa:	3a01      	subs	r2, #1
 80063fc:	f803 4b01 	strb.w	r4, [r3], #1
 8006400:	2c00      	cmp	r4, #0
 8006402:	d1f7      	bne.n	80063f4 <strncpy+0x6>
 8006404:	2100      	movs	r1, #0
 8006406:	441a      	add	r2, r3
 8006408:	4293      	cmp	r3, r2
 800640a:	d100      	bne.n	800640e <strncpy+0x20>
 800640c:	bd10      	pop	{r4, pc}
 800640e:	f803 1b01 	strb.w	r1, [r3], #1
 8006412:	e7f9      	b.n	8006408 <strncpy+0x1a>

08006414 <strtok>:
 8006414:	4b16      	ldr	r3, [pc, #88]	; (8006470 <strtok+0x5c>)
 8006416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800641a:	681f      	ldr	r7, [r3, #0]
 800641c:	4605      	mov	r5, r0
 800641e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8006420:	460e      	mov	r6, r1
 8006422:	b9ec      	cbnz	r4, 8006460 <strtok+0x4c>
 8006424:	2050      	movs	r0, #80	; 0x50
 8006426:	f000 f92b 	bl	8006680 <malloc>
 800642a:	4602      	mov	r2, r0
 800642c:	6478      	str	r0, [r7, #68]	; 0x44
 800642e:	b920      	cbnz	r0, 800643a <strtok+0x26>
 8006430:	215b      	movs	r1, #91	; 0x5b
 8006432:	4b10      	ldr	r3, [pc, #64]	; (8006474 <strtok+0x60>)
 8006434:	4810      	ldr	r0, [pc, #64]	; (8006478 <strtok+0x64>)
 8006436:	f000 f8bd 	bl	80065b4 <__assert_func>
 800643a:	e9c0 4400 	strd	r4, r4, [r0]
 800643e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006442:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006446:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800644a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800644e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006452:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006456:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800645a:	6184      	str	r4, [r0, #24]
 800645c:	7704      	strb	r4, [r0, #28]
 800645e:	6244      	str	r4, [r0, #36]	; 0x24
 8006460:	4631      	mov	r1, r6
 8006462:	4628      	mov	r0, r5
 8006464:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006466:	2301      	movs	r3, #1
 8006468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800646c:	f000 b806 	b.w	800647c <__strtok_r>
 8006470:	20000064 	.word	0x20000064
 8006474:	08007fc3 	.word	0x08007fc3
 8006478:	08007fda 	.word	0x08007fda

0800647c <__strtok_r>:
 800647c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800647e:	b908      	cbnz	r0, 8006484 <__strtok_r+0x8>
 8006480:	6810      	ldr	r0, [r2, #0]
 8006482:	b188      	cbz	r0, 80064a8 <__strtok_r+0x2c>
 8006484:	4604      	mov	r4, r0
 8006486:	460f      	mov	r7, r1
 8006488:	4620      	mov	r0, r4
 800648a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800648e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006492:	b91e      	cbnz	r6, 800649c <__strtok_r+0x20>
 8006494:	b965      	cbnz	r5, 80064b0 <__strtok_r+0x34>
 8006496:	4628      	mov	r0, r5
 8006498:	6015      	str	r5, [r2, #0]
 800649a:	e005      	b.n	80064a8 <__strtok_r+0x2c>
 800649c:	42b5      	cmp	r5, r6
 800649e:	d1f6      	bne.n	800648e <__strtok_r+0x12>
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1f0      	bne.n	8006486 <__strtok_r+0xa>
 80064a4:	6014      	str	r4, [r2, #0]
 80064a6:	7003      	strb	r3, [r0, #0]
 80064a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064aa:	461c      	mov	r4, r3
 80064ac:	e00c      	b.n	80064c8 <__strtok_r+0x4c>
 80064ae:	b915      	cbnz	r5, 80064b6 <__strtok_r+0x3a>
 80064b0:	460e      	mov	r6, r1
 80064b2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80064b6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80064ba:	42ab      	cmp	r3, r5
 80064bc:	d1f7      	bne.n	80064ae <__strtok_r+0x32>
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0f3      	beq.n	80064aa <__strtok_r+0x2e>
 80064c2:	2300      	movs	r3, #0
 80064c4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80064c8:	6014      	str	r4, [r2, #0]
 80064ca:	e7ed      	b.n	80064a8 <__strtok_r+0x2c>

080064cc <_close_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	2300      	movs	r3, #0
 80064d0:	4d05      	ldr	r5, [pc, #20]	; (80064e8 <_close_r+0x1c>)
 80064d2:	4604      	mov	r4, r0
 80064d4:	4608      	mov	r0, r1
 80064d6:	602b      	str	r3, [r5, #0]
 80064d8:	f7fb fa4c 	bl	8001974 <_close>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_close_r+0x1a>
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_close_r+0x1a>
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	20000560 	.word	0x20000560

080064ec <_lseek_r>:
 80064ec:	b538      	push	{r3, r4, r5, lr}
 80064ee:	4604      	mov	r4, r0
 80064f0:	4608      	mov	r0, r1
 80064f2:	4611      	mov	r1, r2
 80064f4:	2200      	movs	r2, #0
 80064f6:	4d05      	ldr	r5, [pc, #20]	; (800650c <_lseek_r+0x20>)
 80064f8:	602a      	str	r2, [r5, #0]
 80064fa:	461a      	mov	r2, r3
 80064fc:	f7fb fa5e 	bl	80019bc <_lseek>
 8006500:	1c43      	adds	r3, r0, #1
 8006502:	d102      	bne.n	800650a <_lseek_r+0x1e>
 8006504:	682b      	ldr	r3, [r5, #0]
 8006506:	b103      	cbz	r3, 800650a <_lseek_r+0x1e>
 8006508:	6023      	str	r3, [r4, #0]
 800650a:	bd38      	pop	{r3, r4, r5, pc}
 800650c:	20000560 	.word	0x20000560

08006510 <_read_r>:
 8006510:	b538      	push	{r3, r4, r5, lr}
 8006512:	4604      	mov	r4, r0
 8006514:	4608      	mov	r0, r1
 8006516:	4611      	mov	r1, r2
 8006518:	2200      	movs	r2, #0
 800651a:	4d05      	ldr	r5, [pc, #20]	; (8006530 <_read_r+0x20>)
 800651c:	602a      	str	r2, [r5, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	f7fb f9ef 	bl	8001902 <_read>
 8006524:	1c43      	adds	r3, r0, #1
 8006526:	d102      	bne.n	800652e <_read_r+0x1e>
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	b103      	cbz	r3, 800652e <_read_r+0x1e>
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	bd38      	pop	{r3, r4, r5, pc}
 8006530:	20000560 	.word	0x20000560

08006534 <_write_r>:
 8006534:	b538      	push	{r3, r4, r5, lr}
 8006536:	4604      	mov	r4, r0
 8006538:	4608      	mov	r0, r1
 800653a:	4611      	mov	r1, r2
 800653c:	2200      	movs	r2, #0
 800653e:	4d05      	ldr	r5, [pc, #20]	; (8006554 <_write_r+0x20>)
 8006540:	602a      	str	r2, [r5, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	f7fb f9fa 	bl	800193c <_write>
 8006548:	1c43      	adds	r3, r0, #1
 800654a:	d102      	bne.n	8006552 <_write_r+0x1e>
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	b103      	cbz	r3, 8006552 <_write_r+0x1e>
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	bd38      	pop	{r3, r4, r5, pc}
 8006554:	20000560 	.word	0x20000560

08006558 <__errno>:
 8006558:	4b01      	ldr	r3, [pc, #4]	; (8006560 <__errno+0x8>)
 800655a:	6818      	ldr	r0, [r3, #0]
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	20000064 	.word	0x20000064

08006564 <__libc_init_array>:
 8006564:	b570      	push	{r4, r5, r6, lr}
 8006566:	2600      	movs	r6, #0
 8006568:	4d0c      	ldr	r5, [pc, #48]	; (800659c <__libc_init_array+0x38>)
 800656a:	4c0d      	ldr	r4, [pc, #52]	; (80065a0 <__libc_init_array+0x3c>)
 800656c:	1b64      	subs	r4, r4, r5
 800656e:	10a4      	asrs	r4, r4, #2
 8006570:	42a6      	cmp	r6, r4
 8006572:	d109      	bne.n	8006588 <__libc_init_array+0x24>
 8006574:	f001 fc08 	bl	8007d88 <_init>
 8006578:	2600      	movs	r6, #0
 800657a:	4d0a      	ldr	r5, [pc, #40]	; (80065a4 <__libc_init_array+0x40>)
 800657c:	4c0a      	ldr	r4, [pc, #40]	; (80065a8 <__libc_init_array+0x44>)
 800657e:	1b64      	subs	r4, r4, r5
 8006580:	10a4      	asrs	r4, r4, #2
 8006582:	42a6      	cmp	r6, r4
 8006584:	d105      	bne.n	8006592 <__libc_init_array+0x2e>
 8006586:	bd70      	pop	{r4, r5, r6, pc}
 8006588:	f855 3b04 	ldr.w	r3, [r5], #4
 800658c:	4798      	blx	r3
 800658e:	3601      	adds	r6, #1
 8006590:	e7ee      	b.n	8006570 <__libc_init_array+0xc>
 8006592:	f855 3b04 	ldr.w	r3, [r5], #4
 8006596:	4798      	blx	r3
 8006598:	3601      	adds	r6, #1
 800659a:	e7f2      	b.n	8006582 <__libc_init_array+0x1e>
 800659c:	080080c0 	.word	0x080080c0
 80065a0:	080080c0 	.word	0x080080c0
 80065a4:	080080c0 	.word	0x080080c0
 80065a8:	080080c4 	.word	0x080080c4

080065ac <__retarget_lock_init_recursive>:
 80065ac:	4770      	bx	lr

080065ae <__retarget_lock_acquire_recursive>:
 80065ae:	4770      	bx	lr

080065b0 <__retarget_lock_release_recursive>:
 80065b0:	4770      	bx	lr
	...

080065b4 <__assert_func>:
 80065b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065b6:	4614      	mov	r4, r2
 80065b8:	461a      	mov	r2, r3
 80065ba:	4b09      	ldr	r3, [pc, #36]	; (80065e0 <__assert_func+0x2c>)
 80065bc:	4605      	mov	r5, r0
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68d8      	ldr	r0, [r3, #12]
 80065c2:	b14c      	cbz	r4, 80065d8 <__assert_func+0x24>
 80065c4:	4b07      	ldr	r3, [pc, #28]	; (80065e4 <__assert_func+0x30>)
 80065c6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80065ca:	9100      	str	r1, [sp, #0]
 80065cc:	462b      	mov	r3, r5
 80065ce:	4906      	ldr	r1, [pc, #24]	; (80065e8 <__assert_func+0x34>)
 80065d0:	f000 ffbe 	bl	8007550 <fiprintf>
 80065d4:	f001 f886 	bl	80076e4 <abort>
 80065d8:	4b04      	ldr	r3, [pc, #16]	; (80065ec <__assert_func+0x38>)
 80065da:	461c      	mov	r4, r3
 80065dc:	e7f3      	b.n	80065c6 <__assert_func+0x12>
 80065de:	bf00      	nop
 80065e0:	20000064 	.word	0x20000064
 80065e4:	08008034 	.word	0x08008034
 80065e8:	08008041 	.word	0x08008041
 80065ec:	0800806f 	.word	0x0800806f

080065f0 <_free_r>:
 80065f0:	b538      	push	{r3, r4, r5, lr}
 80065f2:	4605      	mov	r5, r0
 80065f4:	2900      	cmp	r1, #0
 80065f6:	d040      	beq.n	800667a <_free_r+0x8a>
 80065f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065fc:	1f0c      	subs	r4, r1, #4
 80065fe:	2b00      	cmp	r3, #0
 8006600:	bfb8      	it	lt
 8006602:	18e4      	addlt	r4, r4, r3
 8006604:	f000 f8e4 	bl	80067d0 <__malloc_lock>
 8006608:	4a1c      	ldr	r2, [pc, #112]	; (800667c <_free_r+0x8c>)
 800660a:	6813      	ldr	r3, [r2, #0]
 800660c:	b933      	cbnz	r3, 800661c <_free_r+0x2c>
 800660e:	6063      	str	r3, [r4, #4]
 8006610:	6014      	str	r4, [r2, #0]
 8006612:	4628      	mov	r0, r5
 8006614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006618:	f000 b8e0 	b.w	80067dc <__malloc_unlock>
 800661c:	42a3      	cmp	r3, r4
 800661e:	d908      	bls.n	8006632 <_free_r+0x42>
 8006620:	6820      	ldr	r0, [r4, #0]
 8006622:	1821      	adds	r1, r4, r0
 8006624:	428b      	cmp	r3, r1
 8006626:	bf01      	itttt	eq
 8006628:	6819      	ldreq	r1, [r3, #0]
 800662a:	685b      	ldreq	r3, [r3, #4]
 800662c:	1809      	addeq	r1, r1, r0
 800662e:	6021      	streq	r1, [r4, #0]
 8006630:	e7ed      	b.n	800660e <_free_r+0x1e>
 8006632:	461a      	mov	r2, r3
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	b10b      	cbz	r3, 800663c <_free_r+0x4c>
 8006638:	42a3      	cmp	r3, r4
 800663a:	d9fa      	bls.n	8006632 <_free_r+0x42>
 800663c:	6811      	ldr	r1, [r2, #0]
 800663e:	1850      	adds	r0, r2, r1
 8006640:	42a0      	cmp	r0, r4
 8006642:	d10b      	bne.n	800665c <_free_r+0x6c>
 8006644:	6820      	ldr	r0, [r4, #0]
 8006646:	4401      	add	r1, r0
 8006648:	1850      	adds	r0, r2, r1
 800664a:	4283      	cmp	r3, r0
 800664c:	6011      	str	r1, [r2, #0]
 800664e:	d1e0      	bne.n	8006612 <_free_r+0x22>
 8006650:	6818      	ldr	r0, [r3, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	4408      	add	r0, r1
 8006656:	6010      	str	r0, [r2, #0]
 8006658:	6053      	str	r3, [r2, #4]
 800665a:	e7da      	b.n	8006612 <_free_r+0x22>
 800665c:	d902      	bls.n	8006664 <_free_r+0x74>
 800665e:	230c      	movs	r3, #12
 8006660:	602b      	str	r3, [r5, #0]
 8006662:	e7d6      	b.n	8006612 <_free_r+0x22>
 8006664:	6820      	ldr	r0, [r4, #0]
 8006666:	1821      	adds	r1, r4, r0
 8006668:	428b      	cmp	r3, r1
 800666a:	bf01      	itttt	eq
 800666c:	6819      	ldreq	r1, [r3, #0]
 800666e:	685b      	ldreq	r3, [r3, #4]
 8006670:	1809      	addeq	r1, r1, r0
 8006672:	6021      	streq	r1, [r4, #0]
 8006674:	6063      	str	r3, [r4, #4]
 8006676:	6054      	str	r4, [r2, #4]
 8006678:	e7cb      	b.n	8006612 <_free_r+0x22>
 800667a:	bd38      	pop	{r3, r4, r5, pc}
 800667c:	20000568 	.word	0x20000568

08006680 <malloc>:
 8006680:	4b02      	ldr	r3, [pc, #8]	; (800668c <malloc+0xc>)
 8006682:	4601      	mov	r1, r0
 8006684:	6818      	ldr	r0, [r3, #0]
 8006686:	f000 b823 	b.w	80066d0 <_malloc_r>
 800668a:	bf00      	nop
 800668c:	20000064 	.word	0x20000064

08006690 <sbrk_aligned>:
 8006690:	b570      	push	{r4, r5, r6, lr}
 8006692:	4e0e      	ldr	r6, [pc, #56]	; (80066cc <sbrk_aligned+0x3c>)
 8006694:	460c      	mov	r4, r1
 8006696:	6831      	ldr	r1, [r6, #0]
 8006698:	4605      	mov	r5, r0
 800669a:	b911      	cbnz	r1, 80066a2 <sbrk_aligned+0x12>
 800669c:	f000 fff6 	bl	800768c <_sbrk_r>
 80066a0:	6030      	str	r0, [r6, #0]
 80066a2:	4621      	mov	r1, r4
 80066a4:	4628      	mov	r0, r5
 80066a6:	f000 fff1 	bl	800768c <_sbrk_r>
 80066aa:	1c43      	adds	r3, r0, #1
 80066ac:	d00a      	beq.n	80066c4 <sbrk_aligned+0x34>
 80066ae:	1cc4      	adds	r4, r0, #3
 80066b0:	f024 0403 	bic.w	r4, r4, #3
 80066b4:	42a0      	cmp	r0, r4
 80066b6:	d007      	beq.n	80066c8 <sbrk_aligned+0x38>
 80066b8:	1a21      	subs	r1, r4, r0
 80066ba:	4628      	mov	r0, r5
 80066bc:	f000 ffe6 	bl	800768c <_sbrk_r>
 80066c0:	3001      	adds	r0, #1
 80066c2:	d101      	bne.n	80066c8 <sbrk_aligned+0x38>
 80066c4:	f04f 34ff 	mov.w	r4, #4294967295
 80066c8:	4620      	mov	r0, r4
 80066ca:	bd70      	pop	{r4, r5, r6, pc}
 80066cc:	2000056c 	.word	0x2000056c

080066d0 <_malloc_r>:
 80066d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066d4:	1ccd      	adds	r5, r1, #3
 80066d6:	f025 0503 	bic.w	r5, r5, #3
 80066da:	3508      	adds	r5, #8
 80066dc:	2d0c      	cmp	r5, #12
 80066de:	bf38      	it	cc
 80066e0:	250c      	movcc	r5, #12
 80066e2:	2d00      	cmp	r5, #0
 80066e4:	4607      	mov	r7, r0
 80066e6:	db01      	blt.n	80066ec <_malloc_r+0x1c>
 80066e8:	42a9      	cmp	r1, r5
 80066ea:	d905      	bls.n	80066f8 <_malloc_r+0x28>
 80066ec:	230c      	movs	r3, #12
 80066ee:	2600      	movs	r6, #0
 80066f0:	603b      	str	r3, [r7, #0]
 80066f2:	4630      	mov	r0, r6
 80066f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80067cc <_malloc_r+0xfc>
 80066fc:	f000 f868 	bl	80067d0 <__malloc_lock>
 8006700:	f8d8 3000 	ldr.w	r3, [r8]
 8006704:	461c      	mov	r4, r3
 8006706:	bb5c      	cbnz	r4, 8006760 <_malloc_r+0x90>
 8006708:	4629      	mov	r1, r5
 800670a:	4638      	mov	r0, r7
 800670c:	f7ff ffc0 	bl	8006690 <sbrk_aligned>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	4604      	mov	r4, r0
 8006714:	d155      	bne.n	80067c2 <_malloc_r+0xf2>
 8006716:	f8d8 4000 	ldr.w	r4, [r8]
 800671a:	4626      	mov	r6, r4
 800671c:	2e00      	cmp	r6, #0
 800671e:	d145      	bne.n	80067ac <_malloc_r+0xdc>
 8006720:	2c00      	cmp	r4, #0
 8006722:	d048      	beq.n	80067b6 <_malloc_r+0xe6>
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	4631      	mov	r1, r6
 8006728:	4638      	mov	r0, r7
 800672a:	eb04 0903 	add.w	r9, r4, r3
 800672e:	f000 ffad 	bl	800768c <_sbrk_r>
 8006732:	4581      	cmp	r9, r0
 8006734:	d13f      	bne.n	80067b6 <_malloc_r+0xe6>
 8006736:	6821      	ldr	r1, [r4, #0]
 8006738:	4638      	mov	r0, r7
 800673a:	1a6d      	subs	r5, r5, r1
 800673c:	4629      	mov	r1, r5
 800673e:	f7ff ffa7 	bl	8006690 <sbrk_aligned>
 8006742:	3001      	adds	r0, #1
 8006744:	d037      	beq.n	80067b6 <_malloc_r+0xe6>
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	442b      	add	r3, r5
 800674a:	6023      	str	r3, [r4, #0]
 800674c:	f8d8 3000 	ldr.w	r3, [r8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d038      	beq.n	80067c6 <_malloc_r+0xf6>
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	42a2      	cmp	r2, r4
 8006758:	d12b      	bne.n	80067b2 <_malloc_r+0xe2>
 800675a:	2200      	movs	r2, #0
 800675c:	605a      	str	r2, [r3, #4]
 800675e:	e00f      	b.n	8006780 <_malloc_r+0xb0>
 8006760:	6822      	ldr	r2, [r4, #0]
 8006762:	1b52      	subs	r2, r2, r5
 8006764:	d41f      	bmi.n	80067a6 <_malloc_r+0xd6>
 8006766:	2a0b      	cmp	r2, #11
 8006768:	d917      	bls.n	800679a <_malloc_r+0xca>
 800676a:	1961      	adds	r1, r4, r5
 800676c:	42a3      	cmp	r3, r4
 800676e:	6025      	str	r5, [r4, #0]
 8006770:	bf18      	it	ne
 8006772:	6059      	strne	r1, [r3, #4]
 8006774:	6863      	ldr	r3, [r4, #4]
 8006776:	bf08      	it	eq
 8006778:	f8c8 1000 	streq.w	r1, [r8]
 800677c:	5162      	str	r2, [r4, r5]
 800677e:	604b      	str	r3, [r1, #4]
 8006780:	4638      	mov	r0, r7
 8006782:	f104 060b 	add.w	r6, r4, #11
 8006786:	f000 f829 	bl	80067dc <__malloc_unlock>
 800678a:	f026 0607 	bic.w	r6, r6, #7
 800678e:	1d23      	adds	r3, r4, #4
 8006790:	1af2      	subs	r2, r6, r3
 8006792:	d0ae      	beq.n	80066f2 <_malloc_r+0x22>
 8006794:	1b9b      	subs	r3, r3, r6
 8006796:	50a3      	str	r3, [r4, r2]
 8006798:	e7ab      	b.n	80066f2 <_malloc_r+0x22>
 800679a:	42a3      	cmp	r3, r4
 800679c:	6862      	ldr	r2, [r4, #4]
 800679e:	d1dd      	bne.n	800675c <_malloc_r+0x8c>
 80067a0:	f8c8 2000 	str.w	r2, [r8]
 80067a4:	e7ec      	b.n	8006780 <_malloc_r+0xb0>
 80067a6:	4623      	mov	r3, r4
 80067a8:	6864      	ldr	r4, [r4, #4]
 80067aa:	e7ac      	b.n	8006706 <_malloc_r+0x36>
 80067ac:	4634      	mov	r4, r6
 80067ae:	6876      	ldr	r6, [r6, #4]
 80067b0:	e7b4      	b.n	800671c <_malloc_r+0x4c>
 80067b2:	4613      	mov	r3, r2
 80067b4:	e7cc      	b.n	8006750 <_malloc_r+0x80>
 80067b6:	230c      	movs	r3, #12
 80067b8:	4638      	mov	r0, r7
 80067ba:	603b      	str	r3, [r7, #0]
 80067bc:	f000 f80e 	bl	80067dc <__malloc_unlock>
 80067c0:	e797      	b.n	80066f2 <_malloc_r+0x22>
 80067c2:	6025      	str	r5, [r4, #0]
 80067c4:	e7dc      	b.n	8006780 <_malloc_r+0xb0>
 80067c6:	605b      	str	r3, [r3, #4]
 80067c8:	deff      	udf	#255	; 0xff
 80067ca:	bf00      	nop
 80067cc:	20000568 	.word	0x20000568

080067d0 <__malloc_lock>:
 80067d0:	4801      	ldr	r0, [pc, #4]	; (80067d8 <__malloc_lock+0x8>)
 80067d2:	f7ff beec 	b.w	80065ae <__retarget_lock_acquire_recursive>
 80067d6:	bf00      	nop
 80067d8:	20000564 	.word	0x20000564

080067dc <__malloc_unlock>:
 80067dc:	4801      	ldr	r0, [pc, #4]	; (80067e4 <__malloc_unlock+0x8>)
 80067de:	f7ff bee7 	b.w	80065b0 <__retarget_lock_release_recursive>
 80067e2:	bf00      	nop
 80067e4:	20000564 	.word	0x20000564

080067e8 <__ssputs_r>:
 80067e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067ec:	461f      	mov	r7, r3
 80067ee:	688e      	ldr	r6, [r1, #8]
 80067f0:	4682      	mov	sl, r0
 80067f2:	42be      	cmp	r6, r7
 80067f4:	460c      	mov	r4, r1
 80067f6:	4690      	mov	r8, r2
 80067f8:	680b      	ldr	r3, [r1, #0]
 80067fa:	d82c      	bhi.n	8006856 <__ssputs_r+0x6e>
 80067fc:	898a      	ldrh	r2, [r1, #12]
 80067fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006802:	d026      	beq.n	8006852 <__ssputs_r+0x6a>
 8006804:	6965      	ldr	r5, [r4, #20]
 8006806:	6909      	ldr	r1, [r1, #16]
 8006808:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800680c:	eba3 0901 	sub.w	r9, r3, r1
 8006810:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006814:	1c7b      	adds	r3, r7, #1
 8006816:	444b      	add	r3, r9
 8006818:	106d      	asrs	r5, r5, #1
 800681a:	429d      	cmp	r5, r3
 800681c:	bf38      	it	cc
 800681e:	461d      	movcc	r5, r3
 8006820:	0553      	lsls	r3, r2, #21
 8006822:	d527      	bpl.n	8006874 <__ssputs_r+0x8c>
 8006824:	4629      	mov	r1, r5
 8006826:	f7ff ff53 	bl	80066d0 <_malloc_r>
 800682a:	4606      	mov	r6, r0
 800682c:	b360      	cbz	r0, 8006888 <__ssputs_r+0xa0>
 800682e:	464a      	mov	r2, r9
 8006830:	6921      	ldr	r1, [r4, #16]
 8006832:	f000 ff49 	bl	80076c8 <memcpy>
 8006836:	89a3      	ldrh	r3, [r4, #12]
 8006838:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800683c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006840:	81a3      	strh	r3, [r4, #12]
 8006842:	6126      	str	r6, [r4, #16]
 8006844:	444e      	add	r6, r9
 8006846:	6026      	str	r6, [r4, #0]
 8006848:	463e      	mov	r6, r7
 800684a:	6165      	str	r5, [r4, #20]
 800684c:	eba5 0509 	sub.w	r5, r5, r9
 8006850:	60a5      	str	r5, [r4, #8]
 8006852:	42be      	cmp	r6, r7
 8006854:	d900      	bls.n	8006858 <__ssputs_r+0x70>
 8006856:	463e      	mov	r6, r7
 8006858:	4632      	mov	r2, r6
 800685a:	4641      	mov	r1, r8
 800685c:	6820      	ldr	r0, [r4, #0]
 800685e:	f000 fefa 	bl	8007656 <memmove>
 8006862:	2000      	movs	r0, #0
 8006864:	68a3      	ldr	r3, [r4, #8]
 8006866:	1b9b      	subs	r3, r3, r6
 8006868:	60a3      	str	r3, [r4, #8]
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	4433      	add	r3, r6
 800686e:	6023      	str	r3, [r4, #0]
 8006870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006874:	462a      	mov	r2, r5
 8006876:	f000 ff3c 	bl	80076f2 <_realloc_r>
 800687a:	4606      	mov	r6, r0
 800687c:	2800      	cmp	r0, #0
 800687e:	d1e0      	bne.n	8006842 <__ssputs_r+0x5a>
 8006880:	4650      	mov	r0, sl
 8006882:	6921      	ldr	r1, [r4, #16]
 8006884:	f7ff feb4 	bl	80065f0 <_free_r>
 8006888:	230c      	movs	r3, #12
 800688a:	f8ca 3000 	str.w	r3, [sl]
 800688e:	89a3      	ldrh	r3, [r4, #12]
 8006890:	f04f 30ff 	mov.w	r0, #4294967295
 8006894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006898:	81a3      	strh	r3, [r4, #12]
 800689a:	e7e9      	b.n	8006870 <__ssputs_r+0x88>

0800689c <_svfiprintf_r>:
 800689c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a0:	4698      	mov	r8, r3
 80068a2:	898b      	ldrh	r3, [r1, #12]
 80068a4:	4607      	mov	r7, r0
 80068a6:	061b      	lsls	r3, r3, #24
 80068a8:	460d      	mov	r5, r1
 80068aa:	4614      	mov	r4, r2
 80068ac:	b09d      	sub	sp, #116	; 0x74
 80068ae:	d50e      	bpl.n	80068ce <_svfiprintf_r+0x32>
 80068b0:	690b      	ldr	r3, [r1, #16]
 80068b2:	b963      	cbnz	r3, 80068ce <_svfiprintf_r+0x32>
 80068b4:	2140      	movs	r1, #64	; 0x40
 80068b6:	f7ff ff0b 	bl	80066d0 <_malloc_r>
 80068ba:	6028      	str	r0, [r5, #0]
 80068bc:	6128      	str	r0, [r5, #16]
 80068be:	b920      	cbnz	r0, 80068ca <_svfiprintf_r+0x2e>
 80068c0:	230c      	movs	r3, #12
 80068c2:	603b      	str	r3, [r7, #0]
 80068c4:	f04f 30ff 	mov.w	r0, #4294967295
 80068c8:	e0d0      	b.n	8006a6c <_svfiprintf_r+0x1d0>
 80068ca:	2340      	movs	r3, #64	; 0x40
 80068cc:	616b      	str	r3, [r5, #20]
 80068ce:	2300      	movs	r3, #0
 80068d0:	9309      	str	r3, [sp, #36]	; 0x24
 80068d2:	2320      	movs	r3, #32
 80068d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068d8:	2330      	movs	r3, #48	; 0x30
 80068da:	f04f 0901 	mov.w	r9, #1
 80068de:	f8cd 800c 	str.w	r8, [sp, #12]
 80068e2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006a84 <_svfiprintf_r+0x1e8>
 80068e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068ea:	4623      	mov	r3, r4
 80068ec:	469a      	mov	sl, r3
 80068ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068f2:	b10a      	cbz	r2, 80068f8 <_svfiprintf_r+0x5c>
 80068f4:	2a25      	cmp	r2, #37	; 0x25
 80068f6:	d1f9      	bne.n	80068ec <_svfiprintf_r+0x50>
 80068f8:	ebba 0b04 	subs.w	fp, sl, r4
 80068fc:	d00b      	beq.n	8006916 <_svfiprintf_r+0x7a>
 80068fe:	465b      	mov	r3, fp
 8006900:	4622      	mov	r2, r4
 8006902:	4629      	mov	r1, r5
 8006904:	4638      	mov	r0, r7
 8006906:	f7ff ff6f 	bl	80067e8 <__ssputs_r>
 800690a:	3001      	adds	r0, #1
 800690c:	f000 80a9 	beq.w	8006a62 <_svfiprintf_r+0x1c6>
 8006910:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006912:	445a      	add	r2, fp
 8006914:	9209      	str	r2, [sp, #36]	; 0x24
 8006916:	f89a 3000 	ldrb.w	r3, [sl]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 80a1 	beq.w	8006a62 <_svfiprintf_r+0x1c6>
 8006920:	2300      	movs	r3, #0
 8006922:	f04f 32ff 	mov.w	r2, #4294967295
 8006926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800692a:	f10a 0a01 	add.w	sl, sl, #1
 800692e:	9304      	str	r3, [sp, #16]
 8006930:	9307      	str	r3, [sp, #28]
 8006932:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006936:	931a      	str	r3, [sp, #104]	; 0x68
 8006938:	4654      	mov	r4, sl
 800693a:	2205      	movs	r2, #5
 800693c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006940:	4850      	ldr	r0, [pc, #320]	; (8006a84 <_svfiprintf_r+0x1e8>)
 8006942:	f000 feb3 	bl	80076ac <memchr>
 8006946:	9a04      	ldr	r2, [sp, #16]
 8006948:	b9d8      	cbnz	r0, 8006982 <_svfiprintf_r+0xe6>
 800694a:	06d0      	lsls	r0, r2, #27
 800694c:	bf44      	itt	mi
 800694e:	2320      	movmi	r3, #32
 8006950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006954:	0711      	lsls	r1, r2, #28
 8006956:	bf44      	itt	mi
 8006958:	232b      	movmi	r3, #43	; 0x2b
 800695a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800695e:	f89a 3000 	ldrb.w	r3, [sl]
 8006962:	2b2a      	cmp	r3, #42	; 0x2a
 8006964:	d015      	beq.n	8006992 <_svfiprintf_r+0xf6>
 8006966:	4654      	mov	r4, sl
 8006968:	2000      	movs	r0, #0
 800696a:	f04f 0c0a 	mov.w	ip, #10
 800696e:	9a07      	ldr	r2, [sp, #28]
 8006970:	4621      	mov	r1, r4
 8006972:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006976:	3b30      	subs	r3, #48	; 0x30
 8006978:	2b09      	cmp	r3, #9
 800697a:	d94d      	bls.n	8006a18 <_svfiprintf_r+0x17c>
 800697c:	b1b0      	cbz	r0, 80069ac <_svfiprintf_r+0x110>
 800697e:	9207      	str	r2, [sp, #28]
 8006980:	e014      	b.n	80069ac <_svfiprintf_r+0x110>
 8006982:	eba0 0308 	sub.w	r3, r0, r8
 8006986:	fa09 f303 	lsl.w	r3, r9, r3
 800698a:	4313      	orrs	r3, r2
 800698c:	46a2      	mov	sl, r4
 800698e:	9304      	str	r3, [sp, #16]
 8006990:	e7d2      	b.n	8006938 <_svfiprintf_r+0x9c>
 8006992:	9b03      	ldr	r3, [sp, #12]
 8006994:	1d19      	adds	r1, r3, #4
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	9103      	str	r1, [sp, #12]
 800699a:	2b00      	cmp	r3, #0
 800699c:	bfbb      	ittet	lt
 800699e:	425b      	neglt	r3, r3
 80069a0:	f042 0202 	orrlt.w	r2, r2, #2
 80069a4:	9307      	strge	r3, [sp, #28]
 80069a6:	9307      	strlt	r3, [sp, #28]
 80069a8:	bfb8      	it	lt
 80069aa:	9204      	strlt	r2, [sp, #16]
 80069ac:	7823      	ldrb	r3, [r4, #0]
 80069ae:	2b2e      	cmp	r3, #46	; 0x2e
 80069b0:	d10c      	bne.n	80069cc <_svfiprintf_r+0x130>
 80069b2:	7863      	ldrb	r3, [r4, #1]
 80069b4:	2b2a      	cmp	r3, #42	; 0x2a
 80069b6:	d134      	bne.n	8006a22 <_svfiprintf_r+0x186>
 80069b8:	9b03      	ldr	r3, [sp, #12]
 80069ba:	3402      	adds	r4, #2
 80069bc:	1d1a      	adds	r2, r3, #4
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	9203      	str	r2, [sp, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	bfb8      	it	lt
 80069c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80069ca:	9305      	str	r3, [sp, #20]
 80069cc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006a88 <_svfiprintf_r+0x1ec>
 80069d0:	2203      	movs	r2, #3
 80069d2:	4650      	mov	r0, sl
 80069d4:	7821      	ldrb	r1, [r4, #0]
 80069d6:	f000 fe69 	bl	80076ac <memchr>
 80069da:	b138      	cbz	r0, 80069ec <_svfiprintf_r+0x150>
 80069dc:	2240      	movs	r2, #64	; 0x40
 80069de:	9b04      	ldr	r3, [sp, #16]
 80069e0:	eba0 000a 	sub.w	r0, r0, sl
 80069e4:	4082      	lsls	r2, r0
 80069e6:	4313      	orrs	r3, r2
 80069e8:	3401      	adds	r4, #1
 80069ea:	9304      	str	r3, [sp, #16]
 80069ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069f0:	2206      	movs	r2, #6
 80069f2:	4826      	ldr	r0, [pc, #152]	; (8006a8c <_svfiprintf_r+0x1f0>)
 80069f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069f8:	f000 fe58 	bl	80076ac <memchr>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	d038      	beq.n	8006a72 <_svfiprintf_r+0x1d6>
 8006a00:	4b23      	ldr	r3, [pc, #140]	; (8006a90 <_svfiprintf_r+0x1f4>)
 8006a02:	bb1b      	cbnz	r3, 8006a4c <_svfiprintf_r+0x1b0>
 8006a04:	9b03      	ldr	r3, [sp, #12]
 8006a06:	3307      	adds	r3, #7
 8006a08:	f023 0307 	bic.w	r3, r3, #7
 8006a0c:	3308      	adds	r3, #8
 8006a0e:	9303      	str	r3, [sp, #12]
 8006a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a12:	4433      	add	r3, r6
 8006a14:	9309      	str	r3, [sp, #36]	; 0x24
 8006a16:	e768      	b.n	80068ea <_svfiprintf_r+0x4e>
 8006a18:	460c      	mov	r4, r1
 8006a1a:	2001      	movs	r0, #1
 8006a1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a20:	e7a6      	b.n	8006970 <_svfiprintf_r+0xd4>
 8006a22:	2300      	movs	r3, #0
 8006a24:	f04f 0c0a 	mov.w	ip, #10
 8006a28:	4619      	mov	r1, r3
 8006a2a:	3401      	adds	r4, #1
 8006a2c:	9305      	str	r3, [sp, #20]
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a34:	3a30      	subs	r2, #48	; 0x30
 8006a36:	2a09      	cmp	r2, #9
 8006a38:	d903      	bls.n	8006a42 <_svfiprintf_r+0x1a6>
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0c6      	beq.n	80069cc <_svfiprintf_r+0x130>
 8006a3e:	9105      	str	r1, [sp, #20]
 8006a40:	e7c4      	b.n	80069cc <_svfiprintf_r+0x130>
 8006a42:	4604      	mov	r4, r0
 8006a44:	2301      	movs	r3, #1
 8006a46:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a4a:	e7f0      	b.n	8006a2e <_svfiprintf_r+0x192>
 8006a4c:	ab03      	add	r3, sp, #12
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	462a      	mov	r2, r5
 8006a52:	4638      	mov	r0, r7
 8006a54:	4b0f      	ldr	r3, [pc, #60]	; (8006a94 <_svfiprintf_r+0x1f8>)
 8006a56:	a904      	add	r1, sp, #16
 8006a58:	f3af 8000 	nop.w
 8006a5c:	1c42      	adds	r2, r0, #1
 8006a5e:	4606      	mov	r6, r0
 8006a60:	d1d6      	bne.n	8006a10 <_svfiprintf_r+0x174>
 8006a62:	89ab      	ldrh	r3, [r5, #12]
 8006a64:	065b      	lsls	r3, r3, #25
 8006a66:	f53f af2d 	bmi.w	80068c4 <_svfiprintf_r+0x28>
 8006a6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a6c:	b01d      	add	sp, #116	; 0x74
 8006a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a72:	ab03      	add	r3, sp, #12
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	462a      	mov	r2, r5
 8006a78:	4638      	mov	r0, r7
 8006a7a:	4b06      	ldr	r3, [pc, #24]	; (8006a94 <_svfiprintf_r+0x1f8>)
 8006a7c:	a904      	add	r1, sp, #16
 8006a7e:	f000 fa4f 	bl	8006f20 <_printf_i>
 8006a82:	e7eb      	b.n	8006a5c <_svfiprintf_r+0x1c0>
 8006a84:	08008070 	.word	0x08008070
 8006a88:	08008076 	.word	0x08008076
 8006a8c:	0800807a 	.word	0x0800807a
 8006a90:	00000000 	.word	0x00000000
 8006a94:	080067e9 	.word	0x080067e9

08006a98 <_sungetc_r>:
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	1c4b      	adds	r3, r1, #1
 8006a9c:	4614      	mov	r4, r2
 8006a9e:	d103      	bne.n	8006aa8 <_sungetc_r+0x10>
 8006aa0:	f04f 35ff 	mov.w	r5, #4294967295
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	bd38      	pop	{r3, r4, r5, pc}
 8006aa8:	8993      	ldrh	r3, [r2, #12]
 8006aaa:	b2cd      	uxtb	r5, r1
 8006aac:	f023 0320 	bic.w	r3, r3, #32
 8006ab0:	8193      	strh	r3, [r2, #12]
 8006ab2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ab4:	6852      	ldr	r2, [r2, #4]
 8006ab6:	b18b      	cbz	r3, 8006adc <_sungetc_r+0x44>
 8006ab8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006aba:	4293      	cmp	r3, r2
 8006abc:	dd08      	ble.n	8006ad0 <_sungetc_r+0x38>
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	1e5a      	subs	r2, r3, #1
 8006ac2:	6022      	str	r2, [r4, #0]
 8006ac4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006ac8:	6863      	ldr	r3, [r4, #4]
 8006aca:	3301      	adds	r3, #1
 8006acc:	6063      	str	r3, [r4, #4]
 8006ace:	e7e9      	b.n	8006aa4 <_sungetc_r+0xc>
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	f000 fd88 	bl	80075e6 <__submore>
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	d0f1      	beq.n	8006abe <_sungetc_r+0x26>
 8006ada:	e7e1      	b.n	8006aa0 <_sungetc_r+0x8>
 8006adc:	6921      	ldr	r1, [r4, #16]
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	b151      	cbz	r1, 8006af8 <_sungetc_r+0x60>
 8006ae2:	4299      	cmp	r1, r3
 8006ae4:	d208      	bcs.n	8006af8 <_sungetc_r+0x60>
 8006ae6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006aea:	42a9      	cmp	r1, r5
 8006aec:	d104      	bne.n	8006af8 <_sungetc_r+0x60>
 8006aee:	3b01      	subs	r3, #1
 8006af0:	3201      	adds	r2, #1
 8006af2:	6023      	str	r3, [r4, #0]
 8006af4:	6062      	str	r2, [r4, #4]
 8006af6:	e7d5      	b.n	8006aa4 <_sungetc_r+0xc>
 8006af8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006afc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b00:	6363      	str	r3, [r4, #52]	; 0x34
 8006b02:	2303      	movs	r3, #3
 8006b04:	63a3      	str	r3, [r4, #56]	; 0x38
 8006b06:	4623      	mov	r3, r4
 8006b08:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006b0c:	6023      	str	r3, [r4, #0]
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e7dc      	b.n	8006acc <_sungetc_r+0x34>

08006b12 <__ssrefill_r>:
 8006b12:	b510      	push	{r4, lr}
 8006b14:	460c      	mov	r4, r1
 8006b16:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006b18:	b169      	cbz	r1, 8006b36 <__ssrefill_r+0x24>
 8006b1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b1e:	4299      	cmp	r1, r3
 8006b20:	d001      	beq.n	8006b26 <__ssrefill_r+0x14>
 8006b22:	f7ff fd65 	bl	80065f0 <_free_r>
 8006b26:	2000      	movs	r0, #0
 8006b28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b2a:	6360      	str	r0, [r4, #52]	; 0x34
 8006b2c:	6063      	str	r3, [r4, #4]
 8006b2e:	b113      	cbz	r3, 8006b36 <__ssrefill_r+0x24>
 8006b30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006b32:	6023      	str	r3, [r4, #0]
 8006b34:	bd10      	pop	{r4, pc}
 8006b36:	6923      	ldr	r3, [r4, #16]
 8006b38:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	6063      	str	r3, [r4, #4]
 8006b42:	89a3      	ldrh	r3, [r4, #12]
 8006b44:	f043 0320 	orr.w	r3, r3, #32
 8006b48:	81a3      	strh	r3, [r4, #12]
 8006b4a:	e7f3      	b.n	8006b34 <__ssrefill_r+0x22>

08006b4c <__ssvfiscanf_r>:
 8006b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b50:	460c      	mov	r4, r1
 8006b52:	2100      	movs	r1, #0
 8006b54:	4606      	mov	r6, r0
 8006b56:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006b5a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006b5e:	49a6      	ldr	r1, [pc, #664]	; (8006df8 <__ssvfiscanf_r+0x2ac>)
 8006b60:	f10d 0804 	add.w	r8, sp, #4
 8006b64:	91a0      	str	r1, [sp, #640]	; 0x280
 8006b66:	49a5      	ldr	r1, [pc, #660]	; (8006dfc <__ssvfiscanf_r+0x2b0>)
 8006b68:	4fa5      	ldr	r7, [pc, #660]	; (8006e00 <__ssvfiscanf_r+0x2b4>)
 8006b6a:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006e04 <__ssvfiscanf_r+0x2b8>
 8006b6e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006b72:	91a1      	str	r1, [sp, #644]	; 0x284
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	7813      	ldrb	r3, [r2, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 815a 	beq.w	8006e32 <__ssvfiscanf_r+0x2e6>
 8006b7e:	5cf9      	ldrb	r1, [r7, r3]
 8006b80:	1c55      	adds	r5, r2, #1
 8006b82:	f011 0108 	ands.w	r1, r1, #8
 8006b86:	d019      	beq.n	8006bbc <__ssvfiscanf_r+0x70>
 8006b88:	6863      	ldr	r3, [r4, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	dd0f      	ble.n	8006bae <__ssvfiscanf_r+0x62>
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	781a      	ldrb	r2, [r3, #0]
 8006b92:	5cba      	ldrb	r2, [r7, r2]
 8006b94:	0712      	lsls	r2, r2, #28
 8006b96:	d401      	bmi.n	8006b9c <__ssvfiscanf_r+0x50>
 8006b98:	462a      	mov	r2, r5
 8006b9a:	e7ec      	b.n	8006b76 <__ssvfiscanf_r+0x2a>
 8006b9c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	3201      	adds	r2, #1
 8006ba2:	9245      	str	r2, [sp, #276]	; 0x114
 8006ba4:	6862      	ldr	r2, [r4, #4]
 8006ba6:	6023      	str	r3, [r4, #0]
 8006ba8:	3a01      	subs	r2, #1
 8006baa:	6062      	str	r2, [r4, #4]
 8006bac:	e7ec      	b.n	8006b88 <__ssvfiscanf_r+0x3c>
 8006bae:	4621      	mov	r1, r4
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006bb4:	4798      	blx	r3
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d0e9      	beq.n	8006b8e <__ssvfiscanf_r+0x42>
 8006bba:	e7ed      	b.n	8006b98 <__ssvfiscanf_r+0x4c>
 8006bbc:	2b25      	cmp	r3, #37	; 0x25
 8006bbe:	d012      	beq.n	8006be6 <__ssvfiscanf_r+0x9a>
 8006bc0:	469a      	mov	sl, r3
 8006bc2:	6863      	ldr	r3, [r4, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f340 8092 	ble.w	8006cee <__ssvfiscanf_r+0x1a2>
 8006bca:	6822      	ldr	r2, [r4, #0]
 8006bcc:	7813      	ldrb	r3, [r2, #0]
 8006bce:	4553      	cmp	r3, sl
 8006bd0:	f040 812f 	bne.w	8006e32 <__ssvfiscanf_r+0x2e6>
 8006bd4:	6863      	ldr	r3, [r4, #4]
 8006bd6:	3201      	adds	r2, #1
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	6063      	str	r3, [r4, #4]
 8006bdc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006bde:	6022      	str	r2, [r4, #0]
 8006be0:	3301      	adds	r3, #1
 8006be2:	9345      	str	r3, [sp, #276]	; 0x114
 8006be4:	e7d8      	b.n	8006b98 <__ssvfiscanf_r+0x4c>
 8006be6:	9141      	str	r1, [sp, #260]	; 0x104
 8006be8:	9143      	str	r1, [sp, #268]	; 0x10c
 8006bea:	7853      	ldrb	r3, [r2, #1]
 8006bec:	2b2a      	cmp	r3, #42	; 0x2a
 8006bee:	bf04      	itt	eq
 8006bf0:	2310      	moveq	r3, #16
 8006bf2:	1c95      	addeq	r5, r2, #2
 8006bf4:	f04f 020a 	mov.w	r2, #10
 8006bf8:	bf08      	it	eq
 8006bfa:	9341      	streq	r3, [sp, #260]	; 0x104
 8006bfc:	46aa      	mov	sl, r5
 8006bfe:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006c02:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006c06:	2b09      	cmp	r3, #9
 8006c08:	d91c      	bls.n	8006c44 <__ssvfiscanf_r+0xf8>
 8006c0a:	2203      	movs	r2, #3
 8006c0c:	487d      	ldr	r0, [pc, #500]	; (8006e04 <__ssvfiscanf_r+0x2b8>)
 8006c0e:	f000 fd4d 	bl	80076ac <memchr>
 8006c12:	b138      	cbz	r0, 8006c24 <__ssvfiscanf_r+0xd8>
 8006c14:	2301      	movs	r3, #1
 8006c16:	4655      	mov	r5, sl
 8006c18:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006c1a:	eba0 0009 	sub.w	r0, r0, r9
 8006c1e:	4083      	lsls	r3, r0
 8006c20:	4313      	orrs	r3, r2
 8006c22:	9341      	str	r3, [sp, #260]	; 0x104
 8006c24:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c28:	2b78      	cmp	r3, #120	; 0x78
 8006c2a:	d806      	bhi.n	8006c3a <__ssvfiscanf_r+0xee>
 8006c2c:	2b57      	cmp	r3, #87	; 0x57
 8006c2e:	d810      	bhi.n	8006c52 <__ssvfiscanf_r+0x106>
 8006c30:	2b25      	cmp	r3, #37	; 0x25
 8006c32:	d0c5      	beq.n	8006bc0 <__ssvfiscanf_r+0x74>
 8006c34:	d856      	bhi.n	8006ce4 <__ssvfiscanf_r+0x198>
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d064      	beq.n	8006d04 <__ssvfiscanf_r+0x1b8>
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	9347      	str	r3, [sp, #284]	; 0x11c
 8006c3e:	230a      	movs	r3, #10
 8006c40:	9342      	str	r3, [sp, #264]	; 0x108
 8006c42:	e075      	b.n	8006d30 <__ssvfiscanf_r+0x1e4>
 8006c44:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006c46:	4655      	mov	r5, sl
 8006c48:	fb02 1103 	mla	r1, r2, r3, r1
 8006c4c:	3930      	subs	r1, #48	; 0x30
 8006c4e:	9143      	str	r1, [sp, #268]	; 0x10c
 8006c50:	e7d4      	b.n	8006bfc <__ssvfiscanf_r+0xb0>
 8006c52:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006c56:	2a20      	cmp	r2, #32
 8006c58:	d8ef      	bhi.n	8006c3a <__ssvfiscanf_r+0xee>
 8006c5a:	a101      	add	r1, pc, #4	; (adr r1, 8006c60 <__ssvfiscanf_r+0x114>)
 8006c5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006c60:	08006d13 	.word	0x08006d13
 8006c64:	08006c3b 	.word	0x08006c3b
 8006c68:	08006c3b 	.word	0x08006c3b
 8006c6c:	08006d71 	.word	0x08006d71
 8006c70:	08006c3b 	.word	0x08006c3b
 8006c74:	08006c3b 	.word	0x08006c3b
 8006c78:	08006c3b 	.word	0x08006c3b
 8006c7c:	08006c3b 	.word	0x08006c3b
 8006c80:	08006c3b 	.word	0x08006c3b
 8006c84:	08006c3b 	.word	0x08006c3b
 8006c88:	08006c3b 	.word	0x08006c3b
 8006c8c:	08006d87 	.word	0x08006d87
 8006c90:	08006d6d 	.word	0x08006d6d
 8006c94:	08006ceb 	.word	0x08006ceb
 8006c98:	08006ceb 	.word	0x08006ceb
 8006c9c:	08006ceb 	.word	0x08006ceb
 8006ca0:	08006c3b 	.word	0x08006c3b
 8006ca4:	08006d29 	.word	0x08006d29
 8006ca8:	08006c3b 	.word	0x08006c3b
 8006cac:	08006c3b 	.word	0x08006c3b
 8006cb0:	08006c3b 	.word	0x08006c3b
 8006cb4:	08006c3b 	.word	0x08006c3b
 8006cb8:	08006d97 	.word	0x08006d97
 8006cbc:	08006d65 	.word	0x08006d65
 8006cc0:	08006d0b 	.word	0x08006d0b
 8006cc4:	08006c3b 	.word	0x08006c3b
 8006cc8:	08006c3b 	.word	0x08006c3b
 8006ccc:	08006d93 	.word	0x08006d93
 8006cd0:	08006c3b 	.word	0x08006c3b
 8006cd4:	08006d6d 	.word	0x08006d6d
 8006cd8:	08006c3b 	.word	0x08006c3b
 8006cdc:	08006c3b 	.word	0x08006c3b
 8006ce0:	08006d13 	.word	0x08006d13
 8006ce4:	3b45      	subs	r3, #69	; 0x45
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d8a7      	bhi.n	8006c3a <__ssvfiscanf_r+0xee>
 8006cea:	2305      	movs	r3, #5
 8006cec:	e01f      	b.n	8006d2e <__ssvfiscanf_r+0x1e2>
 8006cee:	4621      	mov	r1, r4
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006cf4:	4798      	blx	r3
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f43f af67 	beq.w	8006bca <__ssvfiscanf_r+0x7e>
 8006cfc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	f040 808d 	bne.w	8006e1e <__ssvfiscanf_r+0x2d2>
 8006d04:	f04f 30ff 	mov.w	r0, #4294967295
 8006d08:	e08f      	b.n	8006e2a <__ssvfiscanf_r+0x2de>
 8006d0a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006d0c:	f042 0220 	orr.w	r2, r2, #32
 8006d10:	9241      	str	r2, [sp, #260]	; 0x104
 8006d12:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d18:	9241      	str	r2, [sp, #260]	; 0x104
 8006d1a:	2210      	movs	r2, #16
 8006d1c:	2b6f      	cmp	r3, #111	; 0x6f
 8006d1e:	bf34      	ite	cc
 8006d20:	2303      	movcc	r3, #3
 8006d22:	2304      	movcs	r3, #4
 8006d24:	9242      	str	r2, [sp, #264]	; 0x108
 8006d26:	e002      	b.n	8006d2e <__ssvfiscanf_r+0x1e2>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	9342      	str	r3, [sp, #264]	; 0x108
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	9347      	str	r3, [sp, #284]	; 0x11c
 8006d30:	6863      	ldr	r3, [r4, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	dd3d      	ble.n	8006db2 <__ssvfiscanf_r+0x266>
 8006d36:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006d38:	0659      	lsls	r1, r3, #25
 8006d3a:	d404      	bmi.n	8006d46 <__ssvfiscanf_r+0x1fa>
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	781a      	ldrb	r2, [r3, #0]
 8006d40:	5cba      	ldrb	r2, [r7, r2]
 8006d42:	0712      	lsls	r2, r2, #28
 8006d44:	d43c      	bmi.n	8006dc0 <__ssvfiscanf_r+0x274>
 8006d46:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	dc4b      	bgt.n	8006de4 <__ssvfiscanf_r+0x298>
 8006d4c:	466b      	mov	r3, sp
 8006d4e:	4622      	mov	r2, r4
 8006d50:	4630      	mov	r0, r6
 8006d52:	a941      	add	r1, sp, #260	; 0x104
 8006d54:	f000 fa06 	bl	8007164 <_scanf_chars>
 8006d58:	2801      	cmp	r0, #1
 8006d5a:	d06a      	beq.n	8006e32 <__ssvfiscanf_r+0x2e6>
 8006d5c:	2802      	cmp	r0, #2
 8006d5e:	f47f af1b 	bne.w	8006b98 <__ssvfiscanf_r+0x4c>
 8006d62:	e7cb      	b.n	8006cfc <__ssvfiscanf_r+0x1b0>
 8006d64:	2308      	movs	r3, #8
 8006d66:	9342      	str	r3, [sp, #264]	; 0x108
 8006d68:	2304      	movs	r3, #4
 8006d6a:	e7e0      	b.n	8006d2e <__ssvfiscanf_r+0x1e2>
 8006d6c:	220a      	movs	r2, #10
 8006d6e:	e7d5      	b.n	8006d1c <__ssvfiscanf_r+0x1d0>
 8006d70:	4629      	mov	r1, r5
 8006d72:	4640      	mov	r0, r8
 8006d74:	f000 fbfe 	bl	8007574 <__sccl>
 8006d78:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d80:	9341      	str	r3, [sp, #260]	; 0x104
 8006d82:	2301      	movs	r3, #1
 8006d84:	e7d3      	b.n	8006d2e <__ssvfiscanf_r+0x1e2>
 8006d86:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d8c:	9341      	str	r3, [sp, #260]	; 0x104
 8006d8e:	2300      	movs	r3, #0
 8006d90:	e7cd      	b.n	8006d2e <__ssvfiscanf_r+0x1e2>
 8006d92:	2302      	movs	r3, #2
 8006d94:	e7cb      	b.n	8006d2e <__ssvfiscanf_r+0x1e2>
 8006d96:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006d98:	06c3      	lsls	r3, r0, #27
 8006d9a:	f53f aefd 	bmi.w	8006b98 <__ssvfiscanf_r+0x4c>
 8006d9e:	9b00      	ldr	r3, [sp, #0]
 8006da0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006da2:	1d19      	adds	r1, r3, #4
 8006da4:	9100      	str	r1, [sp, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	07c0      	lsls	r0, r0, #31
 8006daa:	bf4c      	ite	mi
 8006dac:	801a      	strhmi	r2, [r3, #0]
 8006dae:	601a      	strpl	r2, [r3, #0]
 8006db0:	e6f2      	b.n	8006b98 <__ssvfiscanf_r+0x4c>
 8006db2:	4621      	mov	r1, r4
 8006db4:	4630      	mov	r0, r6
 8006db6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006db8:	4798      	blx	r3
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d0bb      	beq.n	8006d36 <__ssvfiscanf_r+0x1ea>
 8006dbe:	e79d      	b.n	8006cfc <__ssvfiscanf_r+0x1b0>
 8006dc0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006dc2:	3201      	adds	r2, #1
 8006dc4:	9245      	str	r2, [sp, #276]	; 0x114
 8006dc6:	6862      	ldr	r2, [r4, #4]
 8006dc8:	3a01      	subs	r2, #1
 8006dca:	2a00      	cmp	r2, #0
 8006dcc:	6062      	str	r2, [r4, #4]
 8006dce:	dd02      	ble.n	8006dd6 <__ssvfiscanf_r+0x28a>
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	6023      	str	r3, [r4, #0]
 8006dd4:	e7b2      	b.n	8006d3c <__ssvfiscanf_r+0x1f0>
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	4630      	mov	r0, r6
 8006dda:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006ddc:	4798      	blx	r3
 8006dde:	2800      	cmp	r0, #0
 8006de0:	d0ac      	beq.n	8006d3c <__ssvfiscanf_r+0x1f0>
 8006de2:	e78b      	b.n	8006cfc <__ssvfiscanf_r+0x1b0>
 8006de4:	2b04      	cmp	r3, #4
 8006de6:	dc0f      	bgt.n	8006e08 <__ssvfiscanf_r+0x2bc>
 8006de8:	466b      	mov	r3, sp
 8006dea:	4622      	mov	r2, r4
 8006dec:	4630      	mov	r0, r6
 8006dee:	a941      	add	r1, sp, #260	; 0x104
 8006df0:	f000 fa12 	bl	8007218 <_scanf_i>
 8006df4:	e7b0      	b.n	8006d58 <__ssvfiscanf_r+0x20c>
 8006df6:	bf00      	nop
 8006df8:	08006a99 	.word	0x08006a99
 8006dfc:	08006b13 	.word	0x08006b13
 8006e00:	08007ec3 	.word	0x08007ec3
 8006e04:	08008076 	.word	0x08008076
 8006e08:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <__ssvfiscanf_r+0x2ec>)
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f43f aec4 	beq.w	8006b98 <__ssvfiscanf_r+0x4c>
 8006e10:	466b      	mov	r3, sp
 8006e12:	4622      	mov	r2, r4
 8006e14:	4630      	mov	r0, r6
 8006e16:	a941      	add	r1, sp, #260	; 0x104
 8006e18:	f3af 8000 	nop.w
 8006e1c:	e79c      	b.n	8006d58 <__ssvfiscanf_r+0x20c>
 8006e1e:	89a3      	ldrh	r3, [r4, #12]
 8006e20:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006e24:	bf18      	it	ne
 8006e26:	f04f 30ff 	movne.w	r0, #4294967295
 8006e2a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e32:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006e34:	e7f9      	b.n	8006e2a <__ssvfiscanf_r+0x2de>
 8006e36:	bf00      	nop
 8006e38:	00000000 	.word	0x00000000

08006e3c <_printf_common>:
 8006e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e40:	4616      	mov	r6, r2
 8006e42:	4699      	mov	r9, r3
 8006e44:	688a      	ldr	r2, [r1, #8]
 8006e46:	690b      	ldr	r3, [r1, #16]
 8006e48:	4607      	mov	r7, r0
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	bfb8      	it	lt
 8006e4e:	4613      	movlt	r3, r2
 8006e50:	6033      	str	r3, [r6, #0]
 8006e52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e56:	460c      	mov	r4, r1
 8006e58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e5c:	b10a      	cbz	r2, 8006e62 <_printf_common+0x26>
 8006e5e:	3301      	adds	r3, #1
 8006e60:	6033      	str	r3, [r6, #0]
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	0699      	lsls	r1, r3, #26
 8006e66:	bf42      	ittt	mi
 8006e68:	6833      	ldrmi	r3, [r6, #0]
 8006e6a:	3302      	addmi	r3, #2
 8006e6c:	6033      	strmi	r3, [r6, #0]
 8006e6e:	6825      	ldr	r5, [r4, #0]
 8006e70:	f015 0506 	ands.w	r5, r5, #6
 8006e74:	d106      	bne.n	8006e84 <_printf_common+0x48>
 8006e76:	f104 0a19 	add.w	sl, r4, #25
 8006e7a:	68e3      	ldr	r3, [r4, #12]
 8006e7c:	6832      	ldr	r2, [r6, #0]
 8006e7e:	1a9b      	subs	r3, r3, r2
 8006e80:	42ab      	cmp	r3, r5
 8006e82:	dc2b      	bgt.n	8006edc <_printf_common+0xa0>
 8006e84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e88:	1e13      	subs	r3, r2, #0
 8006e8a:	6822      	ldr	r2, [r4, #0]
 8006e8c:	bf18      	it	ne
 8006e8e:	2301      	movne	r3, #1
 8006e90:	0692      	lsls	r2, r2, #26
 8006e92:	d430      	bmi.n	8006ef6 <_printf_common+0xba>
 8006e94:	4649      	mov	r1, r9
 8006e96:	4638      	mov	r0, r7
 8006e98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e9c:	47c0      	blx	r8
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	d023      	beq.n	8006eea <_printf_common+0xae>
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	6922      	ldr	r2, [r4, #16]
 8006ea6:	f003 0306 	and.w	r3, r3, #6
 8006eaa:	2b04      	cmp	r3, #4
 8006eac:	bf14      	ite	ne
 8006eae:	2500      	movne	r5, #0
 8006eb0:	6833      	ldreq	r3, [r6, #0]
 8006eb2:	f04f 0600 	mov.w	r6, #0
 8006eb6:	bf08      	it	eq
 8006eb8:	68e5      	ldreq	r5, [r4, #12]
 8006eba:	f104 041a 	add.w	r4, r4, #26
 8006ebe:	bf08      	it	eq
 8006ec0:	1aed      	subeq	r5, r5, r3
 8006ec2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006ec6:	bf08      	it	eq
 8006ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	bfc4      	itt	gt
 8006ed0:	1a9b      	subgt	r3, r3, r2
 8006ed2:	18ed      	addgt	r5, r5, r3
 8006ed4:	42b5      	cmp	r5, r6
 8006ed6:	d11a      	bne.n	8006f0e <_printf_common+0xd2>
 8006ed8:	2000      	movs	r0, #0
 8006eda:	e008      	b.n	8006eee <_printf_common+0xb2>
 8006edc:	2301      	movs	r3, #1
 8006ede:	4652      	mov	r2, sl
 8006ee0:	4649      	mov	r1, r9
 8006ee2:	4638      	mov	r0, r7
 8006ee4:	47c0      	blx	r8
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	d103      	bne.n	8006ef2 <_printf_common+0xb6>
 8006eea:	f04f 30ff 	mov.w	r0, #4294967295
 8006eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef2:	3501      	adds	r5, #1
 8006ef4:	e7c1      	b.n	8006e7a <_printf_common+0x3e>
 8006ef6:	2030      	movs	r0, #48	; 0x30
 8006ef8:	18e1      	adds	r1, r4, r3
 8006efa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f04:	4422      	add	r2, r4
 8006f06:	3302      	adds	r3, #2
 8006f08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f0c:	e7c2      	b.n	8006e94 <_printf_common+0x58>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	4622      	mov	r2, r4
 8006f12:	4649      	mov	r1, r9
 8006f14:	4638      	mov	r0, r7
 8006f16:	47c0      	blx	r8
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d0e6      	beq.n	8006eea <_printf_common+0xae>
 8006f1c:	3601      	adds	r6, #1
 8006f1e:	e7d9      	b.n	8006ed4 <_printf_common+0x98>

08006f20 <_printf_i>:
 8006f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f24:	7e0f      	ldrb	r7, [r1, #24]
 8006f26:	4691      	mov	r9, r2
 8006f28:	2f78      	cmp	r7, #120	; 0x78
 8006f2a:	4680      	mov	r8, r0
 8006f2c:	460c      	mov	r4, r1
 8006f2e:	469a      	mov	sl, r3
 8006f30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f36:	d807      	bhi.n	8006f48 <_printf_i+0x28>
 8006f38:	2f62      	cmp	r7, #98	; 0x62
 8006f3a:	d80a      	bhi.n	8006f52 <_printf_i+0x32>
 8006f3c:	2f00      	cmp	r7, #0
 8006f3e:	f000 80d5 	beq.w	80070ec <_printf_i+0x1cc>
 8006f42:	2f58      	cmp	r7, #88	; 0x58
 8006f44:	f000 80c1 	beq.w	80070ca <_printf_i+0x1aa>
 8006f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f50:	e03a      	b.n	8006fc8 <_printf_i+0xa8>
 8006f52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f56:	2b15      	cmp	r3, #21
 8006f58:	d8f6      	bhi.n	8006f48 <_printf_i+0x28>
 8006f5a:	a101      	add	r1, pc, #4	; (adr r1, 8006f60 <_printf_i+0x40>)
 8006f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f60:	08006fb9 	.word	0x08006fb9
 8006f64:	08006fcd 	.word	0x08006fcd
 8006f68:	08006f49 	.word	0x08006f49
 8006f6c:	08006f49 	.word	0x08006f49
 8006f70:	08006f49 	.word	0x08006f49
 8006f74:	08006f49 	.word	0x08006f49
 8006f78:	08006fcd 	.word	0x08006fcd
 8006f7c:	08006f49 	.word	0x08006f49
 8006f80:	08006f49 	.word	0x08006f49
 8006f84:	08006f49 	.word	0x08006f49
 8006f88:	08006f49 	.word	0x08006f49
 8006f8c:	080070d3 	.word	0x080070d3
 8006f90:	08006ff9 	.word	0x08006ff9
 8006f94:	0800708d 	.word	0x0800708d
 8006f98:	08006f49 	.word	0x08006f49
 8006f9c:	08006f49 	.word	0x08006f49
 8006fa0:	080070f5 	.word	0x080070f5
 8006fa4:	08006f49 	.word	0x08006f49
 8006fa8:	08006ff9 	.word	0x08006ff9
 8006fac:	08006f49 	.word	0x08006f49
 8006fb0:	08006f49 	.word	0x08006f49
 8006fb4:	08007095 	.word	0x08007095
 8006fb8:	682b      	ldr	r3, [r5, #0]
 8006fba:	1d1a      	adds	r2, r3, #4
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	602a      	str	r2, [r5, #0]
 8006fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e0a0      	b.n	800710e <_printf_i+0x1ee>
 8006fcc:	6820      	ldr	r0, [r4, #0]
 8006fce:	682b      	ldr	r3, [r5, #0]
 8006fd0:	0607      	lsls	r7, r0, #24
 8006fd2:	f103 0104 	add.w	r1, r3, #4
 8006fd6:	6029      	str	r1, [r5, #0]
 8006fd8:	d501      	bpl.n	8006fde <_printf_i+0xbe>
 8006fda:	681e      	ldr	r6, [r3, #0]
 8006fdc:	e003      	b.n	8006fe6 <_printf_i+0xc6>
 8006fde:	0646      	lsls	r6, r0, #25
 8006fe0:	d5fb      	bpl.n	8006fda <_printf_i+0xba>
 8006fe2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006fe6:	2e00      	cmp	r6, #0
 8006fe8:	da03      	bge.n	8006ff2 <_printf_i+0xd2>
 8006fea:	232d      	movs	r3, #45	; 0x2d
 8006fec:	4276      	negs	r6, r6
 8006fee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ff2:	230a      	movs	r3, #10
 8006ff4:	4859      	ldr	r0, [pc, #356]	; (800715c <_printf_i+0x23c>)
 8006ff6:	e012      	b.n	800701e <_printf_i+0xfe>
 8006ff8:	682b      	ldr	r3, [r5, #0]
 8006ffa:	6820      	ldr	r0, [r4, #0]
 8006ffc:	1d19      	adds	r1, r3, #4
 8006ffe:	6029      	str	r1, [r5, #0]
 8007000:	0605      	lsls	r5, r0, #24
 8007002:	d501      	bpl.n	8007008 <_printf_i+0xe8>
 8007004:	681e      	ldr	r6, [r3, #0]
 8007006:	e002      	b.n	800700e <_printf_i+0xee>
 8007008:	0641      	lsls	r1, r0, #25
 800700a:	d5fb      	bpl.n	8007004 <_printf_i+0xe4>
 800700c:	881e      	ldrh	r6, [r3, #0]
 800700e:	2f6f      	cmp	r7, #111	; 0x6f
 8007010:	bf0c      	ite	eq
 8007012:	2308      	moveq	r3, #8
 8007014:	230a      	movne	r3, #10
 8007016:	4851      	ldr	r0, [pc, #324]	; (800715c <_printf_i+0x23c>)
 8007018:	2100      	movs	r1, #0
 800701a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800701e:	6865      	ldr	r5, [r4, #4]
 8007020:	2d00      	cmp	r5, #0
 8007022:	bfa8      	it	ge
 8007024:	6821      	ldrge	r1, [r4, #0]
 8007026:	60a5      	str	r5, [r4, #8]
 8007028:	bfa4      	itt	ge
 800702a:	f021 0104 	bicge.w	r1, r1, #4
 800702e:	6021      	strge	r1, [r4, #0]
 8007030:	b90e      	cbnz	r6, 8007036 <_printf_i+0x116>
 8007032:	2d00      	cmp	r5, #0
 8007034:	d04b      	beq.n	80070ce <_printf_i+0x1ae>
 8007036:	4615      	mov	r5, r2
 8007038:	fbb6 f1f3 	udiv	r1, r6, r3
 800703c:	fb03 6711 	mls	r7, r3, r1, r6
 8007040:	5dc7      	ldrb	r7, [r0, r7]
 8007042:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007046:	4637      	mov	r7, r6
 8007048:	42bb      	cmp	r3, r7
 800704a:	460e      	mov	r6, r1
 800704c:	d9f4      	bls.n	8007038 <_printf_i+0x118>
 800704e:	2b08      	cmp	r3, #8
 8007050:	d10b      	bne.n	800706a <_printf_i+0x14a>
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	07de      	lsls	r6, r3, #31
 8007056:	d508      	bpl.n	800706a <_printf_i+0x14a>
 8007058:	6923      	ldr	r3, [r4, #16]
 800705a:	6861      	ldr	r1, [r4, #4]
 800705c:	4299      	cmp	r1, r3
 800705e:	bfde      	ittt	le
 8007060:	2330      	movle	r3, #48	; 0x30
 8007062:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007066:	f105 35ff 	addle.w	r5, r5, #4294967295
 800706a:	1b52      	subs	r2, r2, r5
 800706c:	6122      	str	r2, [r4, #16]
 800706e:	464b      	mov	r3, r9
 8007070:	4621      	mov	r1, r4
 8007072:	4640      	mov	r0, r8
 8007074:	f8cd a000 	str.w	sl, [sp]
 8007078:	aa03      	add	r2, sp, #12
 800707a:	f7ff fedf 	bl	8006e3c <_printf_common>
 800707e:	3001      	adds	r0, #1
 8007080:	d14a      	bne.n	8007118 <_printf_i+0x1f8>
 8007082:	f04f 30ff 	mov.w	r0, #4294967295
 8007086:	b004      	add	sp, #16
 8007088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	f043 0320 	orr.w	r3, r3, #32
 8007092:	6023      	str	r3, [r4, #0]
 8007094:	2778      	movs	r7, #120	; 0x78
 8007096:	4832      	ldr	r0, [pc, #200]	; (8007160 <_printf_i+0x240>)
 8007098:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	6829      	ldr	r1, [r5, #0]
 80070a0:	061f      	lsls	r7, r3, #24
 80070a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80070a6:	d402      	bmi.n	80070ae <_printf_i+0x18e>
 80070a8:	065f      	lsls	r7, r3, #25
 80070aa:	bf48      	it	mi
 80070ac:	b2b6      	uxthmi	r6, r6
 80070ae:	07df      	lsls	r7, r3, #31
 80070b0:	bf48      	it	mi
 80070b2:	f043 0320 	orrmi.w	r3, r3, #32
 80070b6:	6029      	str	r1, [r5, #0]
 80070b8:	bf48      	it	mi
 80070ba:	6023      	strmi	r3, [r4, #0]
 80070bc:	b91e      	cbnz	r6, 80070c6 <_printf_i+0x1a6>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	f023 0320 	bic.w	r3, r3, #32
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	2310      	movs	r3, #16
 80070c8:	e7a6      	b.n	8007018 <_printf_i+0xf8>
 80070ca:	4824      	ldr	r0, [pc, #144]	; (800715c <_printf_i+0x23c>)
 80070cc:	e7e4      	b.n	8007098 <_printf_i+0x178>
 80070ce:	4615      	mov	r5, r2
 80070d0:	e7bd      	b.n	800704e <_printf_i+0x12e>
 80070d2:	682b      	ldr	r3, [r5, #0]
 80070d4:	6826      	ldr	r6, [r4, #0]
 80070d6:	1d18      	adds	r0, r3, #4
 80070d8:	6961      	ldr	r1, [r4, #20]
 80070da:	6028      	str	r0, [r5, #0]
 80070dc:	0635      	lsls	r5, r6, #24
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	d501      	bpl.n	80070e6 <_printf_i+0x1c6>
 80070e2:	6019      	str	r1, [r3, #0]
 80070e4:	e002      	b.n	80070ec <_printf_i+0x1cc>
 80070e6:	0670      	lsls	r0, r6, #25
 80070e8:	d5fb      	bpl.n	80070e2 <_printf_i+0x1c2>
 80070ea:	8019      	strh	r1, [r3, #0]
 80070ec:	2300      	movs	r3, #0
 80070ee:	4615      	mov	r5, r2
 80070f0:	6123      	str	r3, [r4, #16]
 80070f2:	e7bc      	b.n	800706e <_printf_i+0x14e>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	2100      	movs	r1, #0
 80070f8:	1d1a      	adds	r2, r3, #4
 80070fa:	602a      	str	r2, [r5, #0]
 80070fc:	681d      	ldr	r5, [r3, #0]
 80070fe:	6862      	ldr	r2, [r4, #4]
 8007100:	4628      	mov	r0, r5
 8007102:	f000 fad3 	bl	80076ac <memchr>
 8007106:	b108      	cbz	r0, 800710c <_printf_i+0x1ec>
 8007108:	1b40      	subs	r0, r0, r5
 800710a:	6060      	str	r0, [r4, #4]
 800710c:	6863      	ldr	r3, [r4, #4]
 800710e:	6123      	str	r3, [r4, #16]
 8007110:	2300      	movs	r3, #0
 8007112:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007116:	e7aa      	b.n	800706e <_printf_i+0x14e>
 8007118:	462a      	mov	r2, r5
 800711a:	4649      	mov	r1, r9
 800711c:	4640      	mov	r0, r8
 800711e:	6923      	ldr	r3, [r4, #16]
 8007120:	47d0      	blx	sl
 8007122:	3001      	adds	r0, #1
 8007124:	d0ad      	beq.n	8007082 <_printf_i+0x162>
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	079b      	lsls	r3, r3, #30
 800712a:	d413      	bmi.n	8007154 <_printf_i+0x234>
 800712c:	68e0      	ldr	r0, [r4, #12]
 800712e:	9b03      	ldr	r3, [sp, #12]
 8007130:	4298      	cmp	r0, r3
 8007132:	bfb8      	it	lt
 8007134:	4618      	movlt	r0, r3
 8007136:	e7a6      	b.n	8007086 <_printf_i+0x166>
 8007138:	2301      	movs	r3, #1
 800713a:	4632      	mov	r2, r6
 800713c:	4649      	mov	r1, r9
 800713e:	4640      	mov	r0, r8
 8007140:	47d0      	blx	sl
 8007142:	3001      	adds	r0, #1
 8007144:	d09d      	beq.n	8007082 <_printf_i+0x162>
 8007146:	3501      	adds	r5, #1
 8007148:	68e3      	ldr	r3, [r4, #12]
 800714a:	9903      	ldr	r1, [sp, #12]
 800714c:	1a5b      	subs	r3, r3, r1
 800714e:	42ab      	cmp	r3, r5
 8007150:	dcf2      	bgt.n	8007138 <_printf_i+0x218>
 8007152:	e7eb      	b.n	800712c <_printf_i+0x20c>
 8007154:	2500      	movs	r5, #0
 8007156:	f104 0619 	add.w	r6, r4, #25
 800715a:	e7f5      	b.n	8007148 <_printf_i+0x228>
 800715c:	08008081 	.word	0x08008081
 8007160:	08008092 	.word	0x08008092

08007164 <_scanf_chars>:
 8007164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007168:	4615      	mov	r5, r2
 800716a:	688a      	ldr	r2, [r1, #8]
 800716c:	4680      	mov	r8, r0
 800716e:	460c      	mov	r4, r1
 8007170:	b932      	cbnz	r2, 8007180 <_scanf_chars+0x1c>
 8007172:	698a      	ldr	r2, [r1, #24]
 8007174:	2a00      	cmp	r2, #0
 8007176:	bf0c      	ite	eq
 8007178:	2201      	moveq	r2, #1
 800717a:	f04f 32ff 	movne.w	r2, #4294967295
 800717e:	608a      	str	r2, [r1, #8]
 8007180:	2700      	movs	r7, #0
 8007182:	6822      	ldr	r2, [r4, #0]
 8007184:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8007214 <_scanf_chars+0xb0>
 8007188:	06d1      	lsls	r1, r2, #27
 800718a:	bf5f      	itttt	pl
 800718c:	681a      	ldrpl	r2, [r3, #0]
 800718e:	1d11      	addpl	r1, r2, #4
 8007190:	6019      	strpl	r1, [r3, #0]
 8007192:	6816      	ldrpl	r6, [r2, #0]
 8007194:	69a0      	ldr	r0, [r4, #24]
 8007196:	b188      	cbz	r0, 80071bc <_scanf_chars+0x58>
 8007198:	2801      	cmp	r0, #1
 800719a:	d107      	bne.n	80071ac <_scanf_chars+0x48>
 800719c:	682b      	ldr	r3, [r5, #0]
 800719e:	781a      	ldrb	r2, [r3, #0]
 80071a0:	6963      	ldr	r3, [r4, #20]
 80071a2:	5c9b      	ldrb	r3, [r3, r2]
 80071a4:	b953      	cbnz	r3, 80071bc <_scanf_chars+0x58>
 80071a6:	2f00      	cmp	r7, #0
 80071a8:	d031      	beq.n	800720e <_scanf_chars+0xaa>
 80071aa:	e022      	b.n	80071f2 <_scanf_chars+0x8e>
 80071ac:	2802      	cmp	r0, #2
 80071ae:	d120      	bne.n	80071f2 <_scanf_chars+0x8e>
 80071b0:	682b      	ldr	r3, [r5, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80071b8:	071b      	lsls	r3, r3, #28
 80071ba:	d41a      	bmi.n	80071f2 <_scanf_chars+0x8e>
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	3701      	adds	r7, #1
 80071c0:	06da      	lsls	r2, r3, #27
 80071c2:	bf5e      	ittt	pl
 80071c4:	682b      	ldrpl	r3, [r5, #0]
 80071c6:	781b      	ldrbpl	r3, [r3, #0]
 80071c8:	f806 3b01 	strbpl.w	r3, [r6], #1
 80071cc:	682a      	ldr	r2, [r5, #0]
 80071ce:	686b      	ldr	r3, [r5, #4]
 80071d0:	3201      	adds	r2, #1
 80071d2:	602a      	str	r2, [r5, #0]
 80071d4:	68a2      	ldr	r2, [r4, #8]
 80071d6:	3b01      	subs	r3, #1
 80071d8:	3a01      	subs	r2, #1
 80071da:	606b      	str	r3, [r5, #4]
 80071dc:	60a2      	str	r2, [r4, #8]
 80071de:	b142      	cbz	r2, 80071f2 <_scanf_chars+0x8e>
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	dcd7      	bgt.n	8007194 <_scanf_chars+0x30>
 80071e4:	4629      	mov	r1, r5
 80071e6:	4640      	mov	r0, r8
 80071e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80071ec:	4798      	blx	r3
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d0d0      	beq.n	8007194 <_scanf_chars+0x30>
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	f013 0310 	ands.w	r3, r3, #16
 80071f8:	d105      	bne.n	8007206 <_scanf_chars+0xa2>
 80071fa:	68e2      	ldr	r2, [r4, #12]
 80071fc:	3201      	adds	r2, #1
 80071fe:	60e2      	str	r2, [r4, #12]
 8007200:	69a2      	ldr	r2, [r4, #24]
 8007202:	b102      	cbz	r2, 8007206 <_scanf_chars+0xa2>
 8007204:	7033      	strb	r3, [r6, #0]
 8007206:	2000      	movs	r0, #0
 8007208:	6923      	ldr	r3, [r4, #16]
 800720a:	443b      	add	r3, r7
 800720c:	6123      	str	r3, [r4, #16]
 800720e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007212:	bf00      	nop
 8007214:	08007ec3 	.word	0x08007ec3

08007218 <_scanf_i>:
 8007218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721c:	460c      	mov	r4, r1
 800721e:	4698      	mov	r8, r3
 8007220:	4b72      	ldr	r3, [pc, #456]	; (80073ec <_scanf_i+0x1d4>)
 8007222:	b087      	sub	sp, #28
 8007224:	4682      	mov	sl, r0
 8007226:	4616      	mov	r6, r2
 8007228:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800722c:	ab03      	add	r3, sp, #12
 800722e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007232:	4b6f      	ldr	r3, [pc, #444]	; (80073f0 <_scanf_i+0x1d8>)
 8007234:	69a1      	ldr	r1, [r4, #24]
 8007236:	4a6f      	ldr	r2, [pc, #444]	; (80073f4 <_scanf_i+0x1dc>)
 8007238:	4627      	mov	r7, r4
 800723a:	2903      	cmp	r1, #3
 800723c:	bf18      	it	ne
 800723e:	461a      	movne	r2, r3
 8007240:	68a3      	ldr	r3, [r4, #8]
 8007242:	9201      	str	r2, [sp, #4]
 8007244:	1e5a      	subs	r2, r3, #1
 8007246:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800724a:	bf81      	itttt	hi
 800724c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007250:	eb03 0905 	addhi.w	r9, r3, r5
 8007254:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007258:	60a3      	strhi	r3, [r4, #8]
 800725a:	f857 3b1c 	ldr.w	r3, [r7], #28
 800725e:	bf98      	it	ls
 8007260:	f04f 0900 	movls.w	r9, #0
 8007264:	463d      	mov	r5, r7
 8007266:	f04f 0b00 	mov.w	fp, #0
 800726a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800726e:	6023      	str	r3, [r4, #0]
 8007270:	6831      	ldr	r1, [r6, #0]
 8007272:	ab03      	add	r3, sp, #12
 8007274:	2202      	movs	r2, #2
 8007276:	7809      	ldrb	r1, [r1, #0]
 8007278:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800727c:	f000 fa16 	bl	80076ac <memchr>
 8007280:	b328      	cbz	r0, 80072ce <_scanf_i+0xb6>
 8007282:	f1bb 0f01 	cmp.w	fp, #1
 8007286:	d159      	bne.n	800733c <_scanf_i+0x124>
 8007288:	6862      	ldr	r2, [r4, #4]
 800728a:	b92a      	cbnz	r2, 8007298 <_scanf_i+0x80>
 800728c:	2308      	movs	r3, #8
 800728e:	6822      	ldr	r2, [r4, #0]
 8007290:	6063      	str	r3, [r4, #4]
 8007292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007296:	6022      	str	r2, [r4, #0]
 8007298:	6822      	ldr	r2, [r4, #0]
 800729a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800729e:	6022      	str	r2, [r4, #0]
 80072a0:	68a2      	ldr	r2, [r4, #8]
 80072a2:	1e51      	subs	r1, r2, #1
 80072a4:	60a1      	str	r1, [r4, #8]
 80072a6:	b192      	cbz	r2, 80072ce <_scanf_i+0xb6>
 80072a8:	6832      	ldr	r2, [r6, #0]
 80072aa:	1c51      	adds	r1, r2, #1
 80072ac:	6031      	str	r1, [r6, #0]
 80072ae:	7812      	ldrb	r2, [r2, #0]
 80072b0:	f805 2b01 	strb.w	r2, [r5], #1
 80072b4:	6872      	ldr	r2, [r6, #4]
 80072b6:	3a01      	subs	r2, #1
 80072b8:	2a00      	cmp	r2, #0
 80072ba:	6072      	str	r2, [r6, #4]
 80072bc:	dc07      	bgt.n	80072ce <_scanf_i+0xb6>
 80072be:	4631      	mov	r1, r6
 80072c0:	4650      	mov	r0, sl
 80072c2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80072c6:	4790      	blx	r2
 80072c8:	2800      	cmp	r0, #0
 80072ca:	f040 8085 	bne.w	80073d8 <_scanf_i+0x1c0>
 80072ce:	f10b 0b01 	add.w	fp, fp, #1
 80072d2:	f1bb 0f03 	cmp.w	fp, #3
 80072d6:	d1cb      	bne.n	8007270 <_scanf_i+0x58>
 80072d8:	6863      	ldr	r3, [r4, #4]
 80072da:	b90b      	cbnz	r3, 80072e0 <_scanf_i+0xc8>
 80072dc:	230a      	movs	r3, #10
 80072de:	6063      	str	r3, [r4, #4]
 80072e0:	6863      	ldr	r3, [r4, #4]
 80072e2:	4945      	ldr	r1, [pc, #276]	; (80073f8 <_scanf_i+0x1e0>)
 80072e4:	6960      	ldr	r0, [r4, #20]
 80072e6:	1ac9      	subs	r1, r1, r3
 80072e8:	f000 f944 	bl	8007574 <__sccl>
 80072ec:	f04f 0b00 	mov.w	fp, #0
 80072f0:	68a3      	ldr	r3, [r4, #8]
 80072f2:	6822      	ldr	r2, [r4, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d03d      	beq.n	8007374 <_scanf_i+0x15c>
 80072f8:	6831      	ldr	r1, [r6, #0]
 80072fa:	6960      	ldr	r0, [r4, #20]
 80072fc:	f891 c000 	ldrb.w	ip, [r1]
 8007300:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007304:	2800      	cmp	r0, #0
 8007306:	d035      	beq.n	8007374 <_scanf_i+0x15c>
 8007308:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800730c:	d124      	bne.n	8007358 <_scanf_i+0x140>
 800730e:	0510      	lsls	r0, r2, #20
 8007310:	d522      	bpl.n	8007358 <_scanf_i+0x140>
 8007312:	f10b 0b01 	add.w	fp, fp, #1
 8007316:	f1b9 0f00 	cmp.w	r9, #0
 800731a:	d003      	beq.n	8007324 <_scanf_i+0x10c>
 800731c:	3301      	adds	r3, #1
 800731e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007322:	60a3      	str	r3, [r4, #8]
 8007324:	6873      	ldr	r3, [r6, #4]
 8007326:	3b01      	subs	r3, #1
 8007328:	2b00      	cmp	r3, #0
 800732a:	6073      	str	r3, [r6, #4]
 800732c:	dd1b      	ble.n	8007366 <_scanf_i+0x14e>
 800732e:	6833      	ldr	r3, [r6, #0]
 8007330:	3301      	adds	r3, #1
 8007332:	6033      	str	r3, [r6, #0]
 8007334:	68a3      	ldr	r3, [r4, #8]
 8007336:	3b01      	subs	r3, #1
 8007338:	60a3      	str	r3, [r4, #8]
 800733a:	e7d9      	b.n	80072f0 <_scanf_i+0xd8>
 800733c:	f1bb 0f02 	cmp.w	fp, #2
 8007340:	d1ae      	bne.n	80072a0 <_scanf_i+0x88>
 8007342:	6822      	ldr	r2, [r4, #0]
 8007344:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007348:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800734c:	d1bf      	bne.n	80072ce <_scanf_i+0xb6>
 800734e:	2310      	movs	r3, #16
 8007350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007354:	6063      	str	r3, [r4, #4]
 8007356:	e7a2      	b.n	800729e <_scanf_i+0x86>
 8007358:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800735c:	6022      	str	r2, [r4, #0]
 800735e:	780b      	ldrb	r3, [r1, #0]
 8007360:	f805 3b01 	strb.w	r3, [r5], #1
 8007364:	e7de      	b.n	8007324 <_scanf_i+0x10c>
 8007366:	4631      	mov	r1, r6
 8007368:	4650      	mov	r0, sl
 800736a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800736e:	4798      	blx	r3
 8007370:	2800      	cmp	r0, #0
 8007372:	d0df      	beq.n	8007334 <_scanf_i+0x11c>
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	05d9      	lsls	r1, r3, #23
 8007378:	d50d      	bpl.n	8007396 <_scanf_i+0x17e>
 800737a:	42bd      	cmp	r5, r7
 800737c:	d909      	bls.n	8007392 <_scanf_i+0x17a>
 800737e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007382:	4632      	mov	r2, r6
 8007384:	4650      	mov	r0, sl
 8007386:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800738a:	f105 39ff 	add.w	r9, r5, #4294967295
 800738e:	4798      	blx	r3
 8007390:	464d      	mov	r5, r9
 8007392:	42bd      	cmp	r5, r7
 8007394:	d028      	beq.n	80073e8 <_scanf_i+0x1d0>
 8007396:	6822      	ldr	r2, [r4, #0]
 8007398:	f012 0210 	ands.w	r2, r2, #16
 800739c:	d113      	bne.n	80073c6 <_scanf_i+0x1ae>
 800739e:	702a      	strb	r2, [r5, #0]
 80073a0:	4639      	mov	r1, r7
 80073a2:	6863      	ldr	r3, [r4, #4]
 80073a4:	4650      	mov	r0, sl
 80073a6:	9e01      	ldr	r6, [sp, #4]
 80073a8:	47b0      	blx	r6
 80073aa:	f8d8 3000 	ldr.w	r3, [r8]
 80073ae:	6821      	ldr	r1, [r4, #0]
 80073b0:	1d1a      	adds	r2, r3, #4
 80073b2:	f8c8 2000 	str.w	r2, [r8]
 80073b6:	f011 0f20 	tst.w	r1, #32
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	d00f      	beq.n	80073de <_scanf_i+0x1c6>
 80073be:	6018      	str	r0, [r3, #0]
 80073c0:	68e3      	ldr	r3, [r4, #12]
 80073c2:	3301      	adds	r3, #1
 80073c4:	60e3      	str	r3, [r4, #12]
 80073c6:	2000      	movs	r0, #0
 80073c8:	6923      	ldr	r3, [r4, #16]
 80073ca:	1bed      	subs	r5, r5, r7
 80073cc:	445d      	add	r5, fp
 80073ce:	442b      	add	r3, r5
 80073d0:	6123      	str	r3, [r4, #16]
 80073d2:	b007      	add	sp, #28
 80073d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d8:	f04f 0b00 	mov.w	fp, #0
 80073dc:	e7ca      	b.n	8007374 <_scanf_i+0x15c>
 80073de:	07ca      	lsls	r2, r1, #31
 80073e0:	bf4c      	ite	mi
 80073e2:	8018      	strhmi	r0, [r3, #0]
 80073e4:	6018      	strpl	r0, [r3, #0]
 80073e6:	e7eb      	b.n	80073c0 <_scanf_i+0x1a8>
 80073e8:	2001      	movs	r0, #1
 80073ea:	e7f2      	b.n	80073d2 <_scanf_i+0x1ba>
 80073ec:	08007e78 	.word	0x08007e78
 80073f0:	08007835 	.word	0x08007835
 80073f4:	080060fd 	.word	0x080060fd
 80073f8:	080080b3 	.word	0x080080b3

080073fc <__sflush_r>:
 80073fc:	898a      	ldrh	r2, [r1, #12]
 80073fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007400:	4605      	mov	r5, r0
 8007402:	0710      	lsls	r0, r2, #28
 8007404:	460c      	mov	r4, r1
 8007406:	d457      	bmi.n	80074b8 <__sflush_r+0xbc>
 8007408:	684b      	ldr	r3, [r1, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	dc04      	bgt.n	8007418 <__sflush_r+0x1c>
 800740e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007410:	2b00      	cmp	r3, #0
 8007412:	dc01      	bgt.n	8007418 <__sflush_r+0x1c>
 8007414:	2000      	movs	r0, #0
 8007416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007418:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800741a:	2e00      	cmp	r6, #0
 800741c:	d0fa      	beq.n	8007414 <__sflush_r+0x18>
 800741e:	2300      	movs	r3, #0
 8007420:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007424:	682f      	ldr	r7, [r5, #0]
 8007426:	6a21      	ldr	r1, [r4, #32]
 8007428:	602b      	str	r3, [r5, #0]
 800742a:	d032      	beq.n	8007492 <__sflush_r+0x96>
 800742c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800742e:	89a3      	ldrh	r3, [r4, #12]
 8007430:	075a      	lsls	r2, r3, #29
 8007432:	d505      	bpl.n	8007440 <__sflush_r+0x44>
 8007434:	6863      	ldr	r3, [r4, #4]
 8007436:	1ac0      	subs	r0, r0, r3
 8007438:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800743a:	b10b      	cbz	r3, 8007440 <__sflush_r+0x44>
 800743c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800743e:	1ac0      	subs	r0, r0, r3
 8007440:	2300      	movs	r3, #0
 8007442:	4602      	mov	r2, r0
 8007444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007446:	4628      	mov	r0, r5
 8007448:	6a21      	ldr	r1, [r4, #32]
 800744a:	47b0      	blx	r6
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	89a3      	ldrh	r3, [r4, #12]
 8007450:	d106      	bne.n	8007460 <__sflush_r+0x64>
 8007452:	6829      	ldr	r1, [r5, #0]
 8007454:	291d      	cmp	r1, #29
 8007456:	d82b      	bhi.n	80074b0 <__sflush_r+0xb4>
 8007458:	4a28      	ldr	r2, [pc, #160]	; (80074fc <__sflush_r+0x100>)
 800745a:	410a      	asrs	r2, r1
 800745c:	07d6      	lsls	r6, r2, #31
 800745e:	d427      	bmi.n	80074b0 <__sflush_r+0xb4>
 8007460:	2200      	movs	r2, #0
 8007462:	6062      	str	r2, [r4, #4]
 8007464:	6922      	ldr	r2, [r4, #16]
 8007466:	04d9      	lsls	r1, r3, #19
 8007468:	6022      	str	r2, [r4, #0]
 800746a:	d504      	bpl.n	8007476 <__sflush_r+0x7a>
 800746c:	1c42      	adds	r2, r0, #1
 800746e:	d101      	bne.n	8007474 <__sflush_r+0x78>
 8007470:	682b      	ldr	r3, [r5, #0]
 8007472:	b903      	cbnz	r3, 8007476 <__sflush_r+0x7a>
 8007474:	6560      	str	r0, [r4, #84]	; 0x54
 8007476:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007478:	602f      	str	r7, [r5, #0]
 800747a:	2900      	cmp	r1, #0
 800747c:	d0ca      	beq.n	8007414 <__sflush_r+0x18>
 800747e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007482:	4299      	cmp	r1, r3
 8007484:	d002      	beq.n	800748c <__sflush_r+0x90>
 8007486:	4628      	mov	r0, r5
 8007488:	f7ff f8b2 	bl	80065f0 <_free_r>
 800748c:	2000      	movs	r0, #0
 800748e:	6360      	str	r0, [r4, #52]	; 0x34
 8007490:	e7c1      	b.n	8007416 <__sflush_r+0x1a>
 8007492:	2301      	movs	r3, #1
 8007494:	4628      	mov	r0, r5
 8007496:	47b0      	blx	r6
 8007498:	1c41      	adds	r1, r0, #1
 800749a:	d1c8      	bne.n	800742e <__sflush_r+0x32>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0c5      	beq.n	800742e <__sflush_r+0x32>
 80074a2:	2b1d      	cmp	r3, #29
 80074a4:	d001      	beq.n	80074aa <__sflush_r+0xae>
 80074a6:	2b16      	cmp	r3, #22
 80074a8:	d101      	bne.n	80074ae <__sflush_r+0xb2>
 80074aa:	602f      	str	r7, [r5, #0]
 80074ac:	e7b2      	b.n	8007414 <__sflush_r+0x18>
 80074ae:	89a3      	ldrh	r3, [r4, #12]
 80074b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074b4:	81a3      	strh	r3, [r4, #12]
 80074b6:	e7ae      	b.n	8007416 <__sflush_r+0x1a>
 80074b8:	690f      	ldr	r7, [r1, #16]
 80074ba:	2f00      	cmp	r7, #0
 80074bc:	d0aa      	beq.n	8007414 <__sflush_r+0x18>
 80074be:	0793      	lsls	r3, r2, #30
 80074c0:	bf18      	it	ne
 80074c2:	2300      	movne	r3, #0
 80074c4:	680e      	ldr	r6, [r1, #0]
 80074c6:	bf08      	it	eq
 80074c8:	694b      	ldreq	r3, [r1, #20]
 80074ca:	1bf6      	subs	r6, r6, r7
 80074cc:	600f      	str	r7, [r1, #0]
 80074ce:	608b      	str	r3, [r1, #8]
 80074d0:	2e00      	cmp	r6, #0
 80074d2:	dd9f      	ble.n	8007414 <__sflush_r+0x18>
 80074d4:	4633      	mov	r3, r6
 80074d6:	463a      	mov	r2, r7
 80074d8:	4628      	mov	r0, r5
 80074da:	6a21      	ldr	r1, [r4, #32]
 80074dc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80074e0:	47e0      	blx	ip
 80074e2:	2800      	cmp	r0, #0
 80074e4:	dc06      	bgt.n	80074f4 <__sflush_r+0xf8>
 80074e6:	89a3      	ldrh	r3, [r4, #12]
 80074e8:	f04f 30ff 	mov.w	r0, #4294967295
 80074ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074f0:	81a3      	strh	r3, [r4, #12]
 80074f2:	e790      	b.n	8007416 <__sflush_r+0x1a>
 80074f4:	4407      	add	r7, r0
 80074f6:	1a36      	subs	r6, r6, r0
 80074f8:	e7ea      	b.n	80074d0 <__sflush_r+0xd4>
 80074fa:	bf00      	nop
 80074fc:	dfbffffe 	.word	0xdfbffffe

08007500 <_fflush_r>:
 8007500:	b538      	push	{r3, r4, r5, lr}
 8007502:	690b      	ldr	r3, [r1, #16]
 8007504:	4605      	mov	r5, r0
 8007506:	460c      	mov	r4, r1
 8007508:	b913      	cbnz	r3, 8007510 <_fflush_r+0x10>
 800750a:	2500      	movs	r5, #0
 800750c:	4628      	mov	r0, r5
 800750e:	bd38      	pop	{r3, r4, r5, pc}
 8007510:	b118      	cbz	r0, 800751a <_fflush_r+0x1a>
 8007512:	6a03      	ldr	r3, [r0, #32]
 8007514:	b90b      	cbnz	r3, 800751a <_fflush_r+0x1a>
 8007516:	f7fe fe89 	bl	800622c <__sinit>
 800751a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0f3      	beq.n	800750a <_fflush_r+0xa>
 8007522:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007524:	07d0      	lsls	r0, r2, #31
 8007526:	d404      	bmi.n	8007532 <_fflush_r+0x32>
 8007528:	0599      	lsls	r1, r3, #22
 800752a:	d402      	bmi.n	8007532 <_fflush_r+0x32>
 800752c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800752e:	f7ff f83e 	bl	80065ae <__retarget_lock_acquire_recursive>
 8007532:	4628      	mov	r0, r5
 8007534:	4621      	mov	r1, r4
 8007536:	f7ff ff61 	bl	80073fc <__sflush_r>
 800753a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800753c:	4605      	mov	r5, r0
 800753e:	07da      	lsls	r2, r3, #31
 8007540:	d4e4      	bmi.n	800750c <_fflush_r+0xc>
 8007542:	89a3      	ldrh	r3, [r4, #12]
 8007544:	059b      	lsls	r3, r3, #22
 8007546:	d4e1      	bmi.n	800750c <_fflush_r+0xc>
 8007548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800754a:	f7ff f831 	bl	80065b0 <__retarget_lock_release_recursive>
 800754e:	e7dd      	b.n	800750c <_fflush_r+0xc>

08007550 <fiprintf>:
 8007550:	b40e      	push	{r1, r2, r3}
 8007552:	b503      	push	{r0, r1, lr}
 8007554:	4601      	mov	r1, r0
 8007556:	ab03      	add	r3, sp, #12
 8007558:	4805      	ldr	r0, [pc, #20]	; (8007570 <fiprintf+0x20>)
 800755a:	f853 2b04 	ldr.w	r2, [r3], #4
 800755e:	6800      	ldr	r0, [r0, #0]
 8007560:	9301      	str	r3, [sp, #4]
 8007562:	f000 f991 	bl	8007888 <_vfiprintf_r>
 8007566:	b002      	add	sp, #8
 8007568:	f85d eb04 	ldr.w	lr, [sp], #4
 800756c:	b003      	add	sp, #12
 800756e:	4770      	bx	lr
 8007570:	20000064 	.word	0x20000064

08007574 <__sccl>:
 8007574:	b570      	push	{r4, r5, r6, lr}
 8007576:	780b      	ldrb	r3, [r1, #0]
 8007578:	4604      	mov	r4, r0
 800757a:	2b5e      	cmp	r3, #94	; 0x5e
 800757c:	bf0b      	itete	eq
 800757e:	784b      	ldrbeq	r3, [r1, #1]
 8007580:	1c4a      	addne	r2, r1, #1
 8007582:	1c8a      	addeq	r2, r1, #2
 8007584:	2100      	movne	r1, #0
 8007586:	bf08      	it	eq
 8007588:	2101      	moveq	r1, #1
 800758a:	3801      	subs	r0, #1
 800758c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007590:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007594:	42a8      	cmp	r0, r5
 8007596:	d1fb      	bne.n	8007590 <__sccl+0x1c>
 8007598:	b90b      	cbnz	r3, 800759e <__sccl+0x2a>
 800759a:	1e50      	subs	r0, r2, #1
 800759c:	bd70      	pop	{r4, r5, r6, pc}
 800759e:	f081 0101 	eor.w	r1, r1, #1
 80075a2:	4610      	mov	r0, r2
 80075a4:	54e1      	strb	r1, [r4, r3]
 80075a6:	4602      	mov	r2, r0
 80075a8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80075ac:	2d2d      	cmp	r5, #45	; 0x2d
 80075ae:	d005      	beq.n	80075bc <__sccl+0x48>
 80075b0:	2d5d      	cmp	r5, #93	; 0x5d
 80075b2:	d016      	beq.n	80075e2 <__sccl+0x6e>
 80075b4:	2d00      	cmp	r5, #0
 80075b6:	d0f1      	beq.n	800759c <__sccl+0x28>
 80075b8:	462b      	mov	r3, r5
 80075ba:	e7f2      	b.n	80075a2 <__sccl+0x2e>
 80075bc:	7846      	ldrb	r6, [r0, #1]
 80075be:	2e5d      	cmp	r6, #93	; 0x5d
 80075c0:	d0fa      	beq.n	80075b8 <__sccl+0x44>
 80075c2:	42b3      	cmp	r3, r6
 80075c4:	dcf8      	bgt.n	80075b8 <__sccl+0x44>
 80075c6:	461a      	mov	r2, r3
 80075c8:	3002      	adds	r0, #2
 80075ca:	3201      	adds	r2, #1
 80075cc:	4296      	cmp	r6, r2
 80075ce:	54a1      	strb	r1, [r4, r2]
 80075d0:	dcfb      	bgt.n	80075ca <__sccl+0x56>
 80075d2:	1af2      	subs	r2, r6, r3
 80075d4:	3a01      	subs	r2, #1
 80075d6:	42b3      	cmp	r3, r6
 80075d8:	bfa8      	it	ge
 80075da:	2200      	movge	r2, #0
 80075dc:	1c5d      	adds	r5, r3, #1
 80075de:	18ab      	adds	r3, r5, r2
 80075e0:	e7e1      	b.n	80075a6 <__sccl+0x32>
 80075e2:	4610      	mov	r0, r2
 80075e4:	e7da      	b.n	800759c <__sccl+0x28>

080075e6 <__submore>:
 80075e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ea:	460c      	mov	r4, r1
 80075ec:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80075ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075f2:	4299      	cmp	r1, r3
 80075f4:	d11b      	bne.n	800762e <__submore+0x48>
 80075f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80075fa:	f7ff f869 	bl	80066d0 <_malloc_r>
 80075fe:	b918      	cbnz	r0, 8007608 <__submore+0x22>
 8007600:	f04f 30ff 	mov.w	r0, #4294967295
 8007604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800760c:	63a3      	str	r3, [r4, #56]	; 0x38
 800760e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007612:	6360      	str	r0, [r4, #52]	; 0x34
 8007614:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007618:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800761c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007620:	7043      	strb	r3, [r0, #1]
 8007622:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007626:	7003      	strb	r3, [r0, #0]
 8007628:	6020      	str	r0, [r4, #0]
 800762a:	2000      	movs	r0, #0
 800762c:	e7ea      	b.n	8007604 <__submore+0x1e>
 800762e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007630:	0077      	lsls	r7, r6, #1
 8007632:	463a      	mov	r2, r7
 8007634:	f000 f85d 	bl	80076f2 <_realloc_r>
 8007638:	4605      	mov	r5, r0
 800763a:	2800      	cmp	r0, #0
 800763c:	d0e0      	beq.n	8007600 <__submore+0x1a>
 800763e:	eb00 0806 	add.w	r8, r0, r6
 8007642:	4601      	mov	r1, r0
 8007644:	4632      	mov	r2, r6
 8007646:	4640      	mov	r0, r8
 8007648:	f000 f83e 	bl	80076c8 <memcpy>
 800764c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007650:	f8c4 8000 	str.w	r8, [r4]
 8007654:	e7e9      	b.n	800762a <__submore+0x44>

08007656 <memmove>:
 8007656:	4288      	cmp	r0, r1
 8007658:	b510      	push	{r4, lr}
 800765a:	eb01 0402 	add.w	r4, r1, r2
 800765e:	d902      	bls.n	8007666 <memmove+0x10>
 8007660:	4284      	cmp	r4, r0
 8007662:	4623      	mov	r3, r4
 8007664:	d807      	bhi.n	8007676 <memmove+0x20>
 8007666:	1e43      	subs	r3, r0, #1
 8007668:	42a1      	cmp	r1, r4
 800766a:	d008      	beq.n	800767e <memmove+0x28>
 800766c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007670:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007674:	e7f8      	b.n	8007668 <memmove+0x12>
 8007676:	4601      	mov	r1, r0
 8007678:	4402      	add	r2, r0
 800767a:	428a      	cmp	r2, r1
 800767c:	d100      	bne.n	8007680 <memmove+0x2a>
 800767e:	bd10      	pop	{r4, pc}
 8007680:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007684:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007688:	e7f7      	b.n	800767a <memmove+0x24>
	...

0800768c <_sbrk_r>:
 800768c:	b538      	push	{r3, r4, r5, lr}
 800768e:	2300      	movs	r3, #0
 8007690:	4d05      	ldr	r5, [pc, #20]	; (80076a8 <_sbrk_r+0x1c>)
 8007692:	4604      	mov	r4, r0
 8007694:	4608      	mov	r0, r1
 8007696:	602b      	str	r3, [r5, #0]
 8007698:	f7fa f99c 	bl	80019d4 <_sbrk>
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	d102      	bne.n	80076a6 <_sbrk_r+0x1a>
 80076a0:	682b      	ldr	r3, [r5, #0]
 80076a2:	b103      	cbz	r3, 80076a6 <_sbrk_r+0x1a>
 80076a4:	6023      	str	r3, [r4, #0]
 80076a6:	bd38      	pop	{r3, r4, r5, pc}
 80076a8:	20000560 	.word	0x20000560

080076ac <memchr>:
 80076ac:	4603      	mov	r3, r0
 80076ae:	b510      	push	{r4, lr}
 80076b0:	b2c9      	uxtb	r1, r1
 80076b2:	4402      	add	r2, r0
 80076b4:	4293      	cmp	r3, r2
 80076b6:	4618      	mov	r0, r3
 80076b8:	d101      	bne.n	80076be <memchr+0x12>
 80076ba:	2000      	movs	r0, #0
 80076bc:	e003      	b.n	80076c6 <memchr+0x1a>
 80076be:	7804      	ldrb	r4, [r0, #0]
 80076c0:	3301      	adds	r3, #1
 80076c2:	428c      	cmp	r4, r1
 80076c4:	d1f6      	bne.n	80076b4 <memchr+0x8>
 80076c6:	bd10      	pop	{r4, pc}

080076c8 <memcpy>:
 80076c8:	440a      	add	r2, r1
 80076ca:	4291      	cmp	r1, r2
 80076cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80076d0:	d100      	bne.n	80076d4 <memcpy+0xc>
 80076d2:	4770      	bx	lr
 80076d4:	b510      	push	{r4, lr}
 80076d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076da:	4291      	cmp	r1, r2
 80076dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076e0:	d1f9      	bne.n	80076d6 <memcpy+0xe>
 80076e2:	bd10      	pop	{r4, pc}

080076e4 <abort>:
 80076e4:	2006      	movs	r0, #6
 80076e6:	b508      	push	{r3, lr}
 80076e8:	f000 faa6 	bl	8007c38 <raise>
 80076ec:	2001      	movs	r0, #1
 80076ee:	f7fa f8fe 	bl	80018ee <_exit>

080076f2 <_realloc_r>:
 80076f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076f6:	4680      	mov	r8, r0
 80076f8:	4614      	mov	r4, r2
 80076fa:	460e      	mov	r6, r1
 80076fc:	b921      	cbnz	r1, 8007708 <_realloc_r+0x16>
 80076fe:	4611      	mov	r1, r2
 8007700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007704:	f7fe bfe4 	b.w	80066d0 <_malloc_r>
 8007708:	b92a      	cbnz	r2, 8007716 <_realloc_r+0x24>
 800770a:	f7fe ff71 	bl	80065f0 <_free_r>
 800770e:	4625      	mov	r5, r4
 8007710:	4628      	mov	r0, r5
 8007712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007716:	f000 faab 	bl	8007c70 <_malloc_usable_size_r>
 800771a:	4284      	cmp	r4, r0
 800771c:	4607      	mov	r7, r0
 800771e:	d802      	bhi.n	8007726 <_realloc_r+0x34>
 8007720:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007724:	d812      	bhi.n	800774c <_realloc_r+0x5a>
 8007726:	4621      	mov	r1, r4
 8007728:	4640      	mov	r0, r8
 800772a:	f7fe ffd1 	bl	80066d0 <_malloc_r>
 800772e:	4605      	mov	r5, r0
 8007730:	2800      	cmp	r0, #0
 8007732:	d0ed      	beq.n	8007710 <_realloc_r+0x1e>
 8007734:	42bc      	cmp	r4, r7
 8007736:	4622      	mov	r2, r4
 8007738:	4631      	mov	r1, r6
 800773a:	bf28      	it	cs
 800773c:	463a      	movcs	r2, r7
 800773e:	f7ff ffc3 	bl	80076c8 <memcpy>
 8007742:	4631      	mov	r1, r6
 8007744:	4640      	mov	r0, r8
 8007746:	f7fe ff53 	bl	80065f0 <_free_r>
 800774a:	e7e1      	b.n	8007710 <_realloc_r+0x1e>
 800774c:	4635      	mov	r5, r6
 800774e:	e7df      	b.n	8007710 <_realloc_r+0x1e>

08007750 <_strtoul_l.constprop.0>:
 8007750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007754:	4686      	mov	lr, r0
 8007756:	460d      	mov	r5, r1
 8007758:	4f35      	ldr	r7, [pc, #212]	; (8007830 <_strtoul_l.constprop.0+0xe0>)
 800775a:	4628      	mov	r0, r5
 800775c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007760:	5d3e      	ldrb	r6, [r7, r4]
 8007762:	f016 0608 	ands.w	r6, r6, #8
 8007766:	d1f8      	bne.n	800775a <_strtoul_l.constprop.0+0xa>
 8007768:	2c2d      	cmp	r4, #45	; 0x2d
 800776a:	d130      	bne.n	80077ce <_strtoul_l.constprop.0+0x7e>
 800776c:	2601      	movs	r6, #1
 800776e:	782c      	ldrb	r4, [r5, #0]
 8007770:	1c85      	adds	r5, r0, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d057      	beq.n	8007826 <_strtoul_l.constprop.0+0xd6>
 8007776:	2b10      	cmp	r3, #16
 8007778:	d109      	bne.n	800778e <_strtoul_l.constprop.0+0x3e>
 800777a:	2c30      	cmp	r4, #48	; 0x30
 800777c:	d107      	bne.n	800778e <_strtoul_l.constprop.0+0x3e>
 800777e:	7828      	ldrb	r0, [r5, #0]
 8007780:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007784:	2858      	cmp	r0, #88	; 0x58
 8007786:	d149      	bne.n	800781c <_strtoul_l.constprop.0+0xcc>
 8007788:	2310      	movs	r3, #16
 800778a:	786c      	ldrb	r4, [r5, #1]
 800778c:	3502      	adds	r5, #2
 800778e:	f04f 38ff 	mov.w	r8, #4294967295
 8007792:	fbb8 f8f3 	udiv	r8, r8, r3
 8007796:	2700      	movs	r7, #0
 8007798:	fb03 f908 	mul.w	r9, r3, r8
 800779c:	4638      	mov	r0, r7
 800779e:	ea6f 0909 	mvn.w	r9, r9
 80077a2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80077a6:	f1bc 0f09 	cmp.w	ip, #9
 80077aa:	d815      	bhi.n	80077d8 <_strtoul_l.constprop.0+0x88>
 80077ac:	4664      	mov	r4, ip
 80077ae:	42a3      	cmp	r3, r4
 80077b0:	dd23      	ble.n	80077fa <_strtoul_l.constprop.0+0xaa>
 80077b2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80077b6:	d007      	beq.n	80077c8 <_strtoul_l.constprop.0+0x78>
 80077b8:	4580      	cmp	r8, r0
 80077ba:	d31b      	bcc.n	80077f4 <_strtoul_l.constprop.0+0xa4>
 80077bc:	d101      	bne.n	80077c2 <_strtoul_l.constprop.0+0x72>
 80077be:	45a1      	cmp	r9, r4
 80077c0:	db18      	blt.n	80077f4 <_strtoul_l.constprop.0+0xa4>
 80077c2:	2701      	movs	r7, #1
 80077c4:	fb00 4003 	mla	r0, r0, r3, r4
 80077c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077cc:	e7e9      	b.n	80077a2 <_strtoul_l.constprop.0+0x52>
 80077ce:	2c2b      	cmp	r4, #43	; 0x2b
 80077d0:	bf04      	itt	eq
 80077d2:	782c      	ldrbeq	r4, [r5, #0]
 80077d4:	1c85      	addeq	r5, r0, #2
 80077d6:	e7cc      	b.n	8007772 <_strtoul_l.constprop.0+0x22>
 80077d8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80077dc:	f1bc 0f19 	cmp.w	ip, #25
 80077e0:	d801      	bhi.n	80077e6 <_strtoul_l.constprop.0+0x96>
 80077e2:	3c37      	subs	r4, #55	; 0x37
 80077e4:	e7e3      	b.n	80077ae <_strtoul_l.constprop.0+0x5e>
 80077e6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80077ea:	f1bc 0f19 	cmp.w	ip, #25
 80077ee:	d804      	bhi.n	80077fa <_strtoul_l.constprop.0+0xaa>
 80077f0:	3c57      	subs	r4, #87	; 0x57
 80077f2:	e7dc      	b.n	80077ae <_strtoul_l.constprop.0+0x5e>
 80077f4:	f04f 37ff 	mov.w	r7, #4294967295
 80077f8:	e7e6      	b.n	80077c8 <_strtoul_l.constprop.0+0x78>
 80077fa:	1c7b      	adds	r3, r7, #1
 80077fc:	d106      	bne.n	800780c <_strtoul_l.constprop.0+0xbc>
 80077fe:	2322      	movs	r3, #34	; 0x22
 8007800:	4638      	mov	r0, r7
 8007802:	f8ce 3000 	str.w	r3, [lr]
 8007806:	b932      	cbnz	r2, 8007816 <_strtoul_l.constprop.0+0xc6>
 8007808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800780c:	b106      	cbz	r6, 8007810 <_strtoul_l.constprop.0+0xc0>
 800780e:	4240      	negs	r0, r0
 8007810:	2a00      	cmp	r2, #0
 8007812:	d0f9      	beq.n	8007808 <_strtoul_l.constprop.0+0xb8>
 8007814:	b107      	cbz	r7, 8007818 <_strtoul_l.constprop.0+0xc8>
 8007816:	1e69      	subs	r1, r5, #1
 8007818:	6011      	str	r1, [r2, #0]
 800781a:	e7f5      	b.n	8007808 <_strtoul_l.constprop.0+0xb8>
 800781c:	2430      	movs	r4, #48	; 0x30
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1b5      	bne.n	800778e <_strtoul_l.constprop.0+0x3e>
 8007822:	2308      	movs	r3, #8
 8007824:	e7b3      	b.n	800778e <_strtoul_l.constprop.0+0x3e>
 8007826:	2c30      	cmp	r4, #48	; 0x30
 8007828:	d0a9      	beq.n	800777e <_strtoul_l.constprop.0+0x2e>
 800782a:	230a      	movs	r3, #10
 800782c:	e7af      	b.n	800778e <_strtoul_l.constprop.0+0x3e>
 800782e:	bf00      	nop
 8007830:	08007ec3 	.word	0x08007ec3

08007834 <_strtoul_r>:
 8007834:	f7ff bf8c 	b.w	8007750 <_strtoul_l.constprop.0>

08007838 <__sfputc_r>:
 8007838:	6893      	ldr	r3, [r2, #8]
 800783a:	b410      	push	{r4}
 800783c:	3b01      	subs	r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	6093      	str	r3, [r2, #8]
 8007842:	da07      	bge.n	8007854 <__sfputc_r+0x1c>
 8007844:	6994      	ldr	r4, [r2, #24]
 8007846:	42a3      	cmp	r3, r4
 8007848:	db01      	blt.n	800784e <__sfputc_r+0x16>
 800784a:	290a      	cmp	r1, #10
 800784c:	d102      	bne.n	8007854 <__sfputc_r+0x1c>
 800784e:	bc10      	pop	{r4}
 8007850:	f000 b934 	b.w	8007abc <__swbuf_r>
 8007854:	6813      	ldr	r3, [r2, #0]
 8007856:	1c58      	adds	r0, r3, #1
 8007858:	6010      	str	r0, [r2, #0]
 800785a:	7019      	strb	r1, [r3, #0]
 800785c:	4608      	mov	r0, r1
 800785e:	bc10      	pop	{r4}
 8007860:	4770      	bx	lr

08007862 <__sfputs_r>:
 8007862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007864:	4606      	mov	r6, r0
 8007866:	460f      	mov	r7, r1
 8007868:	4614      	mov	r4, r2
 800786a:	18d5      	adds	r5, r2, r3
 800786c:	42ac      	cmp	r4, r5
 800786e:	d101      	bne.n	8007874 <__sfputs_r+0x12>
 8007870:	2000      	movs	r0, #0
 8007872:	e007      	b.n	8007884 <__sfputs_r+0x22>
 8007874:	463a      	mov	r2, r7
 8007876:	4630      	mov	r0, r6
 8007878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800787c:	f7ff ffdc 	bl	8007838 <__sfputc_r>
 8007880:	1c43      	adds	r3, r0, #1
 8007882:	d1f3      	bne.n	800786c <__sfputs_r+0xa>
 8007884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007888 <_vfiprintf_r>:
 8007888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788c:	460d      	mov	r5, r1
 800788e:	4614      	mov	r4, r2
 8007890:	4698      	mov	r8, r3
 8007892:	4606      	mov	r6, r0
 8007894:	b09d      	sub	sp, #116	; 0x74
 8007896:	b118      	cbz	r0, 80078a0 <_vfiprintf_r+0x18>
 8007898:	6a03      	ldr	r3, [r0, #32]
 800789a:	b90b      	cbnz	r3, 80078a0 <_vfiprintf_r+0x18>
 800789c:	f7fe fcc6 	bl	800622c <__sinit>
 80078a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078a2:	07d9      	lsls	r1, r3, #31
 80078a4:	d405      	bmi.n	80078b2 <_vfiprintf_r+0x2a>
 80078a6:	89ab      	ldrh	r3, [r5, #12]
 80078a8:	059a      	lsls	r2, r3, #22
 80078aa:	d402      	bmi.n	80078b2 <_vfiprintf_r+0x2a>
 80078ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078ae:	f7fe fe7e 	bl	80065ae <__retarget_lock_acquire_recursive>
 80078b2:	89ab      	ldrh	r3, [r5, #12]
 80078b4:	071b      	lsls	r3, r3, #28
 80078b6:	d501      	bpl.n	80078bc <_vfiprintf_r+0x34>
 80078b8:	692b      	ldr	r3, [r5, #16]
 80078ba:	b99b      	cbnz	r3, 80078e4 <_vfiprintf_r+0x5c>
 80078bc:	4629      	mov	r1, r5
 80078be:	4630      	mov	r0, r6
 80078c0:	f000 f93a 	bl	8007b38 <__swsetup_r>
 80078c4:	b170      	cbz	r0, 80078e4 <_vfiprintf_r+0x5c>
 80078c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078c8:	07dc      	lsls	r4, r3, #31
 80078ca:	d504      	bpl.n	80078d6 <_vfiprintf_r+0x4e>
 80078cc:	f04f 30ff 	mov.w	r0, #4294967295
 80078d0:	b01d      	add	sp, #116	; 0x74
 80078d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d6:	89ab      	ldrh	r3, [r5, #12]
 80078d8:	0598      	lsls	r0, r3, #22
 80078da:	d4f7      	bmi.n	80078cc <_vfiprintf_r+0x44>
 80078dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078de:	f7fe fe67 	bl	80065b0 <__retarget_lock_release_recursive>
 80078e2:	e7f3      	b.n	80078cc <_vfiprintf_r+0x44>
 80078e4:	2300      	movs	r3, #0
 80078e6:	9309      	str	r3, [sp, #36]	; 0x24
 80078e8:	2320      	movs	r3, #32
 80078ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078ee:	2330      	movs	r3, #48	; 0x30
 80078f0:	f04f 0901 	mov.w	r9, #1
 80078f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80078f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007aa8 <_vfiprintf_r+0x220>
 80078fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007900:	4623      	mov	r3, r4
 8007902:	469a      	mov	sl, r3
 8007904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007908:	b10a      	cbz	r2, 800790e <_vfiprintf_r+0x86>
 800790a:	2a25      	cmp	r2, #37	; 0x25
 800790c:	d1f9      	bne.n	8007902 <_vfiprintf_r+0x7a>
 800790e:	ebba 0b04 	subs.w	fp, sl, r4
 8007912:	d00b      	beq.n	800792c <_vfiprintf_r+0xa4>
 8007914:	465b      	mov	r3, fp
 8007916:	4622      	mov	r2, r4
 8007918:	4629      	mov	r1, r5
 800791a:	4630      	mov	r0, r6
 800791c:	f7ff ffa1 	bl	8007862 <__sfputs_r>
 8007920:	3001      	adds	r0, #1
 8007922:	f000 80a9 	beq.w	8007a78 <_vfiprintf_r+0x1f0>
 8007926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007928:	445a      	add	r2, fp
 800792a:	9209      	str	r2, [sp, #36]	; 0x24
 800792c:	f89a 3000 	ldrb.w	r3, [sl]
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 80a1 	beq.w	8007a78 <_vfiprintf_r+0x1f0>
 8007936:	2300      	movs	r3, #0
 8007938:	f04f 32ff 	mov.w	r2, #4294967295
 800793c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007940:	f10a 0a01 	add.w	sl, sl, #1
 8007944:	9304      	str	r3, [sp, #16]
 8007946:	9307      	str	r3, [sp, #28]
 8007948:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800794c:	931a      	str	r3, [sp, #104]	; 0x68
 800794e:	4654      	mov	r4, sl
 8007950:	2205      	movs	r2, #5
 8007952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007956:	4854      	ldr	r0, [pc, #336]	; (8007aa8 <_vfiprintf_r+0x220>)
 8007958:	f7ff fea8 	bl	80076ac <memchr>
 800795c:	9a04      	ldr	r2, [sp, #16]
 800795e:	b9d8      	cbnz	r0, 8007998 <_vfiprintf_r+0x110>
 8007960:	06d1      	lsls	r1, r2, #27
 8007962:	bf44      	itt	mi
 8007964:	2320      	movmi	r3, #32
 8007966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800796a:	0713      	lsls	r3, r2, #28
 800796c:	bf44      	itt	mi
 800796e:	232b      	movmi	r3, #43	; 0x2b
 8007970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007974:	f89a 3000 	ldrb.w	r3, [sl]
 8007978:	2b2a      	cmp	r3, #42	; 0x2a
 800797a:	d015      	beq.n	80079a8 <_vfiprintf_r+0x120>
 800797c:	4654      	mov	r4, sl
 800797e:	2000      	movs	r0, #0
 8007980:	f04f 0c0a 	mov.w	ip, #10
 8007984:	9a07      	ldr	r2, [sp, #28]
 8007986:	4621      	mov	r1, r4
 8007988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800798c:	3b30      	subs	r3, #48	; 0x30
 800798e:	2b09      	cmp	r3, #9
 8007990:	d94d      	bls.n	8007a2e <_vfiprintf_r+0x1a6>
 8007992:	b1b0      	cbz	r0, 80079c2 <_vfiprintf_r+0x13a>
 8007994:	9207      	str	r2, [sp, #28]
 8007996:	e014      	b.n	80079c2 <_vfiprintf_r+0x13a>
 8007998:	eba0 0308 	sub.w	r3, r0, r8
 800799c:	fa09 f303 	lsl.w	r3, r9, r3
 80079a0:	4313      	orrs	r3, r2
 80079a2:	46a2      	mov	sl, r4
 80079a4:	9304      	str	r3, [sp, #16]
 80079a6:	e7d2      	b.n	800794e <_vfiprintf_r+0xc6>
 80079a8:	9b03      	ldr	r3, [sp, #12]
 80079aa:	1d19      	adds	r1, r3, #4
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	9103      	str	r1, [sp, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	bfbb      	ittet	lt
 80079b4:	425b      	neglt	r3, r3
 80079b6:	f042 0202 	orrlt.w	r2, r2, #2
 80079ba:	9307      	strge	r3, [sp, #28]
 80079bc:	9307      	strlt	r3, [sp, #28]
 80079be:	bfb8      	it	lt
 80079c0:	9204      	strlt	r2, [sp, #16]
 80079c2:	7823      	ldrb	r3, [r4, #0]
 80079c4:	2b2e      	cmp	r3, #46	; 0x2e
 80079c6:	d10c      	bne.n	80079e2 <_vfiprintf_r+0x15a>
 80079c8:	7863      	ldrb	r3, [r4, #1]
 80079ca:	2b2a      	cmp	r3, #42	; 0x2a
 80079cc:	d134      	bne.n	8007a38 <_vfiprintf_r+0x1b0>
 80079ce:	9b03      	ldr	r3, [sp, #12]
 80079d0:	3402      	adds	r4, #2
 80079d2:	1d1a      	adds	r2, r3, #4
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	9203      	str	r2, [sp, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	bfb8      	it	lt
 80079dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80079e0:	9305      	str	r3, [sp, #20]
 80079e2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007aac <_vfiprintf_r+0x224>
 80079e6:	2203      	movs	r2, #3
 80079e8:	4650      	mov	r0, sl
 80079ea:	7821      	ldrb	r1, [r4, #0]
 80079ec:	f7ff fe5e 	bl	80076ac <memchr>
 80079f0:	b138      	cbz	r0, 8007a02 <_vfiprintf_r+0x17a>
 80079f2:	2240      	movs	r2, #64	; 0x40
 80079f4:	9b04      	ldr	r3, [sp, #16]
 80079f6:	eba0 000a 	sub.w	r0, r0, sl
 80079fa:	4082      	lsls	r2, r0
 80079fc:	4313      	orrs	r3, r2
 80079fe:	3401      	adds	r4, #1
 8007a00:	9304      	str	r3, [sp, #16]
 8007a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a06:	2206      	movs	r2, #6
 8007a08:	4829      	ldr	r0, [pc, #164]	; (8007ab0 <_vfiprintf_r+0x228>)
 8007a0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a0e:	f7ff fe4d 	bl	80076ac <memchr>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	d03f      	beq.n	8007a96 <_vfiprintf_r+0x20e>
 8007a16:	4b27      	ldr	r3, [pc, #156]	; (8007ab4 <_vfiprintf_r+0x22c>)
 8007a18:	bb1b      	cbnz	r3, 8007a62 <_vfiprintf_r+0x1da>
 8007a1a:	9b03      	ldr	r3, [sp, #12]
 8007a1c:	3307      	adds	r3, #7
 8007a1e:	f023 0307 	bic.w	r3, r3, #7
 8007a22:	3308      	adds	r3, #8
 8007a24:	9303      	str	r3, [sp, #12]
 8007a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a28:	443b      	add	r3, r7
 8007a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a2c:	e768      	b.n	8007900 <_vfiprintf_r+0x78>
 8007a2e:	460c      	mov	r4, r1
 8007a30:	2001      	movs	r0, #1
 8007a32:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a36:	e7a6      	b.n	8007986 <_vfiprintf_r+0xfe>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	f04f 0c0a 	mov.w	ip, #10
 8007a3e:	4619      	mov	r1, r3
 8007a40:	3401      	adds	r4, #1
 8007a42:	9305      	str	r3, [sp, #20]
 8007a44:	4620      	mov	r0, r4
 8007a46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a4a:	3a30      	subs	r2, #48	; 0x30
 8007a4c:	2a09      	cmp	r2, #9
 8007a4e:	d903      	bls.n	8007a58 <_vfiprintf_r+0x1d0>
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d0c6      	beq.n	80079e2 <_vfiprintf_r+0x15a>
 8007a54:	9105      	str	r1, [sp, #20]
 8007a56:	e7c4      	b.n	80079e2 <_vfiprintf_r+0x15a>
 8007a58:	4604      	mov	r4, r0
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a60:	e7f0      	b.n	8007a44 <_vfiprintf_r+0x1bc>
 8007a62:	ab03      	add	r3, sp, #12
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	462a      	mov	r2, r5
 8007a68:	4630      	mov	r0, r6
 8007a6a:	4b13      	ldr	r3, [pc, #76]	; (8007ab8 <_vfiprintf_r+0x230>)
 8007a6c:	a904      	add	r1, sp, #16
 8007a6e:	f3af 8000 	nop.w
 8007a72:	4607      	mov	r7, r0
 8007a74:	1c78      	adds	r0, r7, #1
 8007a76:	d1d6      	bne.n	8007a26 <_vfiprintf_r+0x19e>
 8007a78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a7a:	07d9      	lsls	r1, r3, #31
 8007a7c:	d405      	bmi.n	8007a8a <_vfiprintf_r+0x202>
 8007a7e:	89ab      	ldrh	r3, [r5, #12]
 8007a80:	059a      	lsls	r2, r3, #22
 8007a82:	d402      	bmi.n	8007a8a <_vfiprintf_r+0x202>
 8007a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a86:	f7fe fd93 	bl	80065b0 <__retarget_lock_release_recursive>
 8007a8a:	89ab      	ldrh	r3, [r5, #12]
 8007a8c:	065b      	lsls	r3, r3, #25
 8007a8e:	f53f af1d 	bmi.w	80078cc <_vfiprintf_r+0x44>
 8007a92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a94:	e71c      	b.n	80078d0 <_vfiprintf_r+0x48>
 8007a96:	ab03      	add	r3, sp, #12
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	462a      	mov	r2, r5
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	4b06      	ldr	r3, [pc, #24]	; (8007ab8 <_vfiprintf_r+0x230>)
 8007aa0:	a904      	add	r1, sp, #16
 8007aa2:	f7ff fa3d 	bl	8006f20 <_printf_i>
 8007aa6:	e7e4      	b.n	8007a72 <_vfiprintf_r+0x1ea>
 8007aa8:	08008070 	.word	0x08008070
 8007aac:	08008076 	.word	0x08008076
 8007ab0:	0800807a 	.word	0x0800807a
 8007ab4:	00000000 	.word	0x00000000
 8007ab8:	08007863 	.word	0x08007863

08007abc <__swbuf_r>:
 8007abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007abe:	460e      	mov	r6, r1
 8007ac0:	4614      	mov	r4, r2
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	b118      	cbz	r0, 8007ace <__swbuf_r+0x12>
 8007ac6:	6a03      	ldr	r3, [r0, #32]
 8007ac8:	b90b      	cbnz	r3, 8007ace <__swbuf_r+0x12>
 8007aca:	f7fe fbaf 	bl	800622c <__sinit>
 8007ace:	69a3      	ldr	r3, [r4, #24]
 8007ad0:	60a3      	str	r3, [r4, #8]
 8007ad2:	89a3      	ldrh	r3, [r4, #12]
 8007ad4:	071a      	lsls	r2, r3, #28
 8007ad6:	d525      	bpl.n	8007b24 <__swbuf_r+0x68>
 8007ad8:	6923      	ldr	r3, [r4, #16]
 8007ada:	b31b      	cbz	r3, 8007b24 <__swbuf_r+0x68>
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	6922      	ldr	r2, [r4, #16]
 8007ae0:	b2f6      	uxtb	r6, r6
 8007ae2:	1a98      	subs	r0, r3, r2
 8007ae4:	6963      	ldr	r3, [r4, #20]
 8007ae6:	4637      	mov	r7, r6
 8007ae8:	4283      	cmp	r3, r0
 8007aea:	dc04      	bgt.n	8007af6 <__swbuf_r+0x3a>
 8007aec:	4621      	mov	r1, r4
 8007aee:	4628      	mov	r0, r5
 8007af0:	f7ff fd06 	bl	8007500 <_fflush_r>
 8007af4:	b9e0      	cbnz	r0, 8007b30 <__swbuf_r+0x74>
 8007af6:	68a3      	ldr	r3, [r4, #8]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	60a3      	str	r3, [r4, #8]
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	1c5a      	adds	r2, r3, #1
 8007b00:	6022      	str	r2, [r4, #0]
 8007b02:	701e      	strb	r6, [r3, #0]
 8007b04:	6962      	ldr	r2, [r4, #20]
 8007b06:	1c43      	adds	r3, r0, #1
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d004      	beq.n	8007b16 <__swbuf_r+0x5a>
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	07db      	lsls	r3, r3, #31
 8007b10:	d506      	bpl.n	8007b20 <__swbuf_r+0x64>
 8007b12:	2e0a      	cmp	r6, #10
 8007b14:	d104      	bne.n	8007b20 <__swbuf_r+0x64>
 8007b16:	4621      	mov	r1, r4
 8007b18:	4628      	mov	r0, r5
 8007b1a:	f7ff fcf1 	bl	8007500 <_fflush_r>
 8007b1e:	b938      	cbnz	r0, 8007b30 <__swbuf_r+0x74>
 8007b20:	4638      	mov	r0, r7
 8007b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b24:	4621      	mov	r1, r4
 8007b26:	4628      	mov	r0, r5
 8007b28:	f000 f806 	bl	8007b38 <__swsetup_r>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d0d5      	beq.n	8007adc <__swbuf_r+0x20>
 8007b30:	f04f 37ff 	mov.w	r7, #4294967295
 8007b34:	e7f4      	b.n	8007b20 <__swbuf_r+0x64>
	...

08007b38 <__swsetup_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	4b2a      	ldr	r3, [pc, #168]	; (8007be4 <__swsetup_r+0xac>)
 8007b3c:	4605      	mov	r5, r0
 8007b3e:	6818      	ldr	r0, [r3, #0]
 8007b40:	460c      	mov	r4, r1
 8007b42:	b118      	cbz	r0, 8007b4c <__swsetup_r+0x14>
 8007b44:	6a03      	ldr	r3, [r0, #32]
 8007b46:	b90b      	cbnz	r3, 8007b4c <__swsetup_r+0x14>
 8007b48:	f7fe fb70 	bl	800622c <__sinit>
 8007b4c:	89a3      	ldrh	r3, [r4, #12]
 8007b4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b52:	0718      	lsls	r0, r3, #28
 8007b54:	d422      	bmi.n	8007b9c <__swsetup_r+0x64>
 8007b56:	06d9      	lsls	r1, r3, #27
 8007b58:	d407      	bmi.n	8007b6a <__swsetup_r+0x32>
 8007b5a:	2309      	movs	r3, #9
 8007b5c:	602b      	str	r3, [r5, #0]
 8007b5e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b62:	f04f 30ff 	mov.w	r0, #4294967295
 8007b66:	81a3      	strh	r3, [r4, #12]
 8007b68:	e034      	b.n	8007bd4 <__swsetup_r+0x9c>
 8007b6a:	0758      	lsls	r0, r3, #29
 8007b6c:	d512      	bpl.n	8007b94 <__swsetup_r+0x5c>
 8007b6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b70:	b141      	cbz	r1, 8007b84 <__swsetup_r+0x4c>
 8007b72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b76:	4299      	cmp	r1, r3
 8007b78:	d002      	beq.n	8007b80 <__swsetup_r+0x48>
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	f7fe fd38 	bl	80065f0 <_free_r>
 8007b80:	2300      	movs	r3, #0
 8007b82:	6363      	str	r3, [r4, #52]	; 0x34
 8007b84:	89a3      	ldrh	r3, [r4, #12]
 8007b86:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b8a:	81a3      	strh	r3, [r4, #12]
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	6063      	str	r3, [r4, #4]
 8007b90:	6923      	ldr	r3, [r4, #16]
 8007b92:	6023      	str	r3, [r4, #0]
 8007b94:	89a3      	ldrh	r3, [r4, #12]
 8007b96:	f043 0308 	orr.w	r3, r3, #8
 8007b9a:	81a3      	strh	r3, [r4, #12]
 8007b9c:	6923      	ldr	r3, [r4, #16]
 8007b9e:	b94b      	cbnz	r3, 8007bb4 <__swsetup_r+0x7c>
 8007ba0:	89a3      	ldrh	r3, [r4, #12]
 8007ba2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007baa:	d003      	beq.n	8007bb4 <__swsetup_r+0x7c>
 8007bac:	4621      	mov	r1, r4
 8007bae:	4628      	mov	r0, r5
 8007bb0:	f000 f88b 	bl	8007cca <__smakebuf_r>
 8007bb4:	89a0      	ldrh	r0, [r4, #12]
 8007bb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bba:	f010 0301 	ands.w	r3, r0, #1
 8007bbe:	d00a      	beq.n	8007bd6 <__swsetup_r+0x9e>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	60a3      	str	r3, [r4, #8]
 8007bc4:	6963      	ldr	r3, [r4, #20]
 8007bc6:	425b      	negs	r3, r3
 8007bc8:	61a3      	str	r3, [r4, #24]
 8007bca:	6923      	ldr	r3, [r4, #16]
 8007bcc:	b943      	cbnz	r3, 8007be0 <__swsetup_r+0xa8>
 8007bce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007bd2:	d1c4      	bne.n	8007b5e <__swsetup_r+0x26>
 8007bd4:	bd38      	pop	{r3, r4, r5, pc}
 8007bd6:	0781      	lsls	r1, r0, #30
 8007bd8:	bf58      	it	pl
 8007bda:	6963      	ldrpl	r3, [r4, #20]
 8007bdc:	60a3      	str	r3, [r4, #8]
 8007bde:	e7f4      	b.n	8007bca <__swsetup_r+0x92>
 8007be0:	2000      	movs	r0, #0
 8007be2:	e7f7      	b.n	8007bd4 <__swsetup_r+0x9c>
 8007be4:	20000064 	.word	0x20000064

08007be8 <_raise_r>:
 8007be8:	291f      	cmp	r1, #31
 8007bea:	b538      	push	{r3, r4, r5, lr}
 8007bec:	4604      	mov	r4, r0
 8007bee:	460d      	mov	r5, r1
 8007bf0:	d904      	bls.n	8007bfc <_raise_r+0x14>
 8007bf2:	2316      	movs	r3, #22
 8007bf4:	6003      	str	r3, [r0, #0]
 8007bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfa:	bd38      	pop	{r3, r4, r5, pc}
 8007bfc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007bfe:	b112      	cbz	r2, 8007c06 <_raise_r+0x1e>
 8007c00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c04:	b94b      	cbnz	r3, 8007c1a <_raise_r+0x32>
 8007c06:	4620      	mov	r0, r4
 8007c08:	f000 f830 	bl	8007c6c <_getpid_r>
 8007c0c:	462a      	mov	r2, r5
 8007c0e:	4601      	mov	r1, r0
 8007c10:	4620      	mov	r0, r4
 8007c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c16:	f000 b817 	b.w	8007c48 <_kill_r>
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d00a      	beq.n	8007c34 <_raise_r+0x4c>
 8007c1e:	1c59      	adds	r1, r3, #1
 8007c20:	d103      	bne.n	8007c2a <_raise_r+0x42>
 8007c22:	2316      	movs	r3, #22
 8007c24:	6003      	str	r3, [r0, #0]
 8007c26:	2001      	movs	r0, #1
 8007c28:	e7e7      	b.n	8007bfa <_raise_r+0x12>
 8007c2a:	2400      	movs	r4, #0
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c32:	4798      	blx	r3
 8007c34:	2000      	movs	r0, #0
 8007c36:	e7e0      	b.n	8007bfa <_raise_r+0x12>

08007c38 <raise>:
 8007c38:	4b02      	ldr	r3, [pc, #8]	; (8007c44 <raise+0xc>)
 8007c3a:	4601      	mov	r1, r0
 8007c3c:	6818      	ldr	r0, [r3, #0]
 8007c3e:	f7ff bfd3 	b.w	8007be8 <_raise_r>
 8007c42:	bf00      	nop
 8007c44:	20000064 	.word	0x20000064

08007c48 <_kill_r>:
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	4d06      	ldr	r5, [pc, #24]	; (8007c68 <_kill_r+0x20>)
 8007c4e:	4604      	mov	r4, r0
 8007c50:	4608      	mov	r0, r1
 8007c52:	4611      	mov	r1, r2
 8007c54:	602b      	str	r3, [r5, #0]
 8007c56:	f7f9 fe3a 	bl	80018ce <_kill>
 8007c5a:	1c43      	adds	r3, r0, #1
 8007c5c:	d102      	bne.n	8007c64 <_kill_r+0x1c>
 8007c5e:	682b      	ldr	r3, [r5, #0]
 8007c60:	b103      	cbz	r3, 8007c64 <_kill_r+0x1c>
 8007c62:	6023      	str	r3, [r4, #0]
 8007c64:	bd38      	pop	{r3, r4, r5, pc}
 8007c66:	bf00      	nop
 8007c68:	20000560 	.word	0x20000560

08007c6c <_getpid_r>:
 8007c6c:	f7f9 be28 	b.w	80018c0 <_getpid>

08007c70 <_malloc_usable_size_r>:
 8007c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c74:	1f18      	subs	r0, r3, #4
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	bfbc      	itt	lt
 8007c7a:	580b      	ldrlt	r3, [r1, r0]
 8007c7c:	18c0      	addlt	r0, r0, r3
 8007c7e:	4770      	bx	lr

08007c80 <__swhatbuf_r>:
 8007c80:	b570      	push	{r4, r5, r6, lr}
 8007c82:	460c      	mov	r4, r1
 8007c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c88:	4615      	mov	r5, r2
 8007c8a:	2900      	cmp	r1, #0
 8007c8c:	461e      	mov	r6, r3
 8007c8e:	b096      	sub	sp, #88	; 0x58
 8007c90:	da0c      	bge.n	8007cac <__swhatbuf_r+0x2c>
 8007c92:	89a3      	ldrh	r3, [r4, #12]
 8007c94:	2100      	movs	r1, #0
 8007c96:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007c9a:	bf0c      	ite	eq
 8007c9c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007ca0:	2340      	movne	r3, #64	; 0x40
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	6031      	str	r1, [r6, #0]
 8007ca6:	602b      	str	r3, [r5, #0]
 8007ca8:	b016      	add	sp, #88	; 0x58
 8007caa:	bd70      	pop	{r4, r5, r6, pc}
 8007cac:	466a      	mov	r2, sp
 8007cae:	f000 f849 	bl	8007d44 <_fstat_r>
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	dbed      	blt.n	8007c92 <__swhatbuf_r+0x12>
 8007cb6:	9901      	ldr	r1, [sp, #4]
 8007cb8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007cbc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007cc0:	4259      	negs	r1, r3
 8007cc2:	4159      	adcs	r1, r3
 8007cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cc8:	e7eb      	b.n	8007ca2 <__swhatbuf_r+0x22>

08007cca <__smakebuf_r>:
 8007cca:	898b      	ldrh	r3, [r1, #12]
 8007ccc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007cce:	079d      	lsls	r5, r3, #30
 8007cd0:	4606      	mov	r6, r0
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	d507      	bpl.n	8007ce6 <__smakebuf_r+0x1c>
 8007cd6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007cda:	6023      	str	r3, [r4, #0]
 8007cdc:	6123      	str	r3, [r4, #16]
 8007cde:	2301      	movs	r3, #1
 8007ce0:	6163      	str	r3, [r4, #20]
 8007ce2:	b002      	add	sp, #8
 8007ce4:	bd70      	pop	{r4, r5, r6, pc}
 8007ce6:	466a      	mov	r2, sp
 8007ce8:	ab01      	add	r3, sp, #4
 8007cea:	f7ff ffc9 	bl	8007c80 <__swhatbuf_r>
 8007cee:	9900      	ldr	r1, [sp, #0]
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	f7fe fcec 	bl	80066d0 <_malloc_r>
 8007cf8:	b948      	cbnz	r0, 8007d0e <__smakebuf_r+0x44>
 8007cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cfe:	059a      	lsls	r2, r3, #22
 8007d00:	d4ef      	bmi.n	8007ce2 <__smakebuf_r+0x18>
 8007d02:	f023 0303 	bic.w	r3, r3, #3
 8007d06:	f043 0302 	orr.w	r3, r3, #2
 8007d0a:	81a3      	strh	r3, [r4, #12]
 8007d0c:	e7e3      	b.n	8007cd6 <__smakebuf_r+0xc>
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	6020      	str	r0, [r4, #0]
 8007d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d16:	81a3      	strh	r3, [r4, #12]
 8007d18:	9b00      	ldr	r3, [sp, #0]
 8007d1a:	6120      	str	r0, [r4, #16]
 8007d1c:	6163      	str	r3, [r4, #20]
 8007d1e:	9b01      	ldr	r3, [sp, #4]
 8007d20:	b15b      	cbz	r3, 8007d3a <__smakebuf_r+0x70>
 8007d22:	4630      	mov	r0, r6
 8007d24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d28:	f000 f81e 	bl	8007d68 <_isatty_r>
 8007d2c:	b128      	cbz	r0, 8007d3a <__smakebuf_r+0x70>
 8007d2e:	89a3      	ldrh	r3, [r4, #12]
 8007d30:	f023 0303 	bic.w	r3, r3, #3
 8007d34:	f043 0301 	orr.w	r3, r3, #1
 8007d38:	81a3      	strh	r3, [r4, #12]
 8007d3a:	89a3      	ldrh	r3, [r4, #12]
 8007d3c:	431d      	orrs	r5, r3
 8007d3e:	81a5      	strh	r5, [r4, #12]
 8007d40:	e7cf      	b.n	8007ce2 <__smakebuf_r+0x18>
	...

08007d44 <_fstat_r>:
 8007d44:	b538      	push	{r3, r4, r5, lr}
 8007d46:	2300      	movs	r3, #0
 8007d48:	4d06      	ldr	r5, [pc, #24]	; (8007d64 <_fstat_r+0x20>)
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	4608      	mov	r0, r1
 8007d4e:	4611      	mov	r1, r2
 8007d50:	602b      	str	r3, [r5, #0]
 8007d52:	f7f9 fe1a 	bl	800198a <_fstat>
 8007d56:	1c43      	adds	r3, r0, #1
 8007d58:	d102      	bne.n	8007d60 <_fstat_r+0x1c>
 8007d5a:	682b      	ldr	r3, [r5, #0]
 8007d5c:	b103      	cbz	r3, 8007d60 <_fstat_r+0x1c>
 8007d5e:	6023      	str	r3, [r4, #0]
 8007d60:	bd38      	pop	{r3, r4, r5, pc}
 8007d62:	bf00      	nop
 8007d64:	20000560 	.word	0x20000560

08007d68 <_isatty_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	4d05      	ldr	r5, [pc, #20]	; (8007d84 <_isatty_r+0x1c>)
 8007d6e:	4604      	mov	r4, r0
 8007d70:	4608      	mov	r0, r1
 8007d72:	602b      	str	r3, [r5, #0]
 8007d74:	f7f9 fe18 	bl	80019a8 <_isatty>
 8007d78:	1c43      	adds	r3, r0, #1
 8007d7a:	d102      	bne.n	8007d82 <_isatty_r+0x1a>
 8007d7c:	682b      	ldr	r3, [r5, #0]
 8007d7e:	b103      	cbz	r3, 8007d82 <_isatty_r+0x1a>
 8007d80:	6023      	str	r3, [r4, #0]
 8007d82:	bd38      	pop	{r3, r4, r5, pc}
 8007d84:	20000560 	.word	0x20000560

08007d88 <_init>:
 8007d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8a:	bf00      	nop
 8007d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d8e:	bc08      	pop	{r3}
 8007d90:	469e      	mov	lr, r3
 8007d92:	4770      	bx	lr

08007d94 <_fini>:
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	bf00      	nop
 8007d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9a:	bc08      	pop	{r3}
 8007d9c:	469e      	mov	lr, r3
 8007d9e:	4770      	bx	lr
